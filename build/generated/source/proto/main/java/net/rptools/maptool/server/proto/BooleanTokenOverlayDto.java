// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_transfer_objects.proto

package net.rptools.maptool.server.proto;

/**
 * Protobuf type {@code maptool.BooleanTokenOverlayDto}
 */
public final class BooleanTokenOverlayDto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maptool.BooleanTokenOverlayDto)
    BooleanTokenOverlayDtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use BooleanTokenOverlayDto.newBuilder() to construct.
  private BooleanTokenOverlayDto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private BooleanTokenOverlayDto() {
    quadrant_ = 0;
    assetId_ = "";
    type_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new BooleanTokenOverlayDto();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private BooleanTokenOverlayDto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            net.rptools.maptool.server.proto.TokenOverlayDto.Builder subBuilder = null;
            if (common_ != null) {
              subBuilder = common_.toBuilder();
            }
            common_ = input.readMessage(net.rptools.maptool.server.proto.TokenOverlayDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(common_);
              common_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {

            color_ = input.readInt32();
            break;
          }
          case 26: {
            net.rptools.maptool.server.proto.StrokeDto.Builder subBuilder = null;
            if (stroke_ != null) {
              subBuilder = stroke_.toBuilder();
            }
            stroke_ = input.readMessage(net.rptools.maptool.server.proto.StrokeDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(stroke_);
              stroke_ = subBuilder.buildPartial();
            }

            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            quadrant_ = rawValue;
            break;
          }
          case 40: {

            gridSize_ = input.readInt32();
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();

            assetId_ = s;
            break;
          }
          case 56: {
            int rawValue = input.readEnum();

            type_ = rawValue;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_BooleanTokenOverlayDto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_BooleanTokenOverlayDto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            net.rptools.maptool.server.proto.BooleanTokenOverlayDto.class, net.rptools.maptool.server.proto.BooleanTokenOverlayDto.Builder.class);
  }

  /**
   * Protobuf enum {@code maptool.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto}
   */
  public enum BooleanTokenOverlayTypeDto
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>X = 0;</code>
     */
    X(0),
    /**
     * <code>YIELD = 1;</code>
     */
    YIELD(1),
    /**
     * <code>O = 2;</code>
     */
    O(2),
    /**
     * <code>COLOR_DOT = 3;</code>
     */
    COLOR_DOT(3),
    /**
     * <code>DIAMOND = 4;</code>
     */
    DIAMOND(4),
    /**
     * <code>TRIANGLE = 5;</code>
     */
    TRIANGLE(5),
    /**
     * <code>CROSS = 6;</code>
     */
    CROSS(6),
    /**
     * <code>FLOW_COLOR_DOT = 7;</code>
     */
    FLOW_COLOR_DOT(7),
    /**
     * <code>FLOW_DIAMOND = 8;</code>
     */
    FLOW_DIAMOND(8),
    /**
     * <code>FLOW_COLOR_SQUARE = 9;</code>
     */
    FLOW_COLOR_SQUARE(9),
    /**
     * <code>FLOW_YIELD = 10;</code>
     */
    FLOW_YIELD(10),
    /**
     * <code>SHADED = 11;</code>
     */
    SHADED(11),
    /**
     * <code>IMAGE = 12;</code>
     */
    IMAGE(12),
    /**
     * <code>FLOW_IMAGE = 13;</code>
     */
    FLOW_IMAGE(13),
    /**
     * <code>CORNER_IMAGE = 14;</code>
     */
    CORNER_IMAGE(14),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>X = 0;</code>
     */
    public static final int X_VALUE = 0;
    /**
     * <code>YIELD = 1;</code>
     */
    public static final int YIELD_VALUE = 1;
    /**
     * <code>O = 2;</code>
     */
    public static final int O_VALUE = 2;
    /**
     * <code>COLOR_DOT = 3;</code>
     */
    public static final int COLOR_DOT_VALUE = 3;
    /**
     * <code>DIAMOND = 4;</code>
     */
    public static final int DIAMOND_VALUE = 4;
    /**
     * <code>TRIANGLE = 5;</code>
     */
    public static final int TRIANGLE_VALUE = 5;
    /**
     * <code>CROSS = 6;</code>
     */
    public static final int CROSS_VALUE = 6;
    /**
     * <code>FLOW_COLOR_DOT = 7;</code>
     */
    public static final int FLOW_COLOR_DOT_VALUE = 7;
    /**
     * <code>FLOW_DIAMOND = 8;</code>
     */
    public static final int FLOW_DIAMOND_VALUE = 8;
    /**
     * <code>FLOW_COLOR_SQUARE = 9;</code>
     */
    public static final int FLOW_COLOR_SQUARE_VALUE = 9;
    /**
     * <code>FLOW_YIELD = 10;</code>
     */
    public static final int FLOW_YIELD_VALUE = 10;
    /**
     * <code>SHADED = 11;</code>
     */
    public static final int SHADED_VALUE = 11;
    /**
     * <code>IMAGE = 12;</code>
     */
    public static final int IMAGE_VALUE = 12;
    /**
     * <code>FLOW_IMAGE = 13;</code>
     */
    public static final int FLOW_IMAGE_VALUE = 13;
    /**
     * <code>CORNER_IMAGE = 14;</code>
     */
    public static final int CORNER_IMAGE_VALUE = 14;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BooleanTokenOverlayTypeDto valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BooleanTokenOverlayTypeDto forNumber(int value) {
      switch (value) {
        case 0: return X;
        case 1: return YIELD;
        case 2: return O;
        case 3: return COLOR_DOT;
        case 4: return DIAMOND;
        case 5: return TRIANGLE;
        case 6: return CROSS;
        case 7: return FLOW_COLOR_DOT;
        case 8: return FLOW_DIAMOND;
        case 9: return FLOW_COLOR_SQUARE;
        case 10: return FLOW_YIELD;
        case 11: return SHADED;
        case 12: return IMAGE;
        case 13: return FLOW_IMAGE;
        case 14: return CORNER_IMAGE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BooleanTokenOverlayTypeDto>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BooleanTokenOverlayTypeDto> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BooleanTokenOverlayTypeDto>() {
            public BooleanTokenOverlayTypeDto findValueByNumber(int number) {
              return BooleanTokenOverlayTypeDto.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.BooleanTokenOverlayDto.getDescriptor().getEnumTypes().get(0);
    }

    private static final BooleanTokenOverlayTypeDto[] VALUES = values();

    public static BooleanTokenOverlayTypeDto valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BooleanTokenOverlayTypeDto(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maptool.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto)
  }

  public static final int COMMON_FIELD_NUMBER = 1;
  private net.rptools.maptool.server.proto.TokenOverlayDto common_;
  /**
   * <code>.maptool.TokenOverlayDto common = 1;</code>
   * @return Whether the common field is set.
   */
  @java.lang.Override
  public boolean hasCommon() {
    return common_ != null;
  }
  /**
   * <code>.maptool.TokenOverlayDto common = 1;</code>
   * @return The common.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.TokenOverlayDto getCommon() {
    return common_ == null ? net.rptools.maptool.server.proto.TokenOverlayDto.getDefaultInstance() : common_;
  }
  /**
   * <code>.maptool.TokenOverlayDto common = 1;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.TokenOverlayDtoOrBuilder getCommonOrBuilder() {
    return getCommon();
  }

  public static final int COLOR_FIELD_NUMBER = 2;
  private int color_;
  /**
   * <code>int32 color = 2;</code>
   * @return The color.
   */
  @java.lang.Override
  public int getColor() {
    return color_;
  }

  public static final int STROKE_FIELD_NUMBER = 3;
  private net.rptools.maptool.server.proto.StrokeDto stroke_;
  /**
   * <code>.maptool.StrokeDto stroke = 3;</code>
   * @return Whether the stroke field is set.
   */
  @java.lang.Override
  public boolean hasStroke() {
    return stroke_ != null;
  }
  /**
   * <code>.maptool.StrokeDto stroke = 3;</code>
   * @return The stroke.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.StrokeDto getStroke() {
    return stroke_ == null ? net.rptools.maptool.server.proto.StrokeDto.getDefaultInstance() : stroke_;
  }
  /**
   * <code>.maptool.StrokeDto stroke = 3;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.StrokeDtoOrBuilder getStrokeOrBuilder() {
    return getStroke();
  }

  public static final int QUADRANT_FIELD_NUMBER = 4;
  private int quadrant_;
  /**
   * <code>.maptool.QuadrantDto quadrant = 4;</code>
   * @return The enum numeric value on the wire for quadrant.
   */
  @java.lang.Override public int getQuadrantValue() {
    return quadrant_;
  }
  /**
   * <code>.maptool.QuadrantDto quadrant = 4;</code>
   * @return The quadrant.
   */
  @java.lang.Override public net.rptools.maptool.server.proto.QuadrantDto getQuadrant() {
    @SuppressWarnings("deprecation")
    net.rptools.maptool.server.proto.QuadrantDto result = net.rptools.maptool.server.proto.QuadrantDto.valueOf(quadrant_);
    return result == null ? net.rptools.maptool.server.proto.QuadrantDto.UNRECOGNIZED : result;
  }

  public static final int GRID_SIZE_FIELD_NUMBER = 5;
  private int gridSize_;
  /**
   * <code>int32 grid_size = 5;</code>
   * @return The gridSize.
   */
  @java.lang.Override
  public int getGridSize() {
    return gridSize_;
  }

  public static final int ASSET_ID_FIELD_NUMBER = 6;
  private volatile java.lang.Object assetId_;
  /**
   * <code>string asset_id = 6;</code>
   * @return The assetId.
   */
  @java.lang.Override
  public java.lang.String getAssetId() {
    java.lang.Object ref = assetId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      assetId_ = s;
      return s;
    }
  }
  /**
   * <code>string asset_id = 6;</code>
   * @return The bytes for assetId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAssetIdBytes() {
    java.lang.Object ref = assetId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      assetId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TYPE_FIELD_NUMBER = 7;
  private int type_;
  /**
   * <code>.maptool.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto type = 7;</code>
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override public int getTypeValue() {
    return type_;
  }
  /**
   * <code>.maptool.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto type = 7;</code>
   * @return The type.
   */
  @java.lang.Override public net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto getType() {
    @SuppressWarnings("deprecation")
    net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto result = net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto.valueOf(type_);
    return result == null ? net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (common_ != null) {
      output.writeMessage(1, getCommon());
    }
    if (color_ != 0) {
      output.writeInt32(2, color_);
    }
    if (stroke_ != null) {
      output.writeMessage(3, getStroke());
    }
    if (quadrant_ != net.rptools.maptool.server.proto.QuadrantDto.NORTH_EAST.getNumber()) {
      output.writeEnum(4, quadrant_);
    }
    if (gridSize_ != 0) {
      output.writeInt32(5, gridSize_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(assetId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, assetId_);
    }
    if (type_ != net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto.X.getNumber()) {
      output.writeEnum(7, type_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (common_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCommon());
    }
    if (color_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, color_);
    }
    if (stroke_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getStroke());
    }
    if (quadrant_ != net.rptools.maptool.server.proto.QuadrantDto.NORTH_EAST.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, quadrant_);
    }
    if (gridSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, gridSize_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(assetId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, assetId_);
    }
    if (type_ != net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto.X.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, type_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof net.rptools.maptool.server.proto.BooleanTokenOverlayDto)) {
      return super.equals(obj);
    }
    net.rptools.maptool.server.proto.BooleanTokenOverlayDto other = (net.rptools.maptool.server.proto.BooleanTokenOverlayDto) obj;

    if (hasCommon() != other.hasCommon()) return false;
    if (hasCommon()) {
      if (!getCommon()
          .equals(other.getCommon())) return false;
    }
    if (getColor()
        != other.getColor()) return false;
    if (hasStroke() != other.hasStroke()) return false;
    if (hasStroke()) {
      if (!getStroke()
          .equals(other.getStroke())) return false;
    }
    if (quadrant_ != other.quadrant_) return false;
    if (getGridSize()
        != other.getGridSize()) return false;
    if (!getAssetId()
        .equals(other.getAssetId())) return false;
    if (type_ != other.type_) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCommon()) {
      hash = (37 * hash) + COMMON_FIELD_NUMBER;
      hash = (53 * hash) + getCommon().hashCode();
    }
    hash = (37 * hash) + COLOR_FIELD_NUMBER;
    hash = (53 * hash) + getColor();
    if (hasStroke()) {
      hash = (37 * hash) + STROKE_FIELD_NUMBER;
      hash = (53 * hash) + getStroke().hashCode();
    }
    hash = (37 * hash) + QUADRANT_FIELD_NUMBER;
    hash = (53 * hash) + quadrant_;
    hash = (37 * hash) + GRID_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getGridSize();
    hash = (37 * hash) + ASSET_ID_FIELD_NUMBER;
    hash = (53 * hash) + getAssetId().hashCode();
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(net.rptools.maptool.server.proto.BooleanTokenOverlayDto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code maptool.BooleanTokenOverlayDto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maptool.BooleanTokenOverlayDto)
      net.rptools.maptool.server.proto.BooleanTokenOverlayDtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_BooleanTokenOverlayDto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_BooleanTokenOverlayDto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              net.rptools.maptool.server.proto.BooleanTokenOverlayDto.class, net.rptools.maptool.server.proto.BooleanTokenOverlayDto.Builder.class);
    }

    // Construct using net.rptools.maptool.server.proto.BooleanTokenOverlayDto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (commonBuilder_ == null) {
        common_ = null;
      } else {
        common_ = null;
        commonBuilder_ = null;
      }
      color_ = 0;

      if (strokeBuilder_ == null) {
        stroke_ = null;
      } else {
        stroke_ = null;
        strokeBuilder_ = null;
      }
      quadrant_ = 0;

      gridSize_ = 0;

      assetId_ = "";

      type_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_BooleanTokenOverlayDto_descriptor;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.BooleanTokenOverlayDto getDefaultInstanceForType() {
      return net.rptools.maptool.server.proto.BooleanTokenOverlayDto.getDefaultInstance();
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.BooleanTokenOverlayDto build() {
      net.rptools.maptool.server.proto.BooleanTokenOverlayDto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.BooleanTokenOverlayDto buildPartial() {
      net.rptools.maptool.server.proto.BooleanTokenOverlayDto result = new net.rptools.maptool.server.proto.BooleanTokenOverlayDto(this);
      if (commonBuilder_ == null) {
        result.common_ = common_;
      } else {
        result.common_ = commonBuilder_.build();
      }
      result.color_ = color_;
      if (strokeBuilder_ == null) {
        result.stroke_ = stroke_;
      } else {
        result.stroke_ = strokeBuilder_.build();
      }
      result.quadrant_ = quadrant_;
      result.gridSize_ = gridSize_;
      result.assetId_ = assetId_;
      result.type_ = type_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof net.rptools.maptool.server.proto.BooleanTokenOverlayDto) {
        return mergeFrom((net.rptools.maptool.server.proto.BooleanTokenOverlayDto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(net.rptools.maptool.server.proto.BooleanTokenOverlayDto other) {
      if (other == net.rptools.maptool.server.proto.BooleanTokenOverlayDto.getDefaultInstance()) return this;
      if (other.hasCommon()) {
        mergeCommon(other.getCommon());
      }
      if (other.getColor() != 0) {
        setColor(other.getColor());
      }
      if (other.hasStroke()) {
        mergeStroke(other.getStroke());
      }
      if (other.quadrant_ != 0) {
        setQuadrantValue(other.getQuadrantValue());
      }
      if (other.getGridSize() != 0) {
        setGridSize(other.getGridSize());
      }
      if (!other.getAssetId().isEmpty()) {
        assetId_ = other.assetId_;
        onChanged();
      }
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      net.rptools.maptool.server.proto.BooleanTokenOverlayDto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (net.rptools.maptool.server.proto.BooleanTokenOverlayDto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private net.rptools.maptool.server.proto.TokenOverlayDto common_;
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.TokenOverlayDto, net.rptools.maptool.server.proto.TokenOverlayDto.Builder, net.rptools.maptool.server.proto.TokenOverlayDtoOrBuilder> commonBuilder_;
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     * @return Whether the common field is set.
     */
    public boolean hasCommon() {
      return commonBuilder_ != null || common_ != null;
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     * @return The common.
     */
    public net.rptools.maptool.server.proto.TokenOverlayDto getCommon() {
      if (commonBuilder_ == null) {
        return common_ == null ? net.rptools.maptool.server.proto.TokenOverlayDto.getDefaultInstance() : common_;
      } else {
        return commonBuilder_.getMessage();
      }
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public Builder setCommon(net.rptools.maptool.server.proto.TokenOverlayDto value) {
      if (commonBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        common_ = value;
        onChanged();
      } else {
        commonBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public Builder setCommon(
        net.rptools.maptool.server.proto.TokenOverlayDto.Builder builderForValue) {
      if (commonBuilder_ == null) {
        common_ = builderForValue.build();
        onChanged();
      } else {
        commonBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public Builder mergeCommon(net.rptools.maptool.server.proto.TokenOverlayDto value) {
      if (commonBuilder_ == null) {
        if (common_ != null) {
          common_ =
            net.rptools.maptool.server.proto.TokenOverlayDto.newBuilder(common_).mergeFrom(value).buildPartial();
        } else {
          common_ = value;
        }
        onChanged();
      } else {
        commonBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public Builder clearCommon() {
      if (commonBuilder_ == null) {
        common_ = null;
        onChanged();
      } else {
        common_ = null;
        commonBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public net.rptools.maptool.server.proto.TokenOverlayDto.Builder getCommonBuilder() {
      
      onChanged();
      return getCommonFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public net.rptools.maptool.server.proto.TokenOverlayDtoOrBuilder getCommonOrBuilder() {
      if (commonBuilder_ != null) {
        return commonBuilder_.getMessageOrBuilder();
      } else {
        return common_ == null ?
            net.rptools.maptool.server.proto.TokenOverlayDto.getDefaultInstance() : common_;
      }
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.TokenOverlayDto, net.rptools.maptool.server.proto.TokenOverlayDto.Builder, net.rptools.maptool.server.proto.TokenOverlayDtoOrBuilder> 
        getCommonFieldBuilder() {
      if (commonBuilder_ == null) {
        commonBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.TokenOverlayDto, net.rptools.maptool.server.proto.TokenOverlayDto.Builder, net.rptools.maptool.server.proto.TokenOverlayDtoOrBuilder>(
                getCommon(),
                getParentForChildren(),
                isClean());
        common_ = null;
      }
      return commonBuilder_;
    }

    private int color_ ;
    /**
     * <code>int32 color = 2;</code>
     * @return The color.
     */
    @java.lang.Override
    public int getColor() {
      return color_;
    }
    /**
     * <code>int32 color = 2;</code>
     * @param value The color to set.
     * @return This builder for chaining.
     */
    public Builder setColor(int value) {
      
      color_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 color = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearColor() {
      
      color_ = 0;
      onChanged();
      return this;
    }

    private net.rptools.maptool.server.proto.StrokeDto stroke_;
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.StrokeDto, net.rptools.maptool.server.proto.StrokeDto.Builder, net.rptools.maptool.server.proto.StrokeDtoOrBuilder> strokeBuilder_;
    /**
     * <code>.maptool.StrokeDto stroke = 3;</code>
     * @return Whether the stroke field is set.
     */
    public boolean hasStroke() {
      return strokeBuilder_ != null || stroke_ != null;
    }
    /**
     * <code>.maptool.StrokeDto stroke = 3;</code>
     * @return The stroke.
     */
    public net.rptools.maptool.server.proto.StrokeDto getStroke() {
      if (strokeBuilder_ == null) {
        return stroke_ == null ? net.rptools.maptool.server.proto.StrokeDto.getDefaultInstance() : stroke_;
      } else {
        return strokeBuilder_.getMessage();
      }
    }
    /**
     * <code>.maptool.StrokeDto stroke = 3;</code>
     */
    public Builder setStroke(net.rptools.maptool.server.proto.StrokeDto value) {
      if (strokeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        stroke_ = value;
        onChanged();
      } else {
        strokeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.maptool.StrokeDto stroke = 3;</code>
     */
    public Builder setStroke(
        net.rptools.maptool.server.proto.StrokeDto.Builder builderForValue) {
      if (strokeBuilder_ == null) {
        stroke_ = builderForValue.build();
        onChanged();
      } else {
        strokeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.maptool.StrokeDto stroke = 3;</code>
     */
    public Builder mergeStroke(net.rptools.maptool.server.proto.StrokeDto value) {
      if (strokeBuilder_ == null) {
        if (stroke_ != null) {
          stroke_ =
            net.rptools.maptool.server.proto.StrokeDto.newBuilder(stroke_).mergeFrom(value).buildPartial();
        } else {
          stroke_ = value;
        }
        onChanged();
      } else {
        strokeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.maptool.StrokeDto stroke = 3;</code>
     */
    public Builder clearStroke() {
      if (strokeBuilder_ == null) {
        stroke_ = null;
        onChanged();
      } else {
        stroke_ = null;
        strokeBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.maptool.StrokeDto stroke = 3;</code>
     */
    public net.rptools.maptool.server.proto.StrokeDto.Builder getStrokeBuilder() {
      
      onChanged();
      return getStrokeFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.StrokeDto stroke = 3;</code>
     */
    public net.rptools.maptool.server.proto.StrokeDtoOrBuilder getStrokeOrBuilder() {
      if (strokeBuilder_ != null) {
        return strokeBuilder_.getMessageOrBuilder();
      } else {
        return stroke_ == null ?
            net.rptools.maptool.server.proto.StrokeDto.getDefaultInstance() : stroke_;
      }
    }
    /**
     * <code>.maptool.StrokeDto stroke = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.StrokeDto, net.rptools.maptool.server.proto.StrokeDto.Builder, net.rptools.maptool.server.proto.StrokeDtoOrBuilder> 
        getStrokeFieldBuilder() {
      if (strokeBuilder_ == null) {
        strokeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.StrokeDto, net.rptools.maptool.server.proto.StrokeDto.Builder, net.rptools.maptool.server.proto.StrokeDtoOrBuilder>(
                getStroke(),
                getParentForChildren(),
                isClean());
        stroke_ = null;
      }
      return strokeBuilder_;
    }

    private int quadrant_ = 0;
    /**
     * <code>.maptool.QuadrantDto quadrant = 4;</code>
     * @return The enum numeric value on the wire for quadrant.
     */
    @java.lang.Override public int getQuadrantValue() {
      return quadrant_;
    }
    /**
     * <code>.maptool.QuadrantDto quadrant = 4;</code>
     * @param value The enum numeric value on the wire for quadrant to set.
     * @return This builder for chaining.
     */
    public Builder setQuadrantValue(int value) {
      
      quadrant_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.QuadrantDto quadrant = 4;</code>
     * @return The quadrant.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.QuadrantDto getQuadrant() {
      @SuppressWarnings("deprecation")
      net.rptools.maptool.server.proto.QuadrantDto result = net.rptools.maptool.server.proto.QuadrantDto.valueOf(quadrant_);
      return result == null ? net.rptools.maptool.server.proto.QuadrantDto.UNRECOGNIZED : result;
    }
    /**
     * <code>.maptool.QuadrantDto quadrant = 4;</code>
     * @param value The quadrant to set.
     * @return This builder for chaining.
     */
    public Builder setQuadrant(net.rptools.maptool.server.proto.QuadrantDto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      quadrant_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.QuadrantDto quadrant = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearQuadrant() {
      
      quadrant_ = 0;
      onChanged();
      return this;
    }

    private int gridSize_ ;
    /**
     * <code>int32 grid_size = 5;</code>
     * @return The gridSize.
     */
    @java.lang.Override
    public int getGridSize() {
      return gridSize_;
    }
    /**
     * <code>int32 grid_size = 5;</code>
     * @param value The gridSize to set.
     * @return This builder for chaining.
     */
    public Builder setGridSize(int value) {
      
      gridSize_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 grid_size = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearGridSize() {
      
      gridSize_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object assetId_ = "";
    /**
     * <code>string asset_id = 6;</code>
     * @return The assetId.
     */
    public java.lang.String getAssetId() {
      java.lang.Object ref = assetId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        assetId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string asset_id = 6;</code>
     * @return The bytes for assetId.
     */
    public com.google.protobuf.ByteString
        getAssetIdBytes() {
      java.lang.Object ref = assetId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        assetId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string asset_id = 6;</code>
     * @param value The assetId to set.
     * @return This builder for chaining.
     */
    public Builder setAssetId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      assetId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string asset_id = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearAssetId() {
      
      assetId_ = getDefaultInstance().getAssetId();
      onChanged();
      return this;
    }
    /**
     * <code>string asset_id = 6;</code>
     * @param value The bytes for assetId to set.
     * @return This builder for chaining.
     */
    public Builder setAssetIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      assetId_ = value;
      onChanged();
      return this;
    }

    private int type_ = 0;
    /**
     * <code>.maptool.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto type = 7;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.maptool.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto type = 7;</code>
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      
      type_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto type = 7;</code>
     * @return The type.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto getType() {
      @SuppressWarnings("deprecation")
      net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto result = net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto.valueOf(type_);
      return result == null ? net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto.UNRECOGNIZED : result;
    }
    /**
     * <code>.maptool.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto type = 7;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(net.rptools.maptool.server.proto.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.BooleanTokenOverlayDto.BooleanTokenOverlayTypeDto type = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      
      type_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maptool.BooleanTokenOverlayDto)
  }

  // @@protoc_insertion_point(class_scope:maptool.BooleanTokenOverlayDto)
  private static final net.rptools.maptool.server.proto.BooleanTokenOverlayDto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new net.rptools.maptool.server.proto.BooleanTokenOverlayDto();
  }

  public static net.rptools.maptool.server.proto.BooleanTokenOverlayDto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BooleanTokenOverlayDto>
      PARSER = new com.google.protobuf.AbstractParser<BooleanTokenOverlayDto>() {
    @java.lang.Override
    public BooleanTokenOverlayDto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new BooleanTokenOverlayDto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<BooleanTokenOverlayDto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BooleanTokenOverlayDto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public net.rptools.maptool.server.proto.BooleanTokenOverlayDto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

