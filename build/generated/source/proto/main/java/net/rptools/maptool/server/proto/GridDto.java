// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_transfer_objects.proto

package net.rptools.maptool.server.proto;

/**
 * Protobuf type {@code maptool.GridDto}
 */
public final class GridDto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maptool.GridDto)
    GridDtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GridDto.newBuilder() to construct.
  private GridDto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GridDto() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new GridDto();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private GridDto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            offsetX_ = input.readInt32();
            break;
          }
          case 16: {

            offsetY_ = input.readInt32();
            break;
          }
          case 24: {

            size_ = input.readInt32();
            break;
          }
          case 34: {
            net.rptools.maptool.server.proto.drawing.AreaDto.Builder subBuilder = null;
            if (cellShape_ != null) {
              subBuilder = cellShape_.toBuilder();
            }
            cellShape_ = input.readMessage(net.rptools.maptool.server.proto.drawing.AreaDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(cellShape_);
              cellShape_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            net.rptools.maptool.server.proto.SquareGridDto.Builder subBuilder = null;
            if (typeCase_ == 5) {
              subBuilder = ((net.rptools.maptool.server.proto.SquareGridDto) type_).toBuilder();
            }
            type_ =
                input.readMessage(net.rptools.maptool.server.proto.SquareGridDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.SquareGridDto) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 5;
            break;
          }
          case 50: {
            net.rptools.maptool.server.proto.GridlessGridDto.Builder subBuilder = null;
            if (typeCase_ == 6) {
              subBuilder = ((net.rptools.maptool.server.proto.GridlessGridDto) type_).toBuilder();
            }
            type_ =
                input.readMessage(net.rptools.maptool.server.proto.GridlessGridDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.GridlessGridDto) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 6;
            break;
          }
          case 58: {
            net.rptools.maptool.server.proto.HexGridDto.Builder subBuilder = null;
            if (typeCase_ == 7) {
              subBuilder = ((net.rptools.maptool.server.proto.HexGridDto) type_).toBuilder();
            }
            type_ =
                input.readMessage(net.rptools.maptool.server.proto.HexGridDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.HexGridDto) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 7;
            break;
          }
          case 66: {
            net.rptools.maptool.server.proto.IsometricGridDto.Builder subBuilder = null;
            if (typeCase_ == 8) {
              subBuilder = ((net.rptools.maptool.server.proto.IsometricGridDto) type_).toBuilder();
            }
            type_ =
                input.readMessage(net.rptools.maptool.server.proto.IsometricGridDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.IsometricGridDto) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 8;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_GridDto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_GridDto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            net.rptools.maptool.server.proto.GridDto.class, net.rptools.maptool.server.proto.GridDto.Builder.class);
  }

  private int typeCase_ = 0;
  private java.lang.Object type_;
  public enum TypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    SQUARE_GRID(5),
    GRIDLESS_GRID(6),
    HEX_GRID(7),
    ISOMETRIC_GRID(8),
    TYPE_NOT_SET(0);
    private final int value;
    private TypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static TypeCase forNumber(int value) {
      switch (value) {
        case 5: return SQUARE_GRID;
        case 6: return GRIDLESS_GRID;
        case 7: return HEX_GRID;
        case 8: return ISOMETRIC_GRID;
        case 0: return TYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public TypeCase
  getTypeCase() {
    return TypeCase.forNumber(
        typeCase_);
  }

  public static final int OFFSET_X_FIELD_NUMBER = 1;
  private int offsetX_;
  /**
   * <code>int32 offset_x = 1;</code>
   * @return The offsetX.
   */
  @java.lang.Override
  public int getOffsetX() {
    return offsetX_;
  }

  public static final int OFFSET_Y_FIELD_NUMBER = 2;
  private int offsetY_;
  /**
   * <code>int32 offset_y = 2;</code>
   * @return The offsetY.
   */
  @java.lang.Override
  public int getOffsetY() {
    return offsetY_;
  }

  public static final int SIZE_FIELD_NUMBER = 3;
  private int size_;
  /**
   * <code>int32 size = 3;</code>
   * @return The size.
   */
  @java.lang.Override
  public int getSize() {
    return size_;
  }

  public static final int CELL_SHAPE_FIELD_NUMBER = 4;
  private net.rptools.maptool.server.proto.drawing.AreaDto cellShape_;
  /**
   * <code>.maptool.AreaDto cell_shape = 4;</code>
   * @return Whether the cellShape field is set.
   */
  @java.lang.Override
  public boolean hasCellShape() {
    return cellShape_ != null;
  }
  /**
   * <code>.maptool.AreaDto cell_shape = 4;</code>
   * @return The cellShape.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.AreaDto getCellShape() {
    return cellShape_ == null ? net.rptools.maptool.server.proto.drawing.AreaDto.getDefaultInstance() : cellShape_;
  }
  /**
   * <code>.maptool.AreaDto cell_shape = 4;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.AreaDtoOrBuilder getCellShapeOrBuilder() {
    return getCellShape();
  }

  public static final int SQUARE_GRID_FIELD_NUMBER = 5;
  /**
   * <code>.maptool.SquareGridDto square_grid = 5;</code>
   * @return Whether the squareGrid field is set.
   */
  @java.lang.Override
  public boolean hasSquareGrid() {
    return typeCase_ == 5;
  }
  /**
   * <code>.maptool.SquareGridDto square_grid = 5;</code>
   * @return The squareGrid.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.SquareGridDto getSquareGrid() {
    if (typeCase_ == 5) {
       return (net.rptools.maptool.server.proto.SquareGridDto) type_;
    }
    return net.rptools.maptool.server.proto.SquareGridDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.SquareGridDto square_grid = 5;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.SquareGridDtoOrBuilder getSquareGridOrBuilder() {
    if (typeCase_ == 5) {
       return (net.rptools.maptool.server.proto.SquareGridDto) type_;
    }
    return net.rptools.maptool.server.proto.SquareGridDto.getDefaultInstance();
  }

  public static final int GRIDLESS_GRID_FIELD_NUMBER = 6;
  /**
   * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
   * @return Whether the gridlessGrid field is set.
   */
  @java.lang.Override
  public boolean hasGridlessGrid() {
    return typeCase_ == 6;
  }
  /**
   * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
   * @return The gridlessGrid.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.GridlessGridDto getGridlessGrid() {
    if (typeCase_ == 6) {
       return (net.rptools.maptool.server.proto.GridlessGridDto) type_;
    }
    return net.rptools.maptool.server.proto.GridlessGridDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.GridlessGridDtoOrBuilder getGridlessGridOrBuilder() {
    if (typeCase_ == 6) {
       return (net.rptools.maptool.server.proto.GridlessGridDto) type_;
    }
    return net.rptools.maptool.server.proto.GridlessGridDto.getDefaultInstance();
  }

  public static final int HEX_GRID_FIELD_NUMBER = 7;
  /**
   * <code>.maptool.HexGridDto hex_grid = 7;</code>
   * @return Whether the hexGrid field is set.
   */
  @java.lang.Override
  public boolean hasHexGrid() {
    return typeCase_ == 7;
  }
  /**
   * <code>.maptool.HexGridDto hex_grid = 7;</code>
   * @return The hexGrid.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.HexGridDto getHexGrid() {
    if (typeCase_ == 7) {
       return (net.rptools.maptool.server.proto.HexGridDto) type_;
    }
    return net.rptools.maptool.server.proto.HexGridDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.HexGridDto hex_grid = 7;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.HexGridDtoOrBuilder getHexGridOrBuilder() {
    if (typeCase_ == 7) {
       return (net.rptools.maptool.server.proto.HexGridDto) type_;
    }
    return net.rptools.maptool.server.proto.HexGridDto.getDefaultInstance();
  }

  public static final int ISOMETRIC_GRID_FIELD_NUMBER = 8;
  /**
   * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
   * @return Whether the isometricGrid field is set.
   */
  @java.lang.Override
  public boolean hasIsometricGrid() {
    return typeCase_ == 8;
  }
  /**
   * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
   * @return The isometricGrid.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.IsometricGridDto getIsometricGrid() {
    if (typeCase_ == 8) {
       return (net.rptools.maptool.server.proto.IsometricGridDto) type_;
    }
    return net.rptools.maptool.server.proto.IsometricGridDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.IsometricGridDtoOrBuilder getIsometricGridOrBuilder() {
    if (typeCase_ == 8) {
       return (net.rptools.maptool.server.proto.IsometricGridDto) type_;
    }
    return net.rptools.maptool.server.proto.IsometricGridDto.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (offsetX_ != 0) {
      output.writeInt32(1, offsetX_);
    }
    if (offsetY_ != 0) {
      output.writeInt32(2, offsetY_);
    }
    if (size_ != 0) {
      output.writeInt32(3, size_);
    }
    if (cellShape_ != null) {
      output.writeMessage(4, getCellShape());
    }
    if (typeCase_ == 5) {
      output.writeMessage(5, (net.rptools.maptool.server.proto.SquareGridDto) type_);
    }
    if (typeCase_ == 6) {
      output.writeMessage(6, (net.rptools.maptool.server.proto.GridlessGridDto) type_);
    }
    if (typeCase_ == 7) {
      output.writeMessage(7, (net.rptools.maptool.server.proto.HexGridDto) type_);
    }
    if (typeCase_ == 8) {
      output.writeMessage(8, (net.rptools.maptool.server.proto.IsometricGridDto) type_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (offsetX_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, offsetX_);
    }
    if (offsetY_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, offsetY_);
    }
    if (size_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, size_);
    }
    if (cellShape_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getCellShape());
    }
    if (typeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (net.rptools.maptool.server.proto.SquareGridDto) type_);
    }
    if (typeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (net.rptools.maptool.server.proto.GridlessGridDto) type_);
    }
    if (typeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (net.rptools.maptool.server.proto.HexGridDto) type_);
    }
    if (typeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (net.rptools.maptool.server.proto.IsometricGridDto) type_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof net.rptools.maptool.server.proto.GridDto)) {
      return super.equals(obj);
    }
    net.rptools.maptool.server.proto.GridDto other = (net.rptools.maptool.server.proto.GridDto) obj;

    if (getOffsetX()
        != other.getOffsetX()) return false;
    if (getOffsetY()
        != other.getOffsetY()) return false;
    if (getSize()
        != other.getSize()) return false;
    if (hasCellShape() != other.hasCellShape()) return false;
    if (hasCellShape()) {
      if (!getCellShape()
          .equals(other.getCellShape())) return false;
    }
    if (!getTypeCase().equals(other.getTypeCase())) return false;
    switch (typeCase_) {
      case 5:
        if (!getSquareGrid()
            .equals(other.getSquareGrid())) return false;
        break;
      case 6:
        if (!getGridlessGrid()
            .equals(other.getGridlessGrid())) return false;
        break;
      case 7:
        if (!getHexGrid()
            .equals(other.getHexGrid())) return false;
        break;
      case 8:
        if (!getIsometricGrid()
            .equals(other.getIsometricGrid())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + OFFSET_X_FIELD_NUMBER;
    hash = (53 * hash) + getOffsetX();
    hash = (37 * hash) + OFFSET_Y_FIELD_NUMBER;
    hash = (53 * hash) + getOffsetY();
    hash = (37 * hash) + SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getSize();
    if (hasCellShape()) {
      hash = (37 * hash) + CELL_SHAPE_FIELD_NUMBER;
      hash = (53 * hash) + getCellShape().hashCode();
    }
    switch (typeCase_) {
      case 5:
        hash = (37 * hash) + SQUARE_GRID_FIELD_NUMBER;
        hash = (53 * hash) + getSquareGrid().hashCode();
        break;
      case 6:
        hash = (37 * hash) + GRIDLESS_GRID_FIELD_NUMBER;
        hash = (53 * hash) + getGridlessGrid().hashCode();
        break;
      case 7:
        hash = (37 * hash) + HEX_GRID_FIELD_NUMBER;
        hash = (53 * hash) + getHexGrid().hashCode();
        break;
      case 8:
        hash = (37 * hash) + ISOMETRIC_GRID_FIELD_NUMBER;
        hash = (53 * hash) + getIsometricGrid().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static net.rptools.maptool.server.proto.GridDto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.GridDto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.GridDto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.GridDto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.GridDto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.GridDto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.GridDto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.GridDto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.GridDto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.GridDto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.GridDto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.GridDto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(net.rptools.maptool.server.proto.GridDto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code maptool.GridDto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maptool.GridDto)
      net.rptools.maptool.server.proto.GridDtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_GridDto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_GridDto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              net.rptools.maptool.server.proto.GridDto.class, net.rptools.maptool.server.proto.GridDto.Builder.class);
    }

    // Construct using net.rptools.maptool.server.proto.GridDto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      offsetX_ = 0;

      offsetY_ = 0;

      size_ = 0;

      if (cellShapeBuilder_ == null) {
        cellShape_ = null;
      } else {
        cellShape_ = null;
        cellShapeBuilder_ = null;
      }
      typeCase_ = 0;
      type_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_GridDto_descriptor;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.GridDto getDefaultInstanceForType() {
      return net.rptools.maptool.server.proto.GridDto.getDefaultInstance();
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.GridDto build() {
      net.rptools.maptool.server.proto.GridDto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.GridDto buildPartial() {
      net.rptools.maptool.server.proto.GridDto result = new net.rptools.maptool.server.proto.GridDto(this);
      result.offsetX_ = offsetX_;
      result.offsetY_ = offsetY_;
      result.size_ = size_;
      if (cellShapeBuilder_ == null) {
        result.cellShape_ = cellShape_;
      } else {
        result.cellShape_ = cellShapeBuilder_.build();
      }
      if (typeCase_ == 5) {
        if (squareGridBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = squareGridBuilder_.build();
        }
      }
      if (typeCase_ == 6) {
        if (gridlessGridBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = gridlessGridBuilder_.build();
        }
      }
      if (typeCase_ == 7) {
        if (hexGridBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = hexGridBuilder_.build();
        }
      }
      if (typeCase_ == 8) {
        if (isometricGridBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = isometricGridBuilder_.build();
        }
      }
      result.typeCase_ = typeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof net.rptools.maptool.server.proto.GridDto) {
        return mergeFrom((net.rptools.maptool.server.proto.GridDto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(net.rptools.maptool.server.proto.GridDto other) {
      if (other == net.rptools.maptool.server.proto.GridDto.getDefaultInstance()) return this;
      if (other.getOffsetX() != 0) {
        setOffsetX(other.getOffsetX());
      }
      if (other.getOffsetY() != 0) {
        setOffsetY(other.getOffsetY());
      }
      if (other.getSize() != 0) {
        setSize(other.getSize());
      }
      if (other.hasCellShape()) {
        mergeCellShape(other.getCellShape());
      }
      switch (other.getTypeCase()) {
        case SQUARE_GRID: {
          mergeSquareGrid(other.getSquareGrid());
          break;
        }
        case GRIDLESS_GRID: {
          mergeGridlessGrid(other.getGridlessGrid());
          break;
        }
        case HEX_GRID: {
          mergeHexGrid(other.getHexGrid());
          break;
        }
        case ISOMETRIC_GRID: {
          mergeIsometricGrid(other.getIsometricGrid());
          break;
        }
        case TYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      net.rptools.maptool.server.proto.GridDto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (net.rptools.maptool.server.proto.GridDto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int typeCase_ = 0;
    private java.lang.Object type_;
    public TypeCase
        getTypeCase() {
      return TypeCase.forNumber(
          typeCase_);
    }

    public Builder clearType() {
      typeCase_ = 0;
      type_ = null;
      onChanged();
      return this;
    }


    private int offsetX_ ;
    /**
     * <code>int32 offset_x = 1;</code>
     * @return The offsetX.
     */
    @java.lang.Override
    public int getOffsetX() {
      return offsetX_;
    }
    /**
     * <code>int32 offset_x = 1;</code>
     * @param value The offsetX to set.
     * @return This builder for chaining.
     */
    public Builder setOffsetX(int value) {
      
      offsetX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 offset_x = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearOffsetX() {
      
      offsetX_ = 0;
      onChanged();
      return this;
    }

    private int offsetY_ ;
    /**
     * <code>int32 offset_y = 2;</code>
     * @return The offsetY.
     */
    @java.lang.Override
    public int getOffsetY() {
      return offsetY_;
    }
    /**
     * <code>int32 offset_y = 2;</code>
     * @param value The offsetY to set.
     * @return This builder for chaining.
     */
    public Builder setOffsetY(int value) {
      
      offsetY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 offset_y = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearOffsetY() {
      
      offsetY_ = 0;
      onChanged();
      return this;
    }

    private int size_ ;
    /**
     * <code>int32 size = 3;</code>
     * @return The size.
     */
    @java.lang.Override
    public int getSize() {
      return size_;
    }
    /**
     * <code>int32 size = 3;</code>
     * @param value The size to set.
     * @return This builder for chaining.
     */
    public Builder setSize(int value) {
      
      size_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 size = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSize() {
      
      size_ = 0;
      onChanged();
      return this;
    }

    private net.rptools.maptool.server.proto.drawing.AreaDto cellShape_;
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.AreaDto, net.rptools.maptool.server.proto.drawing.AreaDto.Builder, net.rptools.maptool.server.proto.drawing.AreaDtoOrBuilder> cellShapeBuilder_;
    /**
     * <code>.maptool.AreaDto cell_shape = 4;</code>
     * @return Whether the cellShape field is set.
     */
    public boolean hasCellShape() {
      return cellShapeBuilder_ != null || cellShape_ != null;
    }
    /**
     * <code>.maptool.AreaDto cell_shape = 4;</code>
     * @return The cellShape.
     */
    public net.rptools.maptool.server.proto.drawing.AreaDto getCellShape() {
      if (cellShapeBuilder_ == null) {
        return cellShape_ == null ? net.rptools.maptool.server.proto.drawing.AreaDto.getDefaultInstance() : cellShape_;
      } else {
        return cellShapeBuilder_.getMessage();
      }
    }
    /**
     * <code>.maptool.AreaDto cell_shape = 4;</code>
     */
    public Builder setCellShape(net.rptools.maptool.server.proto.drawing.AreaDto value) {
      if (cellShapeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        cellShape_ = value;
        onChanged();
      } else {
        cellShapeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.maptool.AreaDto cell_shape = 4;</code>
     */
    public Builder setCellShape(
        net.rptools.maptool.server.proto.drawing.AreaDto.Builder builderForValue) {
      if (cellShapeBuilder_ == null) {
        cellShape_ = builderForValue.build();
        onChanged();
      } else {
        cellShapeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.maptool.AreaDto cell_shape = 4;</code>
     */
    public Builder mergeCellShape(net.rptools.maptool.server.proto.drawing.AreaDto value) {
      if (cellShapeBuilder_ == null) {
        if (cellShape_ != null) {
          cellShape_ =
            net.rptools.maptool.server.proto.drawing.AreaDto.newBuilder(cellShape_).mergeFrom(value).buildPartial();
        } else {
          cellShape_ = value;
        }
        onChanged();
      } else {
        cellShapeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.maptool.AreaDto cell_shape = 4;</code>
     */
    public Builder clearCellShape() {
      if (cellShapeBuilder_ == null) {
        cellShape_ = null;
        onChanged();
      } else {
        cellShape_ = null;
        cellShapeBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.maptool.AreaDto cell_shape = 4;</code>
     */
    public net.rptools.maptool.server.proto.drawing.AreaDto.Builder getCellShapeBuilder() {
      
      onChanged();
      return getCellShapeFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.AreaDto cell_shape = 4;</code>
     */
    public net.rptools.maptool.server.proto.drawing.AreaDtoOrBuilder getCellShapeOrBuilder() {
      if (cellShapeBuilder_ != null) {
        return cellShapeBuilder_.getMessageOrBuilder();
      } else {
        return cellShape_ == null ?
            net.rptools.maptool.server.proto.drawing.AreaDto.getDefaultInstance() : cellShape_;
      }
    }
    /**
     * <code>.maptool.AreaDto cell_shape = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.AreaDto, net.rptools.maptool.server.proto.drawing.AreaDto.Builder, net.rptools.maptool.server.proto.drawing.AreaDtoOrBuilder> 
        getCellShapeFieldBuilder() {
      if (cellShapeBuilder_ == null) {
        cellShapeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.AreaDto, net.rptools.maptool.server.proto.drawing.AreaDto.Builder, net.rptools.maptool.server.proto.drawing.AreaDtoOrBuilder>(
                getCellShape(),
                getParentForChildren(),
                isClean());
        cellShape_ = null;
      }
      return cellShapeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.SquareGridDto, net.rptools.maptool.server.proto.SquareGridDto.Builder, net.rptools.maptool.server.proto.SquareGridDtoOrBuilder> squareGridBuilder_;
    /**
     * <code>.maptool.SquareGridDto square_grid = 5;</code>
     * @return Whether the squareGrid field is set.
     */
    @java.lang.Override
    public boolean hasSquareGrid() {
      return typeCase_ == 5;
    }
    /**
     * <code>.maptool.SquareGridDto square_grid = 5;</code>
     * @return The squareGrid.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.SquareGridDto getSquareGrid() {
      if (squareGridBuilder_ == null) {
        if (typeCase_ == 5) {
          return (net.rptools.maptool.server.proto.SquareGridDto) type_;
        }
        return net.rptools.maptool.server.proto.SquareGridDto.getDefaultInstance();
      } else {
        if (typeCase_ == 5) {
          return squareGridBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.SquareGridDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.SquareGridDto square_grid = 5;</code>
     */
    public Builder setSquareGrid(net.rptools.maptool.server.proto.SquareGridDto value) {
      if (squareGridBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        squareGridBuilder_.setMessage(value);
      }
      typeCase_ = 5;
      return this;
    }
    /**
     * <code>.maptool.SquareGridDto square_grid = 5;</code>
     */
    public Builder setSquareGrid(
        net.rptools.maptool.server.proto.SquareGridDto.Builder builderForValue) {
      if (squareGridBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        squareGridBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 5;
      return this;
    }
    /**
     * <code>.maptool.SquareGridDto square_grid = 5;</code>
     */
    public Builder mergeSquareGrid(net.rptools.maptool.server.proto.SquareGridDto value) {
      if (squareGridBuilder_ == null) {
        if (typeCase_ == 5 &&
            type_ != net.rptools.maptool.server.proto.SquareGridDto.getDefaultInstance()) {
          type_ = net.rptools.maptool.server.proto.SquareGridDto.newBuilder((net.rptools.maptool.server.proto.SquareGridDto) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 5) {
          squareGridBuilder_.mergeFrom(value);
        } else {
          squareGridBuilder_.setMessage(value);
        }
      }
      typeCase_ = 5;
      return this;
    }
    /**
     * <code>.maptool.SquareGridDto square_grid = 5;</code>
     */
    public Builder clearSquareGrid() {
      if (squareGridBuilder_ == null) {
        if (typeCase_ == 5) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 5) {
          typeCase_ = 0;
          type_ = null;
        }
        squareGridBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.SquareGridDto square_grid = 5;</code>
     */
    public net.rptools.maptool.server.proto.SquareGridDto.Builder getSquareGridBuilder() {
      return getSquareGridFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.SquareGridDto square_grid = 5;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.SquareGridDtoOrBuilder getSquareGridOrBuilder() {
      if ((typeCase_ == 5) && (squareGridBuilder_ != null)) {
        return squareGridBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 5) {
          return (net.rptools.maptool.server.proto.SquareGridDto) type_;
        }
        return net.rptools.maptool.server.proto.SquareGridDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.SquareGridDto square_grid = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.SquareGridDto, net.rptools.maptool.server.proto.SquareGridDto.Builder, net.rptools.maptool.server.proto.SquareGridDtoOrBuilder> 
        getSquareGridFieldBuilder() {
      if (squareGridBuilder_ == null) {
        if (!(typeCase_ == 5)) {
          type_ = net.rptools.maptool.server.proto.SquareGridDto.getDefaultInstance();
        }
        squareGridBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.SquareGridDto, net.rptools.maptool.server.proto.SquareGridDto.Builder, net.rptools.maptool.server.proto.SquareGridDtoOrBuilder>(
                (net.rptools.maptool.server.proto.SquareGridDto) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 5;
      onChanged();;
      return squareGridBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.GridlessGridDto, net.rptools.maptool.server.proto.GridlessGridDto.Builder, net.rptools.maptool.server.proto.GridlessGridDtoOrBuilder> gridlessGridBuilder_;
    /**
     * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
     * @return Whether the gridlessGrid field is set.
     */
    @java.lang.Override
    public boolean hasGridlessGrid() {
      return typeCase_ == 6;
    }
    /**
     * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
     * @return The gridlessGrid.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.GridlessGridDto getGridlessGrid() {
      if (gridlessGridBuilder_ == null) {
        if (typeCase_ == 6) {
          return (net.rptools.maptool.server.proto.GridlessGridDto) type_;
        }
        return net.rptools.maptool.server.proto.GridlessGridDto.getDefaultInstance();
      } else {
        if (typeCase_ == 6) {
          return gridlessGridBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.GridlessGridDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
     */
    public Builder setGridlessGrid(net.rptools.maptool.server.proto.GridlessGridDto value) {
      if (gridlessGridBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        gridlessGridBuilder_.setMessage(value);
      }
      typeCase_ = 6;
      return this;
    }
    /**
     * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
     */
    public Builder setGridlessGrid(
        net.rptools.maptool.server.proto.GridlessGridDto.Builder builderForValue) {
      if (gridlessGridBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        gridlessGridBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 6;
      return this;
    }
    /**
     * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
     */
    public Builder mergeGridlessGrid(net.rptools.maptool.server.proto.GridlessGridDto value) {
      if (gridlessGridBuilder_ == null) {
        if (typeCase_ == 6 &&
            type_ != net.rptools.maptool.server.proto.GridlessGridDto.getDefaultInstance()) {
          type_ = net.rptools.maptool.server.proto.GridlessGridDto.newBuilder((net.rptools.maptool.server.proto.GridlessGridDto) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 6) {
          gridlessGridBuilder_.mergeFrom(value);
        } else {
          gridlessGridBuilder_.setMessage(value);
        }
      }
      typeCase_ = 6;
      return this;
    }
    /**
     * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
     */
    public Builder clearGridlessGrid() {
      if (gridlessGridBuilder_ == null) {
        if (typeCase_ == 6) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 6) {
          typeCase_ = 0;
          type_ = null;
        }
        gridlessGridBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
     */
    public net.rptools.maptool.server.proto.GridlessGridDto.Builder getGridlessGridBuilder() {
      return getGridlessGridFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.GridlessGridDtoOrBuilder getGridlessGridOrBuilder() {
      if ((typeCase_ == 6) && (gridlessGridBuilder_ != null)) {
        return gridlessGridBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 6) {
          return (net.rptools.maptool.server.proto.GridlessGridDto) type_;
        }
        return net.rptools.maptool.server.proto.GridlessGridDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.GridlessGridDto gridless_grid = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.GridlessGridDto, net.rptools.maptool.server.proto.GridlessGridDto.Builder, net.rptools.maptool.server.proto.GridlessGridDtoOrBuilder> 
        getGridlessGridFieldBuilder() {
      if (gridlessGridBuilder_ == null) {
        if (!(typeCase_ == 6)) {
          type_ = net.rptools.maptool.server.proto.GridlessGridDto.getDefaultInstance();
        }
        gridlessGridBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.GridlessGridDto, net.rptools.maptool.server.proto.GridlessGridDto.Builder, net.rptools.maptool.server.proto.GridlessGridDtoOrBuilder>(
                (net.rptools.maptool.server.proto.GridlessGridDto) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 6;
      onChanged();;
      return gridlessGridBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.HexGridDto, net.rptools.maptool.server.proto.HexGridDto.Builder, net.rptools.maptool.server.proto.HexGridDtoOrBuilder> hexGridBuilder_;
    /**
     * <code>.maptool.HexGridDto hex_grid = 7;</code>
     * @return Whether the hexGrid field is set.
     */
    @java.lang.Override
    public boolean hasHexGrid() {
      return typeCase_ == 7;
    }
    /**
     * <code>.maptool.HexGridDto hex_grid = 7;</code>
     * @return The hexGrid.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.HexGridDto getHexGrid() {
      if (hexGridBuilder_ == null) {
        if (typeCase_ == 7) {
          return (net.rptools.maptool.server.proto.HexGridDto) type_;
        }
        return net.rptools.maptool.server.proto.HexGridDto.getDefaultInstance();
      } else {
        if (typeCase_ == 7) {
          return hexGridBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.HexGridDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.HexGridDto hex_grid = 7;</code>
     */
    public Builder setHexGrid(net.rptools.maptool.server.proto.HexGridDto value) {
      if (hexGridBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        hexGridBuilder_.setMessage(value);
      }
      typeCase_ = 7;
      return this;
    }
    /**
     * <code>.maptool.HexGridDto hex_grid = 7;</code>
     */
    public Builder setHexGrid(
        net.rptools.maptool.server.proto.HexGridDto.Builder builderForValue) {
      if (hexGridBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        hexGridBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 7;
      return this;
    }
    /**
     * <code>.maptool.HexGridDto hex_grid = 7;</code>
     */
    public Builder mergeHexGrid(net.rptools.maptool.server.proto.HexGridDto value) {
      if (hexGridBuilder_ == null) {
        if (typeCase_ == 7 &&
            type_ != net.rptools.maptool.server.proto.HexGridDto.getDefaultInstance()) {
          type_ = net.rptools.maptool.server.proto.HexGridDto.newBuilder((net.rptools.maptool.server.proto.HexGridDto) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 7) {
          hexGridBuilder_.mergeFrom(value);
        } else {
          hexGridBuilder_.setMessage(value);
        }
      }
      typeCase_ = 7;
      return this;
    }
    /**
     * <code>.maptool.HexGridDto hex_grid = 7;</code>
     */
    public Builder clearHexGrid() {
      if (hexGridBuilder_ == null) {
        if (typeCase_ == 7) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 7) {
          typeCase_ = 0;
          type_ = null;
        }
        hexGridBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.HexGridDto hex_grid = 7;</code>
     */
    public net.rptools.maptool.server.proto.HexGridDto.Builder getHexGridBuilder() {
      return getHexGridFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.HexGridDto hex_grid = 7;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.HexGridDtoOrBuilder getHexGridOrBuilder() {
      if ((typeCase_ == 7) && (hexGridBuilder_ != null)) {
        return hexGridBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 7) {
          return (net.rptools.maptool.server.proto.HexGridDto) type_;
        }
        return net.rptools.maptool.server.proto.HexGridDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.HexGridDto hex_grid = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.HexGridDto, net.rptools.maptool.server.proto.HexGridDto.Builder, net.rptools.maptool.server.proto.HexGridDtoOrBuilder> 
        getHexGridFieldBuilder() {
      if (hexGridBuilder_ == null) {
        if (!(typeCase_ == 7)) {
          type_ = net.rptools.maptool.server.proto.HexGridDto.getDefaultInstance();
        }
        hexGridBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.HexGridDto, net.rptools.maptool.server.proto.HexGridDto.Builder, net.rptools.maptool.server.proto.HexGridDtoOrBuilder>(
                (net.rptools.maptool.server.proto.HexGridDto) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 7;
      onChanged();;
      return hexGridBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.IsometricGridDto, net.rptools.maptool.server.proto.IsometricGridDto.Builder, net.rptools.maptool.server.proto.IsometricGridDtoOrBuilder> isometricGridBuilder_;
    /**
     * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
     * @return Whether the isometricGrid field is set.
     */
    @java.lang.Override
    public boolean hasIsometricGrid() {
      return typeCase_ == 8;
    }
    /**
     * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
     * @return The isometricGrid.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.IsometricGridDto getIsometricGrid() {
      if (isometricGridBuilder_ == null) {
        if (typeCase_ == 8) {
          return (net.rptools.maptool.server.proto.IsometricGridDto) type_;
        }
        return net.rptools.maptool.server.proto.IsometricGridDto.getDefaultInstance();
      } else {
        if (typeCase_ == 8) {
          return isometricGridBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.IsometricGridDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
     */
    public Builder setIsometricGrid(net.rptools.maptool.server.proto.IsometricGridDto value) {
      if (isometricGridBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        isometricGridBuilder_.setMessage(value);
      }
      typeCase_ = 8;
      return this;
    }
    /**
     * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
     */
    public Builder setIsometricGrid(
        net.rptools.maptool.server.proto.IsometricGridDto.Builder builderForValue) {
      if (isometricGridBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        isometricGridBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 8;
      return this;
    }
    /**
     * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
     */
    public Builder mergeIsometricGrid(net.rptools.maptool.server.proto.IsometricGridDto value) {
      if (isometricGridBuilder_ == null) {
        if (typeCase_ == 8 &&
            type_ != net.rptools.maptool.server.proto.IsometricGridDto.getDefaultInstance()) {
          type_ = net.rptools.maptool.server.proto.IsometricGridDto.newBuilder((net.rptools.maptool.server.proto.IsometricGridDto) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 8) {
          isometricGridBuilder_.mergeFrom(value);
        } else {
          isometricGridBuilder_.setMessage(value);
        }
      }
      typeCase_ = 8;
      return this;
    }
    /**
     * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
     */
    public Builder clearIsometricGrid() {
      if (isometricGridBuilder_ == null) {
        if (typeCase_ == 8) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 8) {
          typeCase_ = 0;
          type_ = null;
        }
        isometricGridBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
     */
    public net.rptools.maptool.server.proto.IsometricGridDto.Builder getIsometricGridBuilder() {
      return getIsometricGridFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.IsometricGridDtoOrBuilder getIsometricGridOrBuilder() {
      if ((typeCase_ == 8) && (isometricGridBuilder_ != null)) {
        return isometricGridBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 8) {
          return (net.rptools.maptool.server.proto.IsometricGridDto) type_;
        }
        return net.rptools.maptool.server.proto.IsometricGridDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.IsometricGridDto isometric_grid = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.IsometricGridDto, net.rptools.maptool.server.proto.IsometricGridDto.Builder, net.rptools.maptool.server.proto.IsometricGridDtoOrBuilder> 
        getIsometricGridFieldBuilder() {
      if (isometricGridBuilder_ == null) {
        if (!(typeCase_ == 8)) {
          type_ = net.rptools.maptool.server.proto.IsometricGridDto.getDefaultInstance();
        }
        isometricGridBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.IsometricGridDto, net.rptools.maptool.server.proto.IsometricGridDto.Builder, net.rptools.maptool.server.proto.IsometricGridDtoOrBuilder>(
                (net.rptools.maptool.server.proto.IsometricGridDto) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 8;
      onChanged();;
      return isometricGridBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maptool.GridDto)
  }

  // @@protoc_insertion_point(class_scope:maptool.GridDto)
  private static final net.rptools.maptool.server.proto.GridDto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new net.rptools.maptool.server.proto.GridDto();
  }

  public static net.rptools.maptool.server.proto.GridDto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GridDto>
      PARSER = new com.google.protobuf.AbstractParser<GridDto>() {
    @java.lang.Override
    public GridDto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new GridDto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<GridDto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GridDto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public net.rptools.maptool.server.proto.GridDto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

