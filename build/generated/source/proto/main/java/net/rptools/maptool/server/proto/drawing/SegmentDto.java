// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drawing_dto.proto

package net.rptools.maptool.server.proto.drawing;

/**
 * Protobuf type {@code maptool.SegmentDto}
 */
public final class SegmentDto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maptool.SegmentDto)
    SegmentDtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SegmentDto.newBuilder() to construct.
  private SegmentDto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SegmentDto() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SegmentDto();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SegmentDto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            net.rptools.maptool.server.proto.drawing.MoveToSegment.Builder subBuilder = null;
            if (segmentTypeCase_ == 1) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.MoveToSegment) segmentType_).toBuilder();
            }
            segmentType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.MoveToSegment.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.MoveToSegment) segmentType_);
              segmentType_ = subBuilder.buildPartial();
            }
            segmentTypeCase_ = 1;
            break;
          }
          case 18: {
            net.rptools.maptool.server.proto.drawing.LineToSegment.Builder subBuilder = null;
            if (segmentTypeCase_ == 2) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.LineToSegment) segmentType_).toBuilder();
            }
            segmentType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.LineToSegment.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.LineToSegment) segmentType_);
              segmentType_ = subBuilder.buildPartial();
            }
            segmentTypeCase_ = 2;
            break;
          }
          case 26: {
            net.rptools.maptool.server.proto.drawing.QuadToSegment.Builder subBuilder = null;
            if (segmentTypeCase_ == 3) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.QuadToSegment) segmentType_).toBuilder();
            }
            segmentType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.QuadToSegment.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.QuadToSegment) segmentType_);
              segmentType_ = subBuilder.buildPartial();
            }
            segmentTypeCase_ = 3;
            break;
          }
          case 34: {
            net.rptools.maptool.server.proto.drawing.CubicToSegment.Builder subBuilder = null;
            if (segmentTypeCase_ == 4) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.CubicToSegment) segmentType_).toBuilder();
            }
            segmentType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.CubicToSegment.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.CubicToSegment) segmentType_);
              segmentType_ = subBuilder.buildPartial();
            }
            segmentTypeCase_ = 4;
            break;
          }
          case 42: {
            net.rptools.maptool.server.proto.drawing.CloseSegment.Builder subBuilder = null;
            if (segmentTypeCase_ == 5) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.CloseSegment) segmentType_).toBuilder();
            }
            segmentType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.CloseSegment.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.CloseSegment) segmentType_);
              segmentType_ = subBuilder.buildPartial();
            }
            segmentTypeCase_ = 5;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_SegmentDto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_SegmentDto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            net.rptools.maptool.server.proto.drawing.SegmentDto.class, net.rptools.maptool.server.proto.drawing.SegmentDto.Builder.class);
  }

  private int segmentTypeCase_ = 0;
  private java.lang.Object segmentType_;
  public enum SegmentTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    MOVE_TO(1),
    LINE_TO(2),
    QUAD_TO(3),
    CUBIC_TO(4),
    CLOSE(5),
    SEGMENTTYPE_NOT_SET(0);
    private final int value;
    private SegmentTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SegmentTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static SegmentTypeCase forNumber(int value) {
      switch (value) {
        case 1: return MOVE_TO;
        case 2: return LINE_TO;
        case 3: return QUAD_TO;
        case 4: return CUBIC_TO;
        case 5: return CLOSE;
        case 0: return SEGMENTTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public SegmentTypeCase
  getSegmentTypeCase() {
    return SegmentTypeCase.forNumber(
        segmentTypeCase_);
  }

  public static final int MOVE_TO_FIELD_NUMBER = 1;
  /**
   * <code>.maptool.MoveToSegment move_to = 1;</code>
   * @return Whether the moveTo field is set.
   */
  @java.lang.Override
  public boolean hasMoveTo() {
    return segmentTypeCase_ == 1;
  }
  /**
   * <code>.maptool.MoveToSegment move_to = 1;</code>
   * @return The moveTo.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.MoveToSegment getMoveTo() {
    if (segmentTypeCase_ == 1) {
       return (net.rptools.maptool.server.proto.drawing.MoveToSegment) segmentType_;
    }
    return net.rptools.maptool.server.proto.drawing.MoveToSegment.getDefaultInstance();
  }
  /**
   * <code>.maptool.MoveToSegment move_to = 1;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.MoveToSegmentOrBuilder getMoveToOrBuilder() {
    if (segmentTypeCase_ == 1) {
       return (net.rptools.maptool.server.proto.drawing.MoveToSegment) segmentType_;
    }
    return net.rptools.maptool.server.proto.drawing.MoveToSegment.getDefaultInstance();
  }

  public static final int LINE_TO_FIELD_NUMBER = 2;
  /**
   * <code>.maptool.LineToSegment line_to = 2;</code>
   * @return Whether the lineTo field is set.
   */
  @java.lang.Override
  public boolean hasLineTo() {
    return segmentTypeCase_ == 2;
  }
  /**
   * <code>.maptool.LineToSegment line_to = 2;</code>
   * @return The lineTo.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.LineToSegment getLineTo() {
    if (segmentTypeCase_ == 2) {
       return (net.rptools.maptool.server.proto.drawing.LineToSegment) segmentType_;
    }
    return net.rptools.maptool.server.proto.drawing.LineToSegment.getDefaultInstance();
  }
  /**
   * <code>.maptool.LineToSegment line_to = 2;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.LineToSegmentOrBuilder getLineToOrBuilder() {
    if (segmentTypeCase_ == 2) {
       return (net.rptools.maptool.server.proto.drawing.LineToSegment) segmentType_;
    }
    return net.rptools.maptool.server.proto.drawing.LineToSegment.getDefaultInstance();
  }

  public static final int QUAD_TO_FIELD_NUMBER = 3;
  /**
   * <code>.maptool.QuadToSegment quad_to = 3;</code>
   * @return Whether the quadTo field is set.
   */
  @java.lang.Override
  public boolean hasQuadTo() {
    return segmentTypeCase_ == 3;
  }
  /**
   * <code>.maptool.QuadToSegment quad_to = 3;</code>
   * @return The quadTo.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.QuadToSegment getQuadTo() {
    if (segmentTypeCase_ == 3) {
       return (net.rptools.maptool.server.proto.drawing.QuadToSegment) segmentType_;
    }
    return net.rptools.maptool.server.proto.drawing.QuadToSegment.getDefaultInstance();
  }
  /**
   * <code>.maptool.QuadToSegment quad_to = 3;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.QuadToSegmentOrBuilder getQuadToOrBuilder() {
    if (segmentTypeCase_ == 3) {
       return (net.rptools.maptool.server.proto.drawing.QuadToSegment) segmentType_;
    }
    return net.rptools.maptool.server.proto.drawing.QuadToSegment.getDefaultInstance();
  }

  public static final int CUBIC_TO_FIELD_NUMBER = 4;
  /**
   * <code>.maptool.CubicToSegment cubic_to = 4;</code>
   * @return Whether the cubicTo field is set.
   */
  @java.lang.Override
  public boolean hasCubicTo() {
    return segmentTypeCase_ == 4;
  }
  /**
   * <code>.maptool.CubicToSegment cubic_to = 4;</code>
   * @return The cubicTo.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.CubicToSegment getCubicTo() {
    if (segmentTypeCase_ == 4) {
       return (net.rptools.maptool.server.proto.drawing.CubicToSegment) segmentType_;
    }
    return net.rptools.maptool.server.proto.drawing.CubicToSegment.getDefaultInstance();
  }
  /**
   * <code>.maptool.CubicToSegment cubic_to = 4;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.CubicToSegmentOrBuilder getCubicToOrBuilder() {
    if (segmentTypeCase_ == 4) {
       return (net.rptools.maptool.server.proto.drawing.CubicToSegment) segmentType_;
    }
    return net.rptools.maptool.server.proto.drawing.CubicToSegment.getDefaultInstance();
  }

  public static final int CLOSE_FIELD_NUMBER = 5;
  /**
   * <code>.maptool.CloseSegment close = 5;</code>
   * @return Whether the close field is set.
   */
  @java.lang.Override
  public boolean hasClose() {
    return segmentTypeCase_ == 5;
  }
  /**
   * <code>.maptool.CloseSegment close = 5;</code>
   * @return The close.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.CloseSegment getClose() {
    if (segmentTypeCase_ == 5) {
       return (net.rptools.maptool.server.proto.drawing.CloseSegment) segmentType_;
    }
    return net.rptools.maptool.server.proto.drawing.CloseSegment.getDefaultInstance();
  }
  /**
   * <code>.maptool.CloseSegment close = 5;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.CloseSegmentOrBuilder getCloseOrBuilder() {
    if (segmentTypeCase_ == 5) {
       return (net.rptools.maptool.server.proto.drawing.CloseSegment) segmentType_;
    }
    return net.rptools.maptool.server.proto.drawing.CloseSegment.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (segmentTypeCase_ == 1) {
      output.writeMessage(1, (net.rptools.maptool.server.proto.drawing.MoveToSegment) segmentType_);
    }
    if (segmentTypeCase_ == 2) {
      output.writeMessage(2, (net.rptools.maptool.server.proto.drawing.LineToSegment) segmentType_);
    }
    if (segmentTypeCase_ == 3) {
      output.writeMessage(3, (net.rptools.maptool.server.proto.drawing.QuadToSegment) segmentType_);
    }
    if (segmentTypeCase_ == 4) {
      output.writeMessage(4, (net.rptools.maptool.server.proto.drawing.CubicToSegment) segmentType_);
    }
    if (segmentTypeCase_ == 5) {
      output.writeMessage(5, (net.rptools.maptool.server.proto.drawing.CloseSegment) segmentType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (segmentTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (net.rptools.maptool.server.proto.drawing.MoveToSegment) segmentType_);
    }
    if (segmentTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (net.rptools.maptool.server.proto.drawing.LineToSegment) segmentType_);
    }
    if (segmentTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (net.rptools.maptool.server.proto.drawing.QuadToSegment) segmentType_);
    }
    if (segmentTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (net.rptools.maptool.server.proto.drawing.CubicToSegment) segmentType_);
    }
    if (segmentTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (net.rptools.maptool.server.proto.drawing.CloseSegment) segmentType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof net.rptools.maptool.server.proto.drawing.SegmentDto)) {
      return super.equals(obj);
    }
    net.rptools.maptool.server.proto.drawing.SegmentDto other = (net.rptools.maptool.server.proto.drawing.SegmentDto) obj;

    if (!getSegmentTypeCase().equals(other.getSegmentTypeCase())) return false;
    switch (segmentTypeCase_) {
      case 1:
        if (!getMoveTo()
            .equals(other.getMoveTo())) return false;
        break;
      case 2:
        if (!getLineTo()
            .equals(other.getLineTo())) return false;
        break;
      case 3:
        if (!getQuadTo()
            .equals(other.getQuadTo())) return false;
        break;
      case 4:
        if (!getCubicTo()
            .equals(other.getCubicTo())) return false;
        break;
      case 5:
        if (!getClose()
            .equals(other.getClose())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (segmentTypeCase_) {
      case 1:
        hash = (37 * hash) + MOVE_TO_FIELD_NUMBER;
        hash = (53 * hash) + getMoveTo().hashCode();
        break;
      case 2:
        hash = (37 * hash) + LINE_TO_FIELD_NUMBER;
        hash = (53 * hash) + getLineTo().hashCode();
        break;
      case 3:
        hash = (37 * hash) + QUAD_TO_FIELD_NUMBER;
        hash = (53 * hash) + getQuadTo().hashCode();
        break;
      case 4:
        hash = (37 * hash) + CUBIC_TO_FIELD_NUMBER;
        hash = (53 * hash) + getCubicTo().hashCode();
        break;
      case 5:
        hash = (37 * hash) + CLOSE_FIELD_NUMBER;
        hash = (53 * hash) + getClose().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.SegmentDto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(net.rptools.maptool.server.proto.drawing.SegmentDto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code maptool.SegmentDto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maptool.SegmentDto)
      net.rptools.maptool.server.proto.drawing.SegmentDtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_SegmentDto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_SegmentDto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              net.rptools.maptool.server.proto.drawing.SegmentDto.class, net.rptools.maptool.server.proto.drawing.SegmentDto.Builder.class);
    }

    // Construct using net.rptools.maptool.server.proto.drawing.SegmentDto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      segmentTypeCase_ = 0;
      segmentType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_SegmentDto_descriptor;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.SegmentDto getDefaultInstanceForType() {
      return net.rptools.maptool.server.proto.drawing.SegmentDto.getDefaultInstance();
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.SegmentDto build() {
      net.rptools.maptool.server.proto.drawing.SegmentDto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.SegmentDto buildPartial() {
      net.rptools.maptool.server.proto.drawing.SegmentDto result = new net.rptools.maptool.server.proto.drawing.SegmentDto(this);
      if (segmentTypeCase_ == 1) {
        if (moveToBuilder_ == null) {
          result.segmentType_ = segmentType_;
        } else {
          result.segmentType_ = moveToBuilder_.build();
        }
      }
      if (segmentTypeCase_ == 2) {
        if (lineToBuilder_ == null) {
          result.segmentType_ = segmentType_;
        } else {
          result.segmentType_ = lineToBuilder_.build();
        }
      }
      if (segmentTypeCase_ == 3) {
        if (quadToBuilder_ == null) {
          result.segmentType_ = segmentType_;
        } else {
          result.segmentType_ = quadToBuilder_.build();
        }
      }
      if (segmentTypeCase_ == 4) {
        if (cubicToBuilder_ == null) {
          result.segmentType_ = segmentType_;
        } else {
          result.segmentType_ = cubicToBuilder_.build();
        }
      }
      if (segmentTypeCase_ == 5) {
        if (closeBuilder_ == null) {
          result.segmentType_ = segmentType_;
        } else {
          result.segmentType_ = closeBuilder_.build();
        }
      }
      result.segmentTypeCase_ = segmentTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof net.rptools.maptool.server.proto.drawing.SegmentDto) {
        return mergeFrom((net.rptools.maptool.server.proto.drawing.SegmentDto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(net.rptools.maptool.server.proto.drawing.SegmentDto other) {
      if (other == net.rptools.maptool.server.proto.drawing.SegmentDto.getDefaultInstance()) return this;
      switch (other.getSegmentTypeCase()) {
        case MOVE_TO: {
          mergeMoveTo(other.getMoveTo());
          break;
        }
        case LINE_TO: {
          mergeLineTo(other.getLineTo());
          break;
        }
        case QUAD_TO: {
          mergeQuadTo(other.getQuadTo());
          break;
        }
        case CUBIC_TO: {
          mergeCubicTo(other.getCubicTo());
          break;
        }
        case CLOSE: {
          mergeClose(other.getClose());
          break;
        }
        case SEGMENTTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      net.rptools.maptool.server.proto.drawing.SegmentDto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (net.rptools.maptool.server.proto.drawing.SegmentDto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int segmentTypeCase_ = 0;
    private java.lang.Object segmentType_;
    public SegmentTypeCase
        getSegmentTypeCase() {
      return SegmentTypeCase.forNumber(
          segmentTypeCase_);
    }

    public Builder clearSegmentType() {
      segmentTypeCase_ = 0;
      segmentType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.MoveToSegment, net.rptools.maptool.server.proto.drawing.MoveToSegment.Builder, net.rptools.maptool.server.proto.drawing.MoveToSegmentOrBuilder> moveToBuilder_;
    /**
     * <code>.maptool.MoveToSegment move_to = 1;</code>
     * @return Whether the moveTo field is set.
     */
    @java.lang.Override
    public boolean hasMoveTo() {
      return segmentTypeCase_ == 1;
    }
    /**
     * <code>.maptool.MoveToSegment move_to = 1;</code>
     * @return The moveTo.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.MoveToSegment getMoveTo() {
      if (moveToBuilder_ == null) {
        if (segmentTypeCase_ == 1) {
          return (net.rptools.maptool.server.proto.drawing.MoveToSegment) segmentType_;
        }
        return net.rptools.maptool.server.proto.drawing.MoveToSegment.getDefaultInstance();
      } else {
        if (segmentTypeCase_ == 1) {
          return moveToBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.MoveToSegment.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.MoveToSegment move_to = 1;</code>
     */
    public Builder setMoveTo(net.rptools.maptool.server.proto.drawing.MoveToSegment value) {
      if (moveToBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        segmentType_ = value;
        onChanged();
      } else {
        moveToBuilder_.setMessage(value);
      }
      segmentTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.maptool.MoveToSegment move_to = 1;</code>
     */
    public Builder setMoveTo(
        net.rptools.maptool.server.proto.drawing.MoveToSegment.Builder builderForValue) {
      if (moveToBuilder_ == null) {
        segmentType_ = builderForValue.build();
        onChanged();
      } else {
        moveToBuilder_.setMessage(builderForValue.build());
      }
      segmentTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.maptool.MoveToSegment move_to = 1;</code>
     */
    public Builder mergeMoveTo(net.rptools.maptool.server.proto.drawing.MoveToSegment value) {
      if (moveToBuilder_ == null) {
        if (segmentTypeCase_ == 1 &&
            segmentType_ != net.rptools.maptool.server.proto.drawing.MoveToSegment.getDefaultInstance()) {
          segmentType_ = net.rptools.maptool.server.proto.drawing.MoveToSegment.newBuilder((net.rptools.maptool.server.proto.drawing.MoveToSegment) segmentType_)
              .mergeFrom(value).buildPartial();
        } else {
          segmentType_ = value;
        }
        onChanged();
      } else {
        if (segmentTypeCase_ == 1) {
          moveToBuilder_.mergeFrom(value);
        } else {
          moveToBuilder_.setMessage(value);
        }
      }
      segmentTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.maptool.MoveToSegment move_to = 1;</code>
     */
    public Builder clearMoveTo() {
      if (moveToBuilder_ == null) {
        if (segmentTypeCase_ == 1) {
          segmentTypeCase_ = 0;
          segmentType_ = null;
          onChanged();
        }
      } else {
        if (segmentTypeCase_ == 1) {
          segmentTypeCase_ = 0;
          segmentType_ = null;
        }
        moveToBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.MoveToSegment move_to = 1;</code>
     */
    public net.rptools.maptool.server.proto.drawing.MoveToSegment.Builder getMoveToBuilder() {
      return getMoveToFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.MoveToSegment move_to = 1;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.MoveToSegmentOrBuilder getMoveToOrBuilder() {
      if ((segmentTypeCase_ == 1) && (moveToBuilder_ != null)) {
        return moveToBuilder_.getMessageOrBuilder();
      } else {
        if (segmentTypeCase_ == 1) {
          return (net.rptools.maptool.server.proto.drawing.MoveToSegment) segmentType_;
        }
        return net.rptools.maptool.server.proto.drawing.MoveToSegment.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.MoveToSegment move_to = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.MoveToSegment, net.rptools.maptool.server.proto.drawing.MoveToSegment.Builder, net.rptools.maptool.server.proto.drawing.MoveToSegmentOrBuilder> 
        getMoveToFieldBuilder() {
      if (moveToBuilder_ == null) {
        if (!(segmentTypeCase_ == 1)) {
          segmentType_ = net.rptools.maptool.server.proto.drawing.MoveToSegment.getDefaultInstance();
        }
        moveToBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.MoveToSegment, net.rptools.maptool.server.proto.drawing.MoveToSegment.Builder, net.rptools.maptool.server.proto.drawing.MoveToSegmentOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.MoveToSegment) segmentType_,
                getParentForChildren(),
                isClean());
        segmentType_ = null;
      }
      segmentTypeCase_ = 1;
      onChanged();;
      return moveToBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.LineToSegment, net.rptools.maptool.server.proto.drawing.LineToSegment.Builder, net.rptools.maptool.server.proto.drawing.LineToSegmentOrBuilder> lineToBuilder_;
    /**
     * <code>.maptool.LineToSegment line_to = 2;</code>
     * @return Whether the lineTo field is set.
     */
    @java.lang.Override
    public boolean hasLineTo() {
      return segmentTypeCase_ == 2;
    }
    /**
     * <code>.maptool.LineToSegment line_to = 2;</code>
     * @return The lineTo.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.LineToSegment getLineTo() {
      if (lineToBuilder_ == null) {
        if (segmentTypeCase_ == 2) {
          return (net.rptools.maptool.server.proto.drawing.LineToSegment) segmentType_;
        }
        return net.rptools.maptool.server.proto.drawing.LineToSegment.getDefaultInstance();
      } else {
        if (segmentTypeCase_ == 2) {
          return lineToBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.LineToSegment.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.LineToSegment line_to = 2;</code>
     */
    public Builder setLineTo(net.rptools.maptool.server.proto.drawing.LineToSegment value) {
      if (lineToBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        segmentType_ = value;
        onChanged();
      } else {
        lineToBuilder_.setMessage(value);
      }
      segmentTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.maptool.LineToSegment line_to = 2;</code>
     */
    public Builder setLineTo(
        net.rptools.maptool.server.proto.drawing.LineToSegment.Builder builderForValue) {
      if (lineToBuilder_ == null) {
        segmentType_ = builderForValue.build();
        onChanged();
      } else {
        lineToBuilder_.setMessage(builderForValue.build());
      }
      segmentTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.maptool.LineToSegment line_to = 2;</code>
     */
    public Builder mergeLineTo(net.rptools.maptool.server.proto.drawing.LineToSegment value) {
      if (lineToBuilder_ == null) {
        if (segmentTypeCase_ == 2 &&
            segmentType_ != net.rptools.maptool.server.proto.drawing.LineToSegment.getDefaultInstance()) {
          segmentType_ = net.rptools.maptool.server.proto.drawing.LineToSegment.newBuilder((net.rptools.maptool.server.proto.drawing.LineToSegment) segmentType_)
              .mergeFrom(value).buildPartial();
        } else {
          segmentType_ = value;
        }
        onChanged();
      } else {
        if (segmentTypeCase_ == 2) {
          lineToBuilder_.mergeFrom(value);
        } else {
          lineToBuilder_.setMessage(value);
        }
      }
      segmentTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.maptool.LineToSegment line_to = 2;</code>
     */
    public Builder clearLineTo() {
      if (lineToBuilder_ == null) {
        if (segmentTypeCase_ == 2) {
          segmentTypeCase_ = 0;
          segmentType_ = null;
          onChanged();
        }
      } else {
        if (segmentTypeCase_ == 2) {
          segmentTypeCase_ = 0;
          segmentType_ = null;
        }
        lineToBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.LineToSegment line_to = 2;</code>
     */
    public net.rptools.maptool.server.proto.drawing.LineToSegment.Builder getLineToBuilder() {
      return getLineToFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.LineToSegment line_to = 2;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.LineToSegmentOrBuilder getLineToOrBuilder() {
      if ((segmentTypeCase_ == 2) && (lineToBuilder_ != null)) {
        return lineToBuilder_.getMessageOrBuilder();
      } else {
        if (segmentTypeCase_ == 2) {
          return (net.rptools.maptool.server.proto.drawing.LineToSegment) segmentType_;
        }
        return net.rptools.maptool.server.proto.drawing.LineToSegment.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.LineToSegment line_to = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.LineToSegment, net.rptools.maptool.server.proto.drawing.LineToSegment.Builder, net.rptools.maptool.server.proto.drawing.LineToSegmentOrBuilder> 
        getLineToFieldBuilder() {
      if (lineToBuilder_ == null) {
        if (!(segmentTypeCase_ == 2)) {
          segmentType_ = net.rptools.maptool.server.proto.drawing.LineToSegment.getDefaultInstance();
        }
        lineToBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.LineToSegment, net.rptools.maptool.server.proto.drawing.LineToSegment.Builder, net.rptools.maptool.server.proto.drawing.LineToSegmentOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.LineToSegment) segmentType_,
                getParentForChildren(),
                isClean());
        segmentType_ = null;
      }
      segmentTypeCase_ = 2;
      onChanged();;
      return lineToBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.QuadToSegment, net.rptools.maptool.server.proto.drawing.QuadToSegment.Builder, net.rptools.maptool.server.proto.drawing.QuadToSegmentOrBuilder> quadToBuilder_;
    /**
     * <code>.maptool.QuadToSegment quad_to = 3;</code>
     * @return Whether the quadTo field is set.
     */
    @java.lang.Override
    public boolean hasQuadTo() {
      return segmentTypeCase_ == 3;
    }
    /**
     * <code>.maptool.QuadToSegment quad_to = 3;</code>
     * @return The quadTo.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.QuadToSegment getQuadTo() {
      if (quadToBuilder_ == null) {
        if (segmentTypeCase_ == 3) {
          return (net.rptools.maptool.server.proto.drawing.QuadToSegment) segmentType_;
        }
        return net.rptools.maptool.server.proto.drawing.QuadToSegment.getDefaultInstance();
      } else {
        if (segmentTypeCase_ == 3) {
          return quadToBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.QuadToSegment.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.QuadToSegment quad_to = 3;</code>
     */
    public Builder setQuadTo(net.rptools.maptool.server.proto.drawing.QuadToSegment value) {
      if (quadToBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        segmentType_ = value;
        onChanged();
      } else {
        quadToBuilder_.setMessage(value);
      }
      segmentTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.maptool.QuadToSegment quad_to = 3;</code>
     */
    public Builder setQuadTo(
        net.rptools.maptool.server.proto.drawing.QuadToSegment.Builder builderForValue) {
      if (quadToBuilder_ == null) {
        segmentType_ = builderForValue.build();
        onChanged();
      } else {
        quadToBuilder_.setMessage(builderForValue.build());
      }
      segmentTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.maptool.QuadToSegment quad_to = 3;</code>
     */
    public Builder mergeQuadTo(net.rptools.maptool.server.proto.drawing.QuadToSegment value) {
      if (quadToBuilder_ == null) {
        if (segmentTypeCase_ == 3 &&
            segmentType_ != net.rptools.maptool.server.proto.drawing.QuadToSegment.getDefaultInstance()) {
          segmentType_ = net.rptools.maptool.server.proto.drawing.QuadToSegment.newBuilder((net.rptools.maptool.server.proto.drawing.QuadToSegment) segmentType_)
              .mergeFrom(value).buildPartial();
        } else {
          segmentType_ = value;
        }
        onChanged();
      } else {
        if (segmentTypeCase_ == 3) {
          quadToBuilder_.mergeFrom(value);
        } else {
          quadToBuilder_.setMessage(value);
        }
      }
      segmentTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.maptool.QuadToSegment quad_to = 3;</code>
     */
    public Builder clearQuadTo() {
      if (quadToBuilder_ == null) {
        if (segmentTypeCase_ == 3) {
          segmentTypeCase_ = 0;
          segmentType_ = null;
          onChanged();
        }
      } else {
        if (segmentTypeCase_ == 3) {
          segmentTypeCase_ = 0;
          segmentType_ = null;
        }
        quadToBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.QuadToSegment quad_to = 3;</code>
     */
    public net.rptools.maptool.server.proto.drawing.QuadToSegment.Builder getQuadToBuilder() {
      return getQuadToFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.QuadToSegment quad_to = 3;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.QuadToSegmentOrBuilder getQuadToOrBuilder() {
      if ((segmentTypeCase_ == 3) && (quadToBuilder_ != null)) {
        return quadToBuilder_.getMessageOrBuilder();
      } else {
        if (segmentTypeCase_ == 3) {
          return (net.rptools.maptool.server.proto.drawing.QuadToSegment) segmentType_;
        }
        return net.rptools.maptool.server.proto.drawing.QuadToSegment.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.QuadToSegment quad_to = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.QuadToSegment, net.rptools.maptool.server.proto.drawing.QuadToSegment.Builder, net.rptools.maptool.server.proto.drawing.QuadToSegmentOrBuilder> 
        getQuadToFieldBuilder() {
      if (quadToBuilder_ == null) {
        if (!(segmentTypeCase_ == 3)) {
          segmentType_ = net.rptools.maptool.server.proto.drawing.QuadToSegment.getDefaultInstance();
        }
        quadToBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.QuadToSegment, net.rptools.maptool.server.proto.drawing.QuadToSegment.Builder, net.rptools.maptool.server.proto.drawing.QuadToSegmentOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.QuadToSegment) segmentType_,
                getParentForChildren(),
                isClean());
        segmentType_ = null;
      }
      segmentTypeCase_ = 3;
      onChanged();;
      return quadToBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.CubicToSegment, net.rptools.maptool.server.proto.drawing.CubicToSegment.Builder, net.rptools.maptool.server.proto.drawing.CubicToSegmentOrBuilder> cubicToBuilder_;
    /**
     * <code>.maptool.CubicToSegment cubic_to = 4;</code>
     * @return Whether the cubicTo field is set.
     */
    @java.lang.Override
    public boolean hasCubicTo() {
      return segmentTypeCase_ == 4;
    }
    /**
     * <code>.maptool.CubicToSegment cubic_to = 4;</code>
     * @return The cubicTo.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.CubicToSegment getCubicTo() {
      if (cubicToBuilder_ == null) {
        if (segmentTypeCase_ == 4) {
          return (net.rptools.maptool.server.proto.drawing.CubicToSegment) segmentType_;
        }
        return net.rptools.maptool.server.proto.drawing.CubicToSegment.getDefaultInstance();
      } else {
        if (segmentTypeCase_ == 4) {
          return cubicToBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.CubicToSegment.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.CubicToSegment cubic_to = 4;</code>
     */
    public Builder setCubicTo(net.rptools.maptool.server.proto.drawing.CubicToSegment value) {
      if (cubicToBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        segmentType_ = value;
        onChanged();
      } else {
        cubicToBuilder_.setMessage(value);
      }
      segmentTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.maptool.CubicToSegment cubic_to = 4;</code>
     */
    public Builder setCubicTo(
        net.rptools.maptool.server.proto.drawing.CubicToSegment.Builder builderForValue) {
      if (cubicToBuilder_ == null) {
        segmentType_ = builderForValue.build();
        onChanged();
      } else {
        cubicToBuilder_.setMessage(builderForValue.build());
      }
      segmentTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.maptool.CubicToSegment cubic_to = 4;</code>
     */
    public Builder mergeCubicTo(net.rptools.maptool.server.proto.drawing.CubicToSegment value) {
      if (cubicToBuilder_ == null) {
        if (segmentTypeCase_ == 4 &&
            segmentType_ != net.rptools.maptool.server.proto.drawing.CubicToSegment.getDefaultInstance()) {
          segmentType_ = net.rptools.maptool.server.proto.drawing.CubicToSegment.newBuilder((net.rptools.maptool.server.proto.drawing.CubicToSegment) segmentType_)
              .mergeFrom(value).buildPartial();
        } else {
          segmentType_ = value;
        }
        onChanged();
      } else {
        if (segmentTypeCase_ == 4) {
          cubicToBuilder_.mergeFrom(value);
        } else {
          cubicToBuilder_.setMessage(value);
        }
      }
      segmentTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.maptool.CubicToSegment cubic_to = 4;</code>
     */
    public Builder clearCubicTo() {
      if (cubicToBuilder_ == null) {
        if (segmentTypeCase_ == 4) {
          segmentTypeCase_ = 0;
          segmentType_ = null;
          onChanged();
        }
      } else {
        if (segmentTypeCase_ == 4) {
          segmentTypeCase_ = 0;
          segmentType_ = null;
        }
        cubicToBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.CubicToSegment cubic_to = 4;</code>
     */
    public net.rptools.maptool.server.proto.drawing.CubicToSegment.Builder getCubicToBuilder() {
      return getCubicToFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.CubicToSegment cubic_to = 4;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.CubicToSegmentOrBuilder getCubicToOrBuilder() {
      if ((segmentTypeCase_ == 4) && (cubicToBuilder_ != null)) {
        return cubicToBuilder_.getMessageOrBuilder();
      } else {
        if (segmentTypeCase_ == 4) {
          return (net.rptools.maptool.server.proto.drawing.CubicToSegment) segmentType_;
        }
        return net.rptools.maptool.server.proto.drawing.CubicToSegment.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.CubicToSegment cubic_to = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.CubicToSegment, net.rptools.maptool.server.proto.drawing.CubicToSegment.Builder, net.rptools.maptool.server.proto.drawing.CubicToSegmentOrBuilder> 
        getCubicToFieldBuilder() {
      if (cubicToBuilder_ == null) {
        if (!(segmentTypeCase_ == 4)) {
          segmentType_ = net.rptools.maptool.server.proto.drawing.CubicToSegment.getDefaultInstance();
        }
        cubicToBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.CubicToSegment, net.rptools.maptool.server.proto.drawing.CubicToSegment.Builder, net.rptools.maptool.server.proto.drawing.CubicToSegmentOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.CubicToSegment) segmentType_,
                getParentForChildren(),
                isClean());
        segmentType_ = null;
      }
      segmentTypeCase_ = 4;
      onChanged();;
      return cubicToBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.CloseSegment, net.rptools.maptool.server.proto.drawing.CloseSegment.Builder, net.rptools.maptool.server.proto.drawing.CloseSegmentOrBuilder> closeBuilder_;
    /**
     * <code>.maptool.CloseSegment close = 5;</code>
     * @return Whether the close field is set.
     */
    @java.lang.Override
    public boolean hasClose() {
      return segmentTypeCase_ == 5;
    }
    /**
     * <code>.maptool.CloseSegment close = 5;</code>
     * @return The close.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.CloseSegment getClose() {
      if (closeBuilder_ == null) {
        if (segmentTypeCase_ == 5) {
          return (net.rptools.maptool.server.proto.drawing.CloseSegment) segmentType_;
        }
        return net.rptools.maptool.server.proto.drawing.CloseSegment.getDefaultInstance();
      } else {
        if (segmentTypeCase_ == 5) {
          return closeBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.CloseSegment.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.CloseSegment close = 5;</code>
     */
    public Builder setClose(net.rptools.maptool.server.proto.drawing.CloseSegment value) {
      if (closeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        segmentType_ = value;
        onChanged();
      } else {
        closeBuilder_.setMessage(value);
      }
      segmentTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.maptool.CloseSegment close = 5;</code>
     */
    public Builder setClose(
        net.rptools.maptool.server.proto.drawing.CloseSegment.Builder builderForValue) {
      if (closeBuilder_ == null) {
        segmentType_ = builderForValue.build();
        onChanged();
      } else {
        closeBuilder_.setMessage(builderForValue.build());
      }
      segmentTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.maptool.CloseSegment close = 5;</code>
     */
    public Builder mergeClose(net.rptools.maptool.server.proto.drawing.CloseSegment value) {
      if (closeBuilder_ == null) {
        if (segmentTypeCase_ == 5 &&
            segmentType_ != net.rptools.maptool.server.proto.drawing.CloseSegment.getDefaultInstance()) {
          segmentType_ = net.rptools.maptool.server.proto.drawing.CloseSegment.newBuilder((net.rptools.maptool.server.proto.drawing.CloseSegment) segmentType_)
              .mergeFrom(value).buildPartial();
        } else {
          segmentType_ = value;
        }
        onChanged();
      } else {
        if (segmentTypeCase_ == 5) {
          closeBuilder_.mergeFrom(value);
        } else {
          closeBuilder_.setMessage(value);
        }
      }
      segmentTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.maptool.CloseSegment close = 5;</code>
     */
    public Builder clearClose() {
      if (closeBuilder_ == null) {
        if (segmentTypeCase_ == 5) {
          segmentTypeCase_ = 0;
          segmentType_ = null;
          onChanged();
        }
      } else {
        if (segmentTypeCase_ == 5) {
          segmentTypeCase_ = 0;
          segmentType_ = null;
        }
        closeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.CloseSegment close = 5;</code>
     */
    public net.rptools.maptool.server.proto.drawing.CloseSegment.Builder getCloseBuilder() {
      return getCloseFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.CloseSegment close = 5;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.CloseSegmentOrBuilder getCloseOrBuilder() {
      if ((segmentTypeCase_ == 5) && (closeBuilder_ != null)) {
        return closeBuilder_.getMessageOrBuilder();
      } else {
        if (segmentTypeCase_ == 5) {
          return (net.rptools.maptool.server.proto.drawing.CloseSegment) segmentType_;
        }
        return net.rptools.maptool.server.proto.drawing.CloseSegment.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.CloseSegment close = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.CloseSegment, net.rptools.maptool.server.proto.drawing.CloseSegment.Builder, net.rptools.maptool.server.proto.drawing.CloseSegmentOrBuilder> 
        getCloseFieldBuilder() {
      if (closeBuilder_ == null) {
        if (!(segmentTypeCase_ == 5)) {
          segmentType_ = net.rptools.maptool.server.proto.drawing.CloseSegment.getDefaultInstance();
        }
        closeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.CloseSegment, net.rptools.maptool.server.proto.drawing.CloseSegment.Builder, net.rptools.maptool.server.proto.drawing.CloseSegmentOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.CloseSegment) segmentType_,
                getParentForChildren(),
                isClean());
        segmentType_ = null;
      }
      segmentTypeCase_ = 5;
      onChanged();;
      return closeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maptool.SegmentDto)
  }

  // @@protoc_insertion_point(class_scope:maptool.SegmentDto)
  private static final net.rptools.maptool.server.proto.drawing.SegmentDto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new net.rptools.maptool.server.proto.drawing.SegmentDto();
  }

  public static net.rptools.maptool.server.proto.drawing.SegmentDto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SegmentDto>
      PARSER = new com.google.protobuf.AbstractParser<SegmentDto>() {
    @java.lang.Override
    public SegmentDto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SegmentDto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SegmentDto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SegmentDto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.SegmentDto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

