// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_transfer_objects.proto

package net.rptools.maptool.server.proto;

/**
 * Protobuf type {@code maptool.BarTokenOverlayDto}
 */
public final class BarTokenOverlayDto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maptool.BarTokenOverlayDto)
    BarTokenOverlayDtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use BarTokenOverlayDto.newBuilder() to construct.
  private BarTokenOverlayDto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private BarTokenOverlayDto() {
    side_ = 0;
    assetIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    type_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new BarTokenOverlayDto();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private BarTokenOverlayDto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            net.rptools.maptool.server.proto.TokenOverlayDto.Builder subBuilder = null;
            if (common_ != null) {
              subBuilder = common_.toBuilder();
            }
            common_ = input.readMessage(net.rptools.maptool.server.proto.TokenOverlayDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(common_);
              common_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {

            increments_ = input.readInt32();
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            side_ = rawValue;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              assetIds_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            assetIds_.add(s);
            break;
          }
          case 40: {

            color_ = input.readInt32();
            break;
          }
          case 48: {

            bgColor_ = input.readInt32();
            break;
          }
          case 56: {

            thickness_ = input.readInt32();
            break;
          }
          case 64: {
            int rawValue = input.readEnum();

            type_ = rawValue;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        assetIds_ = assetIds_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_BarTokenOverlayDto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_BarTokenOverlayDto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            net.rptools.maptool.server.proto.BarTokenOverlayDto.class, net.rptools.maptool.server.proto.BarTokenOverlayDto.Builder.class);
  }

  /**
   * Protobuf enum {@code maptool.BarTokenOverlayDto.SideDto}
   */
  public enum SideDto
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TOP = 0;</code>
     */
    TOP(0),
    /**
     * <code>BOTTOM = 1;</code>
     */
    BOTTOM(1),
    /**
     * <code>LEFT = 2;</code>
     */
    LEFT(2),
    /**
     * <code>RIGHT = 3;</code>
     */
    RIGHT(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TOP = 0;</code>
     */
    public static final int TOP_VALUE = 0;
    /**
     * <code>BOTTOM = 1;</code>
     */
    public static final int BOTTOM_VALUE = 1;
    /**
     * <code>LEFT = 2;</code>
     */
    public static final int LEFT_VALUE = 2;
    /**
     * <code>RIGHT = 3;</code>
     */
    public static final int RIGHT_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SideDto valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SideDto forNumber(int value) {
      switch (value) {
        case 0: return TOP;
        case 1: return BOTTOM;
        case 2: return LEFT;
        case 3: return RIGHT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SideDto>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SideDto> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SideDto>() {
            public SideDto findValueByNumber(int number) {
              return SideDto.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.BarTokenOverlayDto.getDescriptor().getEnumTypes().get(0);
    }

    private static final SideDto[] VALUES = values();

    public static SideDto valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SideDto(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maptool.BarTokenOverlayDto.SideDto)
  }

  /**
   * Protobuf enum {@code maptool.BarTokenOverlayDto.BarTokenOverlayTypeDto}
   */
  public enum BarTokenOverlayTypeDto
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MULTIPLE_IMAGE = 0;</code>
     */
    MULTIPLE_IMAGE(0),
    /**
     * <code>SINGLE_IMAGE = 1;</code>
     */
    SINGLE_IMAGE(1),
    /**
     * <code>DRAWN = 2;</code>
     */
    DRAWN(2),
    /**
     * <code>TWO_TONE = 3;</code>
     */
    TWO_TONE(3),
    /**
     * <code>TWO_IMAGES = 4;</code>
     */
    TWO_IMAGES(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>MULTIPLE_IMAGE = 0;</code>
     */
    public static final int MULTIPLE_IMAGE_VALUE = 0;
    /**
     * <code>SINGLE_IMAGE = 1;</code>
     */
    public static final int SINGLE_IMAGE_VALUE = 1;
    /**
     * <code>DRAWN = 2;</code>
     */
    public static final int DRAWN_VALUE = 2;
    /**
     * <code>TWO_TONE = 3;</code>
     */
    public static final int TWO_TONE_VALUE = 3;
    /**
     * <code>TWO_IMAGES = 4;</code>
     */
    public static final int TWO_IMAGES_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BarTokenOverlayTypeDto valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BarTokenOverlayTypeDto forNumber(int value) {
      switch (value) {
        case 0: return MULTIPLE_IMAGE;
        case 1: return SINGLE_IMAGE;
        case 2: return DRAWN;
        case 3: return TWO_TONE;
        case 4: return TWO_IMAGES;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BarTokenOverlayTypeDto>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BarTokenOverlayTypeDto> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BarTokenOverlayTypeDto>() {
            public BarTokenOverlayTypeDto findValueByNumber(int number) {
              return BarTokenOverlayTypeDto.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.BarTokenOverlayDto.getDescriptor().getEnumTypes().get(1);
    }

    private static final BarTokenOverlayTypeDto[] VALUES = values();

    public static BarTokenOverlayTypeDto valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BarTokenOverlayTypeDto(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maptool.BarTokenOverlayDto.BarTokenOverlayTypeDto)
  }

  public static final int COMMON_FIELD_NUMBER = 1;
  private net.rptools.maptool.server.proto.TokenOverlayDto common_;
  /**
   * <code>.maptool.TokenOverlayDto common = 1;</code>
   * @return Whether the common field is set.
   */
  @java.lang.Override
  public boolean hasCommon() {
    return common_ != null;
  }
  /**
   * <code>.maptool.TokenOverlayDto common = 1;</code>
   * @return The common.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.TokenOverlayDto getCommon() {
    return common_ == null ? net.rptools.maptool.server.proto.TokenOverlayDto.getDefaultInstance() : common_;
  }
  /**
   * <code>.maptool.TokenOverlayDto common = 1;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.TokenOverlayDtoOrBuilder getCommonOrBuilder() {
    return getCommon();
  }

  public static final int INCREMENTS_FIELD_NUMBER = 2;
  private int increments_;
  /**
   * <code>int32 increments = 2;</code>
   * @return The increments.
   */
  @java.lang.Override
  public int getIncrements() {
    return increments_;
  }

  public static final int SIDE_FIELD_NUMBER = 3;
  private int side_;
  /**
   * <code>.maptool.BarTokenOverlayDto.SideDto side = 3;</code>
   * @return The enum numeric value on the wire for side.
   */
  @java.lang.Override public int getSideValue() {
    return side_;
  }
  /**
   * <code>.maptool.BarTokenOverlayDto.SideDto side = 3;</code>
   * @return The side.
   */
  @java.lang.Override public net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto getSide() {
    @SuppressWarnings("deprecation")
    net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto result = net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto.valueOf(side_);
    return result == null ? net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto.UNRECOGNIZED : result;
  }

  public static final int ASSET_IDS_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList assetIds_;
  /**
   * <code>repeated string asset_ids = 4;</code>
   * @return A list containing the assetIds.
   */
  public com.google.protobuf.ProtocolStringList
      getAssetIdsList() {
    return assetIds_;
  }
  /**
   * <code>repeated string asset_ids = 4;</code>
   * @return The count of assetIds.
   */
  public int getAssetIdsCount() {
    return assetIds_.size();
  }
  /**
   * <code>repeated string asset_ids = 4;</code>
   * @param index The index of the element to return.
   * @return The assetIds at the given index.
   */
  public java.lang.String getAssetIds(int index) {
    return assetIds_.get(index);
  }
  /**
   * <code>repeated string asset_ids = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the assetIds at the given index.
   */
  public com.google.protobuf.ByteString
      getAssetIdsBytes(int index) {
    return assetIds_.getByteString(index);
  }

  public static final int COLOR_FIELD_NUMBER = 5;
  private int color_;
  /**
   * <code>int32 color = 5;</code>
   * @return The color.
   */
  @java.lang.Override
  public int getColor() {
    return color_;
  }

  public static final int BG_COLOR_FIELD_NUMBER = 6;
  private int bgColor_;
  /**
   * <code>int32 bg_color = 6;</code>
   * @return The bgColor.
   */
  @java.lang.Override
  public int getBgColor() {
    return bgColor_;
  }

  public static final int THICKNESS_FIELD_NUMBER = 7;
  private int thickness_;
  /**
   * <code>int32 thickness = 7;</code>
   * @return The thickness.
   */
  @java.lang.Override
  public int getThickness() {
    return thickness_;
  }

  public static final int TYPE_FIELD_NUMBER = 8;
  private int type_;
  /**
   * <code>.maptool.BarTokenOverlayDto.BarTokenOverlayTypeDto type = 8;</code>
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override public int getTypeValue() {
    return type_;
  }
  /**
   * <code>.maptool.BarTokenOverlayDto.BarTokenOverlayTypeDto type = 8;</code>
   * @return The type.
   */
  @java.lang.Override public net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto getType() {
    @SuppressWarnings("deprecation")
    net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto result = net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto.valueOf(type_);
    return result == null ? net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (common_ != null) {
      output.writeMessage(1, getCommon());
    }
    if (increments_ != 0) {
      output.writeInt32(2, increments_);
    }
    if (side_ != net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto.TOP.getNumber()) {
      output.writeEnum(3, side_);
    }
    for (int i = 0; i < assetIds_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, assetIds_.getRaw(i));
    }
    if (color_ != 0) {
      output.writeInt32(5, color_);
    }
    if (bgColor_ != 0) {
      output.writeInt32(6, bgColor_);
    }
    if (thickness_ != 0) {
      output.writeInt32(7, thickness_);
    }
    if (type_ != net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto.MULTIPLE_IMAGE.getNumber()) {
      output.writeEnum(8, type_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (common_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCommon());
    }
    if (increments_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, increments_);
    }
    if (side_ != net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto.TOP.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, side_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < assetIds_.size(); i++) {
        dataSize += computeStringSizeNoTag(assetIds_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getAssetIdsList().size();
    }
    if (color_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, color_);
    }
    if (bgColor_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, bgColor_);
    }
    if (thickness_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, thickness_);
    }
    if (type_ != net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto.MULTIPLE_IMAGE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(8, type_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof net.rptools.maptool.server.proto.BarTokenOverlayDto)) {
      return super.equals(obj);
    }
    net.rptools.maptool.server.proto.BarTokenOverlayDto other = (net.rptools.maptool.server.proto.BarTokenOverlayDto) obj;

    if (hasCommon() != other.hasCommon()) return false;
    if (hasCommon()) {
      if (!getCommon()
          .equals(other.getCommon())) return false;
    }
    if (getIncrements()
        != other.getIncrements()) return false;
    if (side_ != other.side_) return false;
    if (!getAssetIdsList()
        .equals(other.getAssetIdsList())) return false;
    if (getColor()
        != other.getColor()) return false;
    if (getBgColor()
        != other.getBgColor()) return false;
    if (getThickness()
        != other.getThickness()) return false;
    if (type_ != other.type_) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCommon()) {
      hash = (37 * hash) + COMMON_FIELD_NUMBER;
      hash = (53 * hash) + getCommon().hashCode();
    }
    hash = (37 * hash) + INCREMENTS_FIELD_NUMBER;
    hash = (53 * hash) + getIncrements();
    hash = (37 * hash) + SIDE_FIELD_NUMBER;
    hash = (53 * hash) + side_;
    if (getAssetIdsCount() > 0) {
      hash = (37 * hash) + ASSET_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getAssetIdsList().hashCode();
    }
    hash = (37 * hash) + COLOR_FIELD_NUMBER;
    hash = (53 * hash) + getColor();
    hash = (37 * hash) + BG_COLOR_FIELD_NUMBER;
    hash = (53 * hash) + getBgColor();
    hash = (37 * hash) + THICKNESS_FIELD_NUMBER;
    hash = (53 * hash) + getThickness();
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.BarTokenOverlayDto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(net.rptools.maptool.server.proto.BarTokenOverlayDto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code maptool.BarTokenOverlayDto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maptool.BarTokenOverlayDto)
      net.rptools.maptool.server.proto.BarTokenOverlayDtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_BarTokenOverlayDto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_BarTokenOverlayDto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              net.rptools.maptool.server.proto.BarTokenOverlayDto.class, net.rptools.maptool.server.proto.BarTokenOverlayDto.Builder.class);
    }

    // Construct using net.rptools.maptool.server.proto.BarTokenOverlayDto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (commonBuilder_ == null) {
        common_ = null;
      } else {
        common_ = null;
        commonBuilder_ = null;
      }
      increments_ = 0;

      side_ = 0;

      assetIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      color_ = 0;

      bgColor_ = 0;

      thickness_ = 0;

      type_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_BarTokenOverlayDto_descriptor;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.BarTokenOverlayDto getDefaultInstanceForType() {
      return net.rptools.maptool.server.proto.BarTokenOverlayDto.getDefaultInstance();
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.BarTokenOverlayDto build() {
      net.rptools.maptool.server.proto.BarTokenOverlayDto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.BarTokenOverlayDto buildPartial() {
      net.rptools.maptool.server.proto.BarTokenOverlayDto result = new net.rptools.maptool.server.proto.BarTokenOverlayDto(this);
      int from_bitField0_ = bitField0_;
      if (commonBuilder_ == null) {
        result.common_ = common_;
      } else {
        result.common_ = commonBuilder_.build();
      }
      result.increments_ = increments_;
      result.side_ = side_;
      if (((bitField0_ & 0x00000001) != 0)) {
        assetIds_ = assetIds_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.assetIds_ = assetIds_;
      result.color_ = color_;
      result.bgColor_ = bgColor_;
      result.thickness_ = thickness_;
      result.type_ = type_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof net.rptools.maptool.server.proto.BarTokenOverlayDto) {
        return mergeFrom((net.rptools.maptool.server.proto.BarTokenOverlayDto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(net.rptools.maptool.server.proto.BarTokenOverlayDto other) {
      if (other == net.rptools.maptool.server.proto.BarTokenOverlayDto.getDefaultInstance()) return this;
      if (other.hasCommon()) {
        mergeCommon(other.getCommon());
      }
      if (other.getIncrements() != 0) {
        setIncrements(other.getIncrements());
      }
      if (other.side_ != 0) {
        setSideValue(other.getSideValue());
      }
      if (!other.assetIds_.isEmpty()) {
        if (assetIds_.isEmpty()) {
          assetIds_ = other.assetIds_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureAssetIdsIsMutable();
          assetIds_.addAll(other.assetIds_);
        }
        onChanged();
      }
      if (other.getColor() != 0) {
        setColor(other.getColor());
      }
      if (other.getBgColor() != 0) {
        setBgColor(other.getBgColor());
      }
      if (other.getThickness() != 0) {
        setThickness(other.getThickness());
      }
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      net.rptools.maptool.server.proto.BarTokenOverlayDto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (net.rptools.maptool.server.proto.BarTokenOverlayDto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private net.rptools.maptool.server.proto.TokenOverlayDto common_;
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.TokenOverlayDto, net.rptools.maptool.server.proto.TokenOverlayDto.Builder, net.rptools.maptool.server.proto.TokenOverlayDtoOrBuilder> commonBuilder_;
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     * @return Whether the common field is set.
     */
    public boolean hasCommon() {
      return commonBuilder_ != null || common_ != null;
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     * @return The common.
     */
    public net.rptools.maptool.server.proto.TokenOverlayDto getCommon() {
      if (commonBuilder_ == null) {
        return common_ == null ? net.rptools.maptool.server.proto.TokenOverlayDto.getDefaultInstance() : common_;
      } else {
        return commonBuilder_.getMessage();
      }
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public Builder setCommon(net.rptools.maptool.server.proto.TokenOverlayDto value) {
      if (commonBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        common_ = value;
        onChanged();
      } else {
        commonBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public Builder setCommon(
        net.rptools.maptool.server.proto.TokenOverlayDto.Builder builderForValue) {
      if (commonBuilder_ == null) {
        common_ = builderForValue.build();
        onChanged();
      } else {
        commonBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public Builder mergeCommon(net.rptools.maptool.server.proto.TokenOverlayDto value) {
      if (commonBuilder_ == null) {
        if (common_ != null) {
          common_ =
            net.rptools.maptool.server.proto.TokenOverlayDto.newBuilder(common_).mergeFrom(value).buildPartial();
        } else {
          common_ = value;
        }
        onChanged();
      } else {
        commonBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public Builder clearCommon() {
      if (commonBuilder_ == null) {
        common_ = null;
        onChanged();
      } else {
        common_ = null;
        commonBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public net.rptools.maptool.server.proto.TokenOverlayDto.Builder getCommonBuilder() {
      
      onChanged();
      return getCommonFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    public net.rptools.maptool.server.proto.TokenOverlayDtoOrBuilder getCommonOrBuilder() {
      if (commonBuilder_ != null) {
        return commonBuilder_.getMessageOrBuilder();
      } else {
        return common_ == null ?
            net.rptools.maptool.server.proto.TokenOverlayDto.getDefaultInstance() : common_;
      }
    }
    /**
     * <code>.maptool.TokenOverlayDto common = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.TokenOverlayDto, net.rptools.maptool.server.proto.TokenOverlayDto.Builder, net.rptools.maptool.server.proto.TokenOverlayDtoOrBuilder> 
        getCommonFieldBuilder() {
      if (commonBuilder_ == null) {
        commonBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.TokenOverlayDto, net.rptools.maptool.server.proto.TokenOverlayDto.Builder, net.rptools.maptool.server.proto.TokenOverlayDtoOrBuilder>(
                getCommon(),
                getParentForChildren(),
                isClean());
        common_ = null;
      }
      return commonBuilder_;
    }

    private int increments_ ;
    /**
     * <code>int32 increments = 2;</code>
     * @return The increments.
     */
    @java.lang.Override
    public int getIncrements() {
      return increments_;
    }
    /**
     * <code>int32 increments = 2;</code>
     * @param value The increments to set.
     * @return This builder for chaining.
     */
    public Builder setIncrements(int value) {
      
      increments_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 increments = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearIncrements() {
      
      increments_ = 0;
      onChanged();
      return this;
    }

    private int side_ = 0;
    /**
     * <code>.maptool.BarTokenOverlayDto.SideDto side = 3;</code>
     * @return The enum numeric value on the wire for side.
     */
    @java.lang.Override public int getSideValue() {
      return side_;
    }
    /**
     * <code>.maptool.BarTokenOverlayDto.SideDto side = 3;</code>
     * @param value The enum numeric value on the wire for side to set.
     * @return This builder for chaining.
     */
    public Builder setSideValue(int value) {
      
      side_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.BarTokenOverlayDto.SideDto side = 3;</code>
     * @return The side.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto getSide() {
      @SuppressWarnings("deprecation")
      net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto result = net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto.valueOf(side_);
      return result == null ? net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto.UNRECOGNIZED : result;
    }
    /**
     * <code>.maptool.BarTokenOverlayDto.SideDto side = 3;</code>
     * @param value The side to set.
     * @return This builder for chaining.
     */
    public Builder setSide(net.rptools.maptool.server.proto.BarTokenOverlayDto.SideDto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      side_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.BarTokenOverlayDto.SideDto side = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSide() {
      
      side_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList assetIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureAssetIdsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        assetIds_ = new com.google.protobuf.LazyStringArrayList(assetIds_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <code>repeated string asset_ids = 4;</code>
     * @return A list containing the assetIds.
     */
    public com.google.protobuf.ProtocolStringList
        getAssetIdsList() {
      return assetIds_.getUnmodifiableView();
    }
    /**
     * <code>repeated string asset_ids = 4;</code>
     * @return The count of assetIds.
     */
    public int getAssetIdsCount() {
      return assetIds_.size();
    }
    /**
     * <code>repeated string asset_ids = 4;</code>
     * @param index The index of the element to return.
     * @return The assetIds at the given index.
     */
    public java.lang.String getAssetIds(int index) {
      return assetIds_.get(index);
    }
    /**
     * <code>repeated string asset_ids = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the assetIds at the given index.
     */
    public com.google.protobuf.ByteString
        getAssetIdsBytes(int index) {
      return assetIds_.getByteString(index);
    }
    /**
     * <code>repeated string asset_ids = 4;</code>
     * @param index The index to set the value at.
     * @param value The assetIds to set.
     * @return This builder for chaining.
     */
    public Builder setAssetIds(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureAssetIdsIsMutable();
      assetIds_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string asset_ids = 4;</code>
     * @param value The assetIds to add.
     * @return This builder for chaining.
     */
    public Builder addAssetIds(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureAssetIdsIsMutable();
      assetIds_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string asset_ids = 4;</code>
     * @param values The assetIds to add.
     * @return This builder for chaining.
     */
    public Builder addAllAssetIds(
        java.lang.Iterable<java.lang.String> values) {
      ensureAssetIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, assetIds_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string asset_ids = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearAssetIds() {
      assetIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string asset_ids = 4;</code>
     * @param value The bytes of the assetIds to add.
     * @return This builder for chaining.
     */
    public Builder addAssetIdsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureAssetIdsIsMutable();
      assetIds_.add(value);
      onChanged();
      return this;
    }

    private int color_ ;
    /**
     * <code>int32 color = 5;</code>
     * @return The color.
     */
    @java.lang.Override
    public int getColor() {
      return color_;
    }
    /**
     * <code>int32 color = 5;</code>
     * @param value The color to set.
     * @return This builder for chaining.
     */
    public Builder setColor(int value) {
      
      color_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 color = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearColor() {
      
      color_ = 0;
      onChanged();
      return this;
    }

    private int bgColor_ ;
    /**
     * <code>int32 bg_color = 6;</code>
     * @return The bgColor.
     */
    @java.lang.Override
    public int getBgColor() {
      return bgColor_;
    }
    /**
     * <code>int32 bg_color = 6;</code>
     * @param value The bgColor to set.
     * @return This builder for chaining.
     */
    public Builder setBgColor(int value) {
      
      bgColor_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 bg_color = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearBgColor() {
      
      bgColor_ = 0;
      onChanged();
      return this;
    }

    private int thickness_ ;
    /**
     * <code>int32 thickness = 7;</code>
     * @return The thickness.
     */
    @java.lang.Override
    public int getThickness() {
      return thickness_;
    }
    /**
     * <code>int32 thickness = 7;</code>
     * @param value The thickness to set.
     * @return This builder for chaining.
     */
    public Builder setThickness(int value) {
      
      thickness_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 thickness = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearThickness() {
      
      thickness_ = 0;
      onChanged();
      return this;
    }

    private int type_ = 0;
    /**
     * <code>.maptool.BarTokenOverlayDto.BarTokenOverlayTypeDto type = 8;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.maptool.BarTokenOverlayDto.BarTokenOverlayTypeDto type = 8;</code>
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      
      type_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.BarTokenOverlayDto.BarTokenOverlayTypeDto type = 8;</code>
     * @return The type.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto getType() {
      @SuppressWarnings("deprecation")
      net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto result = net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto.valueOf(type_);
      return result == null ? net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto.UNRECOGNIZED : result;
    }
    /**
     * <code>.maptool.BarTokenOverlayDto.BarTokenOverlayTypeDto type = 8;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(net.rptools.maptool.server.proto.BarTokenOverlayDto.BarTokenOverlayTypeDto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.BarTokenOverlayDto.BarTokenOverlayTypeDto type = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      
      type_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maptool.BarTokenOverlayDto)
  }

  // @@protoc_insertion_point(class_scope:maptool.BarTokenOverlayDto)
  private static final net.rptools.maptool.server.proto.BarTokenOverlayDto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new net.rptools.maptool.server.proto.BarTokenOverlayDto();
  }

  public static net.rptools.maptool.server.proto.BarTokenOverlayDto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BarTokenOverlayDto>
      PARSER = new com.google.protobuf.AbstractParser<BarTokenOverlayDto>() {
    @java.lang.Override
    public BarTokenOverlayDto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new BarTokenOverlayDto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<BarTokenOverlayDto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BarTokenOverlayDto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public net.rptools.maptool.server.proto.BarTokenOverlayDto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

