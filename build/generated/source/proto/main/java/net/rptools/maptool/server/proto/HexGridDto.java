// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_transfer_objects.proto

package net.rptools.maptool.server.proto;

/**
 * Protobuf type {@code maptool.HexGridDto}
 */
public final class HexGridDto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maptool.HexGridDto)
    HexGridDtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use HexGridDto.newBuilder() to construct.
  private HexGridDto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private HexGridDto() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new HexGridDto();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private HexGridDto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            vertical_ = input.readBool();
            break;
          }
          case 17: {

            hexRatio_ = input.readDouble();
            break;
          }
          case 25: {

            edgeProjection_ = input.readDouble();
            break;
          }
          case 33: {

            minorRadius_ = input.readDouble();
            break;
          }
          case 41: {

            edgeLength_ = input.readDouble();
            break;
          }
          case 49: {

            scaledEdgeProjection_ = input.readDouble();
            break;
          }
          case 57: {

            scaledMinorRadius_ = input.readDouble();
            break;
          }
          case 65: {

            scaledEdgeLength_ = input.readDouble();
            break;
          }
          case 73: {

            lastScale_ = input.readDouble();
            break;
          }
          case 82: {
            net.rptools.maptool.server.proto.drawing.IntPointDto.Builder subBuilder = null;
            if (cellOffset_ != null) {
              subBuilder = cellOffset_.toBuilder();
            }
            cellOffset_ = input.readMessage(net.rptools.maptool.server.proto.drawing.IntPointDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(cellOffset_);
              cellOffset_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_HexGridDto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_HexGridDto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            net.rptools.maptool.server.proto.HexGridDto.class, net.rptools.maptool.server.proto.HexGridDto.Builder.class);
  }

  public static final int VERTICAL_FIELD_NUMBER = 1;
  private boolean vertical_;
  /**
   * <code>bool vertical = 1;</code>
   * @return The vertical.
   */
  @java.lang.Override
  public boolean getVertical() {
    return vertical_;
  }

  public static final int HEX_RATIO_FIELD_NUMBER = 2;
  private double hexRatio_;
  /**
   * <code>double hex_ratio = 2;</code>
   * @return The hexRatio.
   */
  @java.lang.Override
  public double getHexRatio() {
    return hexRatio_;
  }

  public static final int EDGE_PROJECTION_FIELD_NUMBER = 3;
  private double edgeProjection_;
  /**
   * <code>double edge_projection = 3;</code>
   * @return The edgeProjection.
   */
  @java.lang.Override
  public double getEdgeProjection() {
    return edgeProjection_;
  }

  public static final int MINOR_RADIUS_FIELD_NUMBER = 4;
  private double minorRadius_;
  /**
   * <code>double minor_radius = 4;</code>
   * @return The minorRadius.
   */
  @java.lang.Override
  public double getMinorRadius() {
    return minorRadius_;
  }

  public static final int EDGE_LENGTH_FIELD_NUMBER = 5;
  private double edgeLength_;
  /**
   * <code>double edge_length = 5;</code>
   * @return The edgeLength.
   */
  @java.lang.Override
  public double getEdgeLength() {
    return edgeLength_;
  }

  public static final int SCALED_EDGE_PROJECTION_FIELD_NUMBER = 6;
  private double scaledEdgeProjection_;
  /**
   * <code>double scaled_edge_projection = 6;</code>
   * @return The scaledEdgeProjection.
   */
  @java.lang.Override
  public double getScaledEdgeProjection() {
    return scaledEdgeProjection_;
  }

  public static final int SCALED_MINOR_RADIUS_FIELD_NUMBER = 7;
  private double scaledMinorRadius_;
  /**
   * <code>double scaled_minor_radius = 7;</code>
   * @return The scaledMinorRadius.
   */
  @java.lang.Override
  public double getScaledMinorRadius() {
    return scaledMinorRadius_;
  }

  public static final int SCALED_EDGE_LENGTH_FIELD_NUMBER = 8;
  private double scaledEdgeLength_;
  /**
   * <code>double scaled_edge_length = 8;</code>
   * @return The scaledEdgeLength.
   */
  @java.lang.Override
  public double getScaledEdgeLength() {
    return scaledEdgeLength_;
  }

  public static final int LAST_SCALE_FIELD_NUMBER = 9;
  private double lastScale_;
  /**
   * <code>double last_scale = 9;</code>
   * @return The lastScale.
   */
  @java.lang.Override
  public double getLastScale() {
    return lastScale_;
  }

  public static final int CELLOFFSET_FIELD_NUMBER = 10;
  private net.rptools.maptool.server.proto.drawing.IntPointDto cellOffset_;
  /**
   * <code>.maptool.IntPointDto cellOffset = 10;</code>
   * @return Whether the cellOffset field is set.
   */
  @java.lang.Override
  public boolean hasCellOffset() {
    return cellOffset_ != null;
  }
  /**
   * <code>.maptool.IntPointDto cellOffset = 10;</code>
   * @return The cellOffset.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.IntPointDto getCellOffset() {
    return cellOffset_ == null ? net.rptools.maptool.server.proto.drawing.IntPointDto.getDefaultInstance() : cellOffset_;
  }
  /**
   * <code>.maptool.IntPointDto cellOffset = 10;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.IntPointDtoOrBuilder getCellOffsetOrBuilder() {
    return getCellOffset();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (vertical_ != false) {
      output.writeBool(1, vertical_);
    }
    if (java.lang.Double.doubleToRawLongBits(hexRatio_) != 0) {
      output.writeDouble(2, hexRatio_);
    }
    if (java.lang.Double.doubleToRawLongBits(edgeProjection_) != 0) {
      output.writeDouble(3, edgeProjection_);
    }
    if (java.lang.Double.doubleToRawLongBits(minorRadius_) != 0) {
      output.writeDouble(4, minorRadius_);
    }
    if (java.lang.Double.doubleToRawLongBits(edgeLength_) != 0) {
      output.writeDouble(5, edgeLength_);
    }
    if (java.lang.Double.doubleToRawLongBits(scaledEdgeProjection_) != 0) {
      output.writeDouble(6, scaledEdgeProjection_);
    }
    if (java.lang.Double.doubleToRawLongBits(scaledMinorRadius_) != 0) {
      output.writeDouble(7, scaledMinorRadius_);
    }
    if (java.lang.Double.doubleToRawLongBits(scaledEdgeLength_) != 0) {
      output.writeDouble(8, scaledEdgeLength_);
    }
    if (java.lang.Double.doubleToRawLongBits(lastScale_) != 0) {
      output.writeDouble(9, lastScale_);
    }
    if (cellOffset_ != null) {
      output.writeMessage(10, getCellOffset());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (vertical_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, vertical_);
    }
    if (java.lang.Double.doubleToRawLongBits(hexRatio_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(2, hexRatio_);
    }
    if (java.lang.Double.doubleToRawLongBits(edgeProjection_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(3, edgeProjection_);
    }
    if (java.lang.Double.doubleToRawLongBits(minorRadius_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(4, minorRadius_);
    }
    if (java.lang.Double.doubleToRawLongBits(edgeLength_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(5, edgeLength_);
    }
    if (java.lang.Double.doubleToRawLongBits(scaledEdgeProjection_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(6, scaledEdgeProjection_);
    }
    if (java.lang.Double.doubleToRawLongBits(scaledMinorRadius_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(7, scaledMinorRadius_);
    }
    if (java.lang.Double.doubleToRawLongBits(scaledEdgeLength_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(8, scaledEdgeLength_);
    }
    if (java.lang.Double.doubleToRawLongBits(lastScale_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(9, lastScale_);
    }
    if (cellOffset_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getCellOffset());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof net.rptools.maptool.server.proto.HexGridDto)) {
      return super.equals(obj);
    }
    net.rptools.maptool.server.proto.HexGridDto other = (net.rptools.maptool.server.proto.HexGridDto) obj;

    if (getVertical()
        != other.getVertical()) return false;
    if (java.lang.Double.doubleToLongBits(getHexRatio())
        != java.lang.Double.doubleToLongBits(
            other.getHexRatio())) return false;
    if (java.lang.Double.doubleToLongBits(getEdgeProjection())
        != java.lang.Double.doubleToLongBits(
            other.getEdgeProjection())) return false;
    if (java.lang.Double.doubleToLongBits(getMinorRadius())
        != java.lang.Double.doubleToLongBits(
            other.getMinorRadius())) return false;
    if (java.lang.Double.doubleToLongBits(getEdgeLength())
        != java.lang.Double.doubleToLongBits(
            other.getEdgeLength())) return false;
    if (java.lang.Double.doubleToLongBits(getScaledEdgeProjection())
        != java.lang.Double.doubleToLongBits(
            other.getScaledEdgeProjection())) return false;
    if (java.lang.Double.doubleToLongBits(getScaledMinorRadius())
        != java.lang.Double.doubleToLongBits(
            other.getScaledMinorRadius())) return false;
    if (java.lang.Double.doubleToLongBits(getScaledEdgeLength())
        != java.lang.Double.doubleToLongBits(
            other.getScaledEdgeLength())) return false;
    if (java.lang.Double.doubleToLongBits(getLastScale())
        != java.lang.Double.doubleToLongBits(
            other.getLastScale())) return false;
    if (hasCellOffset() != other.hasCellOffset()) return false;
    if (hasCellOffset()) {
      if (!getCellOffset()
          .equals(other.getCellOffset())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + VERTICAL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getVertical());
    hash = (37 * hash) + HEX_RATIO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getHexRatio()));
    hash = (37 * hash) + EDGE_PROJECTION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getEdgeProjection()));
    hash = (37 * hash) + MINOR_RADIUS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getMinorRadius()));
    hash = (37 * hash) + EDGE_LENGTH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getEdgeLength()));
    hash = (37 * hash) + SCALED_EDGE_PROJECTION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getScaledEdgeProjection()));
    hash = (37 * hash) + SCALED_MINOR_RADIUS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getScaledMinorRadius()));
    hash = (37 * hash) + SCALED_EDGE_LENGTH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getScaledEdgeLength()));
    hash = (37 * hash) + LAST_SCALE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getLastScale()));
    if (hasCellOffset()) {
      hash = (37 * hash) + CELLOFFSET_FIELD_NUMBER;
      hash = (53 * hash) + getCellOffset().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static net.rptools.maptool.server.proto.HexGridDto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.HexGridDto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(net.rptools.maptool.server.proto.HexGridDto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code maptool.HexGridDto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maptool.HexGridDto)
      net.rptools.maptool.server.proto.HexGridDtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_HexGridDto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_HexGridDto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              net.rptools.maptool.server.proto.HexGridDto.class, net.rptools.maptool.server.proto.HexGridDto.Builder.class);
    }

    // Construct using net.rptools.maptool.server.proto.HexGridDto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      vertical_ = false;

      hexRatio_ = 0D;

      edgeProjection_ = 0D;

      minorRadius_ = 0D;

      edgeLength_ = 0D;

      scaledEdgeProjection_ = 0D;

      scaledMinorRadius_ = 0D;

      scaledEdgeLength_ = 0D;

      lastScale_ = 0D;

      if (cellOffsetBuilder_ == null) {
        cellOffset_ = null;
      } else {
        cellOffset_ = null;
        cellOffsetBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_HexGridDto_descriptor;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.HexGridDto getDefaultInstanceForType() {
      return net.rptools.maptool.server.proto.HexGridDto.getDefaultInstance();
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.HexGridDto build() {
      net.rptools.maptool.server.proto.HexGridDto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.HexGridDto buildPartial() {
      net.rptools.maptool.server.proto.HexGridDto result = new net.rptools.maptool.server.proto.HexGridDto(this);
      result.vertical_ = vertical_;
      result.hexRatio_ = hexRatio_;
      result.edgeProjection_ = edgeProjection_;
      result.minorRadius_ = minorRadius_;
      result.edgeLength_ = edgeLength_;
      result.scaledEdgeProjection_ = scaledEdgeProjection_;
      result.scaledMinorRadius_ = scaledMinorRadius_;
      result.scaledEdgeLength_ = scaledEdgeLength_;
      result.lastScale_ = lastScale_;
      if (cellOffsetBuilder_ == null) {
        result.cellOffset_ = cellOffset_;
      } else {
        result.cellOffset_ = cellOffsetBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof net.rptools.maptool.server.proto.HexGridDto) {
        return mergeFrom((net.rptools.maptool.server.proto.HexGridDto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(net.rptools.maptool.server.proto.HexGridDto other) {
      if (other == net.rptools.maptool.server.proto.HexGridDto.getDefaultInstance()) return this;
      if (other.getVertical() != false) {
        setVertical(other.getVertical());
      }
      if (other.getHexRatio() != 0D) {
        setHexRatio(other.getHexRatio());
      }
      if (other.getEdgeProjection() != 0D) {
        setEdgeProjection(other.getEdgeProjection());
      }
      if (other.getMinorRadius() != 0D) {
        setMinorRadius(other.getMinorRadius());
      }
      if (other.getEdgeLength() != 0D) {
        setEdgeLength(other.getEdgeLength());
      }
      if (other.getScaledEdgeProjection() != 0D) {
        setScaledEdgeProjection(other.getScaledEdgeProjection());
      }
      if (other.getScaledMinorRadius() != 0D) {
        setScaledMinorRadius(other.getScaledMinorRadius());
      }
      if (other.getScaledEdgeLength() != 0D) {
        setScaledEdgeLength(other.getScaledEdgeLength());
      }
      if (other.getLastScale() != 0D) {
        setLastScale(other.getLastScale());
      }
      if (other.hasCellOffset()) {
        mergeCellOffset(other.getCellOffset());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      net.rptools.maptool.server.proto.HexGridDto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (net.rptools.maptool.server.proto.HexGridDto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private boolean vertical_ ;
    /**
     * <code>bool vertical = 1;</code>
     * @return The vertical.
     */
    @java.lang.Override
    public boolean getVertical() {
      return vertical_;
    }
    /**
     * <code>bool vertical = 1;</code>
     * @param value The vertical to set.
     * @return This builder for chaining.
     */
    public Builder setVertical(boolean value) {
      
      vertical_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool vertical = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearVertical() {
      
      vertical_ = false;
      onChanged();
      return this;
    }

    private double hexRatio_ ;
    /**
     * <code>double hex_ratio = 2;</code>
     * @return The hexRatio.
     */
    @java.lang.Override
    public double getHexRatio() {
      return hexRatio_;
    }
    /**
     * <code>double hex_ratio = 2;</code>
     * @param value The hexRatio to set.
     * @return This builder for chaining.
     */
    public Builder setHexRatio(double value) {
      
      hexRatio_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double hex_ratio = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearHexRatio() {
      
      hexRatio_ = 0D;
      onChanged();
      return this;
    }

    private double edgeProjection_ ;
    /**
     * <code>double edge_projection = 3;</code>
     * @return The edgeProjection.
     */
    @java.lang.Override
    public double getEdgeProjection() {
      return edgeProjection_;
    }
    /**
     * <code>double edge_projection = 3;</code>
     * @param value The edgeProjection to set.
     * @return This builder for chaining.
     */
    public Builder setEdgeProjection(double value) {
      
      edgeProjection_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double edge_projection = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearEdgeProjection() {
      
      edgeProjection_ = 0D;
      onChanged();
      return this;
    }

    private double minorRadius_ ;
    /**
     * <code>double minor_radius = 4;</code>
     * @return The minorRadius.
     */
    @java.lang.Override
    public double getMinorRadius() {
      return minorRadius_;
    }
    /**
     * <code>double minor_radius = 4;</code>
     * @param value The minorRadius to set.
     * @return This builder for chaining.
     */
    public Builder setMinorRadius(double value) {
      
      minorRadius_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double minor_radius = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinorRadius() {
      
      minorRadius_ = 0D;
      onChanged();
      return this;
    }

    private double edgeLength_ ;
    /**
     * <code>double edge_length = 5;</code>
     * @return The edgeLength.
     */
    @java.lang.Override
    public double getEdgeLength() {
      return edgeLength_;
    }
    /**
     * <code>double edge_length = 5;</code>
     * @param value The edgeLength to set.
     * @return This builder for chaining.
     */
    public Builder setEdgeLength(double value) {
      
      edgeLength_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double edge_length = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearEdgeLength() {
      
      edgeLength_ = 0D;
      onChanged();
      return this;
    }

    private double scaledEdgeProjection_ ;
    /**
     * <code>double scaled_edge_projection = 6;</code>
     * @return The scaledEdgeProjection.
     */
    @java.lang.Override
    public double getScaledEdgeProjection() {
      return scaledEdgeProjection_;
    }
    /**
     * <code>double scaled_edge_projection = 6;</code>
     * @param value The scaledEdgeProjection to set.
     * @return This builder for chaining.
     */
    public Builder setScaledEdgeProjection(double value) {
      
      scaledEdgeProjection_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double scaled_edge_projection = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearScaledEdgeProjection() {
      
      scaledEdgeProjection_ = 0D;
      onChanged();
      return this;
    }

    private double scaledMinorRadius_ ;
    /**
     * <code>double scaled_minor_radius = 7;</code>
     * @return The scaledMinorRadius.
     */
    @java.lang.Override
    public double getScaledMinorRadius() {
      return scaledMinorRadius_;
    }
    /**
     * <code>double scaled_minor_radius = 7;</code>
     * @param value The scaledMinorRadius to set.
     * @return This builder for chaining.
     */
    public Builder setScaledMinorRadius(double value) {
      
      scaledMinorRadius_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double scaled_minor_radius = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearScaledMinorRadius() {
      
      scaledMinorRadius_ = 0D;
      onChanged();
      return this;
    }

    private double scaledEdgeLength_ ;
    /**
     * <code>double scaled_edge_length = 8;</code>
     * @return The scaledEdgeLength.
     */
    @java.lang.Override
    public double getScaledEdgeLength() {
      return scaledEdgeLength_;
    }
    /**
     * <code>double scaled_edge_length = 8;</code>
     * @param value The scaledEdgeLength to set.
     * @return This builder for chaining.
     */
    public Builder setScaledEdgeLength(double value) {
      
      scaledEdgeLength_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double scaled_edge_length = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearScaledEdgeLength() {
      
      scaledEdgeLength_ = 0D;
      onChanged();
      return this;
    }

    private double lastScale_ ;
    /**
     * <code>double last_scale = 9;</code>
     * @return The lastScale.
     */
    @java.lang.Override
    public double getLastScale() {
      return lastScale_;
    }
    /**
     * <code>double last_scale = 9;</code>
     * @param value The lastScale to set.
     * @return This builder for chaining.
     */
    public Builder setLastScale(double value) {
      
      lastScale_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double last_scale = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearLastScale() {
      
      lastScale_ = 0D;
      onChanged();
      return this;
    }

    private net.rptools.maptool.server.proto.drawing.IntPointDto cellOffset_;
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.IntPointDto, net.rptools.maptool.server.proto.drawing.IntPointDto.Builder, net.rptools.maptool.server.proto.drawing.IntPointDtoOrBuilder> cellOffsetBuilder_;
    /**
     * <code>.maptool.IntPointDto cellOffset = 10;</code>
     * @return Whether the cellOffset field is set.
     */
    public boolean hasCellOffset() {
      return cellOffsetBuilder_ != null || cellOffset_ != null;
    }
    /**
     * <code>.maptool.IntPointDto cellOffset = 10;</code>
     * @return The cellOffset.
     */
    public net.rptools.maptool.server.proto.drawing.IntPointDto getCellOffset() {
      if (cellOffsetBuilder_ == null) {
        return cellOffset_ == null ? net.rptools.maptool.server.proto.drawing.IntPointDto.getDefaultInstance() : cellOffset_;
      } else {
        return cellOffsetBuilder_.getMessage();
      }
    }
    /**
     * <code>.maptool.IntPointDto cellOffset = 10;</code>
     */
    public Builder setCellOffset(net.rptools.maptool.server.proto.drawing.IntPointDto value) {
      if (cellOffsetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        cellOffset_ = value;
        onChanged();
      } else {
        cellOffsetBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.maptool.IntPointDto cellOffset = 10;</code>
     */
    public Builder setCellOffset(
        net.rptools.maptool.server.proto.drawing.IntPointDto.Builder builderForValue) {
      if (cellOffsetBuilder_ == null) {
        cellOffset_ = builderForValue.build();
        onChanged();
      } else {
        cellOffsetBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.maptool.IntPointDto cellOffset = 10;</code>
     */
    public Builder mergeCellOffset(net.rptools.maptool.server.proto.drawing.IntPointDto value) {
      if (cellOffsetBuilder_ == null) {
        if (cellOffset_ != null) {
          cellOffset_ =
            net.rptools.maptool.server.proto.drawing.IntPointDto.newBuilder(cellOffset_).mergeFrom(value).buildPartial();
        } else {
          cellOffset_ = value;
        }
        onChanged();
      } else {
        cellOffsetBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.maptool.IntPointDto cellOffset = 10;</code>
     */
    public Builder clearCellOffset() {
      if (cellOffsetBuilder_ == null) {
        cellOffset_ = null;
        onChanged();
      } else {
        cellOffset_ = null;
        cellOffsetBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.maptool.IntPointDto cellOffset = 10;</code>
     */
    public net.rptools.maptool.server.proto.drawing.IntPointDto.Builder getCellOffsetBuilder() {
      
      onChanged();
      return getCellOffsetFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.IntPointDto cellOffset = 10;</code>
     */
    public net.rptools.maptool.server.proto.drawing.IntPointDtoOrBuilder getCellOffsetOrBuilder() {
      if (cellOffsetBuilder_ != null) {
        return cellOffsetBuilder_.getMessageOrBuilder();
      } else {
        return cellOffset_ == null ?
            net.rptools.maptool.server.proto.drawing.IntPointDto.getDefaultInstance() : cellOffset_;
      }
    }
    /**
     * <code>.maptool.IntPointDto cellOffset = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.IntPointDto, net.rptools.maptool.server.proto.drawing.IntPointDto.Builder, net.rptools.maptool.server.proto.drawing.IntPointDtoOrBuilder> 
        getCellOffsetFieldBuilder() {
      if (cellOffsetBuilder_ == null) {
        cellOffsetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.IntPointDto, net.rptools.maptool.server.proto.drawing.IntPointDto.Builder, net.rptools.maptool.server.proto.drawing.IntPointDtoOrBuilder>(
                getCellOffset(),
                getParentForChildren(),
                isClean());
        cellOffset_ = null;
      }
      return cellOffsetBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maptool.HexGridDto)
  }

  // @@protoc_insertion_point(class_scope:maptool.HexGridDto)
  private static final net.rptools.maptool.server.proto.HexGridDto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new net.rptools.maptool.server.proto.HexGridDto();
  }

  public static net.rptools.maptool.server.proto.HexGridDto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<HexGridDto>
      PARSER = new com.google.protobuf.AbstractParser<HexGridDto>() {
    @java.lang.Override
    public HexGridDto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new HexGridDto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<HexGridDto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<HexGridDto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public net.rptools.maptool.server.proto.HexGridDto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

