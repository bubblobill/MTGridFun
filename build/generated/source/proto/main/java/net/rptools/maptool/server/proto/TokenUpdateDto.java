// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_transfer_objects.proto

package net.rptools.maptool.server.proto;

/**
 * Protobuf enum {@code maptool.TokenUpdateDto}
 */
public enum TokenUpdateDto
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>setState = 0;</code>
   */
  setState(0),
  /**
   * <code>setAllStates = 1;</code>
   */
  setAllStates(1),
  /**
   * <code>setPropertyType = 2;</code>
   */
  setPropertyType(2),
  /**
   * <code>setPC = 3;</code>
   */
  setPC(3),
  /**
   * <code>setNPC = 4;</code>
   */
  setNPC(4),
  /**
   * <code>setLayer = 5;</code>
   */
  setLayer(5),
  /**
   * <code>setLayerShape = 6;</code>
   */
  setLayerShape(6),
  /**
   * <code>setShape = 7;</code>
   */
  setShape(7),
  /**
   * <code>setSnapToScale = 8;</code>
   */
  setSnapToScale(8),
  /**
   * <code>setSnapToGrid = 9;</code>
   */
  setSnapToGrid(9),
  /**
   * <code>setSnapToGridAndXY = 10;</code>
   */
  setSnapToGridAndXY(10),
  /**
   * <code>setFootprint = 11;</code>
   */
  setFootprint(11),
  /**
   * <code>setProperty = 12;</code>
   */
  setProperty(12),
  /**
   * <code>resetProperty = 13;</code>
   */
  resetProperty(13),
  /**
   * <code>setZOrder = 14;</code>
   */
  setZOrder(14),
  /**
   * <code>setFacing = 15;</code>
   */
  setFacing(15),
  /**
   * <code>clearAllOwners = 16;</code>
   */
  clearAllOwners(16),
  /**
   * <code>setOwnedByAll = 17;</code>
   */
  setOwnedByAll(17),
  /**
   * <code>addOwner = 18;</code>
   */
  addOwner(18),
  /**
   * <code>setScaleX = 19;</code>
   */
  setScaleX(19),
  /**
   * <code>setScaleY = 20;</code>
   */
  setScaleY(20),
  /**
   * <code>setScaleXY = 21;</code>
   */
  setScaleXY(21),
  /**
   * <code>setNotes = 22;</code>
   */
  setNotes(22),
  /**
   * <code>setGMNotes = 23;</code>
   */
  setGMNotes(23),
  /**
   * <code>saveMacro = 24;</code>
   */
  saveMacro(24),
  /**
   * <code>saveMacroList = 25;</code>
   */
  saveMacroList(25),
  /**
   * <code>deleteMacro = 26;</code>
   */
  deleteMacro(26),
  /**
   * <code>setX = 27;</code>
   */
  setX(27),
  /**
   * <code>setY = 28;</code>
   */
  setY(28),
  /**
   * <code>setXY = 29;</code>
   */
  setXY(29),
  /**
   * <code>setHaloColor = 30;</code>
   */
  setHaloColor(30),
  /**
   * <code>setLabel = 31;</code>
   */
  setLabel(31),
  /**
   * <code>setName = 32;</code>
   */
  setName(32),
  /**
   * <code>setGMName = 33;</code>
   */
  setGMName(33),
  /**
   * <code>setVisible = 34;</code>
   */
  setVisible(34),
  /**
   * <code>setVisibleOnlyToOwner = 35;</code>
   */
  setVisibleOnlyToOwner(35),
  /**
   * <code>setIsAlwaysVisible = 36;</code>
   */
  setIsAlwaysVisible(36),
  /**
   * <code>setTokenOpacity = 37;</code>
   */
  setTokenOpacity(37),
  /**
   * <code>setTerrainModifier = 38;</code>
   */
  setTerrainModifier(38),
  /**
   * <code>setTerrainModifierOperation = 39;</code>
   */
  setTerrainModifierOperation(39),
  /**
   * <code>setTerrainModifiersIgnored = 40;</code>
   */
  setTerrainModifiersIgnored(40),
  /**
   * <code>setTopology = 41;</code>
   */
  setTopology(41),
  /**
   * <code>setImageAsset = 42;</code>
   */
  setImageAsset(42),
  /**
   * <code>setPortraitImage = 43;</code>
   */
  setPortraitImage(43),
  /**
   * <code>setCharsheetImage = 44;</code>
   */
  setCharsheetImage(44),
  /**
   * <code>setLayout = 45;</code>
   */
  setLayout(45),
  /**
   * <code>clearLightSources = 46;</code>
   */
  clearLightSources(46),
  /**
   * <code>removeLightSource = 47;</code>
   */
  removeLightSource(47),
  /**
   * <code>addLightSource = 48;</code>
   */
  addLightSource(48),
  /**
   * <code>setHasSight = 49;</code>
   */
  setHasSight(49),
  /**
   * <code>setSightType = 50;</code>
   */
  setSightType(50),
  /**
   * <code>flipX = 51;</code>
   */
  flipX(51),
  /**
   * <code>flipY = 52;</code>
   */
  flipY(52),
  /**
   * <code>flipIso = 53;</code>
   */
  flipIso(53),
  /**
   * <code>setSpeechName = 54;</code>
   */
  setSpeechName(54),
  /**
   * <code>removeFacing = 55;</code>
   */
  removeFacing(55),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>setState = 0;</code>
   */
  public static final int setState_VALUE = 0;
  /**
   * <code>setAllStates = 1;</code>
   */
  public static final int setAllStates_VALUE = 1;
  /**
   * <code>setPropertyType = 2;</code>
   */
  public static final int setPropertyType_VALUE = 2;
  /**
   * <code>setPC = 3;</code>
   */
  public static final int setPC_VALUE = 3;
  /**
   * <code>setNPC = 4;</code>
   */
  public static final int setNPC_VALUE = 4;
  /**
   * <code>setLayer = 5;</code>
   */
  public static final int setLayer_VALUE = 5;
  /**
   * <code>setLayerShape = 6;</code>
   */
  public static final int setLayerShape_VALUE = 6;
  /**
   * <code>setShape = 7;</code>
   */
  public static final int setShape_VALUE = 7;
  /**
   * <code>setSnapToScale = 8;</code>
   */
  public static final int setSnapToScale_VALUE = 8;
  /**
   * <code>setSnapToGrid = 9;</code>
   */
  public static final int setSnapToGrid_VALUE = 9;
  /**
   * <code>setSnapToGridAndXY = 10;</code>
   */
  public static final int setSnapToGridAndXY_VALUE = 10;
  /**
   * <code>setFootprint = 11;</code>
   */
  public static final int setFootprint_VALUE = 11;
  /**
   * <code>setProperty = 12;</code>
   */
  public static final int setProperty_VALUE = 12;
  /**
   * <code>resetProperty = 13;</code>
   */
  public static final int resetProperty_VALUE = 13;
  /**
   * <code>setZOrder = 14;</code>
   */
  public static final int setZOrder_VALUE = 14;
  /**
   * <code>setFacing = 15;</code>
   */
  public static final int setFacing_VALUE = 15;
  /**
   * <code>clearAllOwners = 16;</code>
   */
  public static final int clearAllOwners_VALUE = 16;
  /**
   * <code>setOwnedByAll = 17;</code>
   */
  public static final int setOwnedByAll_VALUE = 17;
  /**
   * <code>addOwner = 18;</code>
   */
  public static final int addOwner_VALUE = 18;
  /**
   * <code>setScaleX = 19;</code>
   */
  public static final int setScaleX_VALUE = 19;
  /**
   * <code>setScaleY = 20;</code>
   */
  public static final int setScaleY_VALUE = 20;
  /**
   * <code>setScaleXY = 21;</code>
   */
  public static final int setScaleXY_VALUE = 21;
  /**
   * <code>setNotes = 22;</code>
   */
  public static final int setNotes_VALUE = 22;
  /**
   * <code>setGMNotes = 23;</code>
   */
  public static final int setGMNotes_VALUE = 23;
  /**
   * <code>saveMacro = 24;</code>
   */
  public static final int saveMacro_VALUE = 24;
  /**
   * <code>saveMacroList = 25;</code>
   */
  public static final int saveMacroList_VALUE = 25;
  /**
   * <code>deleteMacro = 26;</code>
   */
  public static final int deleteMacro_VALUE = 26;
  /**
   * <code>setX = 27;</code>
   */
  public static final int setX_VALUE = 27;
  /**
   * <code>setY = 28;</code>
   */
  public static final int setY_VALUE = 28;
  /**
   * <code>setXY = 29;</code>
   */
  public static final int setXY_VALUE = 29;
  /**
   * <code>setHaloColor = 30;</code>
   */
  public static final int setHaloColor_VALUE = 30;
  /**
   * <code>setLabel = 31;</code>
   */
  public static final int setLabel_VALUE = 31;
  /**
   * <code>setName = 32;</code>
   */
  public static final int setName_VALUE = 32;
  /**
   * <code>setGMName = 33;</code>
   */
  public static final int setGMName_VALUE = 33;
  /**
   * <code>setVisible = 34;</code>
   */
  public static final int setVisible_VALUE = 34;
  /**
   * <code>setVisibleOnlyToOwner = 35;</code>
   */
  public static final int setVisibleOnlyToOwner_VALUE = 35;
  /**
   * <code>setIsAlwaysVisible = 36;</code>
   */
  public static final int setIsAlwaysVisible_VALUE = 36;
  /**
   * <code>setTokenOpacity = 37;</code>
   */
  public static final int setTokenOpacity_VALUE = 37;
  /**
   * <code>setTerrainModifier = 38;</code>
   */
  public static final int setTerrainModifier_VALUE = 38;
  /**
   * <code>setTerrainModifierOperation = 39;</code>
   */
  public static final int setTerrainModifierOperation_VALUE = 39;
  /**
   * <code>setTerrainModifiersIgnored = 40;</code>
   */
  public static final int setTerrainModifiersIgnored_VALUE = 40;
  /**
   * <code>setTopology = 41;</code>
   */
  public static final int setTopology_VALUE = 41;
  /**
   * <code>setImageAsset = 42;</code>
   */
  public static final int setImageAsset_VALUE = 42;
  /**
   * <code>setPortraitImage = 43;</code>
   */
  public static final int setPortraitImage_VALUE = 43;
  /**
   * <code>setCharsheetImage = 44;</code>
   */
  public static final int setCharsheetImage_VALUE = 44;
  /**
   * <code>setLayout = 45;</code>
   */
  public static final int setLayout_VALUE = 45;
  /**
   * <code>clearLightSources = 46;</code>
   */
  public static final int clearLightSources_VALUE = 46;
  /**
   * <code>removeLightSource = 47;</code>
   */
  public static final int removeLightSource_VALUE = 47;
  /**
   * <code>addLightSource = 48;</code>
   */
  public static final int addLightSource_VALUE = 48;
  /**
   * <code>setHasSight = 49;</code>
   */
  public static final int setHasSight_VALUE = 49;
  /**
   * <code>setSightType = 50;</code>
   */
  public static final int setSightType_VALUE = 50;
  /**
   * <code>flipX = 51;</code>
   */
  public static final int flipX_VALUE = 51;
  /**
   * <code>flipY = 52;</code>
   */
  public static final int flipY_VALUE = 52;
  /**
   * <code>flipIso = 53;</code>
   */
  public static final int flipIso_VALUE = 53;
  /**
   * <code>setSpeechName = 54;</code>
   */
  public static final int setSpeechName_VALUE = 54;
  /**
   * <code>removeFacing = 55;</code>
   */
  public static final int removeFacing_VALUE = 55;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TokenUpdateDto valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TokenUpdateDto forNumber(int value) {
    switch (value) {
      case 0: return setState;
      case 1: return setAllStates;
      case 2: return setPropertyType;
      case 3: return setPC;
      case 4: return setNPC;
      case 5: return setLayer;
      case 6: return setLayerShape;
      case 7: return setShape;
      case 8: return setSnapToScale;
      case 9: return setSnapToGrid;
      case 10: return setSnapToGridAndXY;
      case 11: return setFootprint;
      case 12: return setProperty;
      case 13: return resetProperty;
      case 14: return setZOrder;
      case 15: return setFacing;
      case 16: return clearAllOwners;
      case 17: return setOwnedByAll;
      case 18: return addOwner;
      case 19: return setScaleX;
      case 20: return setScaleY;
      case 21: return setScaleXY;
      case 22: return setNotes;
      case 23: return setGMNotes;
      case 24: return saveMacro;
      case 25: return saveMacroList;
      case 26: return deleteMacro;
      case 27: return setX;
      case 28: return setY;
      case 29: return setXY;
      case 30: return setHaloColor;
      case 31: return setLabel;
      case 32: return setName;
      case 33: return setGMName;
      case 34: return setVisible;
      case 35: return setVisibleOnlyToOwner;
      case 36: return setIsAlwaysVisible;
      case 37: return setTokenOpacity;
      case 38: return setTerrainModifier;
      case 39: return setTerrainModifierOperation;
      case 40: return setTerrainModifiersIgnored;
      case 41: return setTopology;
      case 42: return setImageAsset;
      case 43: return setPortraitImage;
      case 44: return setCharsheetImage;
      case 45: return setLayout;
      case 46: return clearLightSources;
      case 47: return removeLightSource;
      case 48: return addLightSource;
      case 49: return setHasSight;
      case 50: return setSightType;
      case 51: return flipX;
      case 52: return flipY;
      case 53: return flipIso;
      case 54: return setSpeechName;
      case 55: return removeFacing;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TokenUpdateDto>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TokenUpdateDto> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TokenUpdateDto>() {
          public TokenUpdateDto findValueByNumber(int number) {
            return TokenUpdateDto.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.getDescriptor().getEnumTypes().get(8);
  }

  private static final TokenUpdateDto[] VALUES = values();

  public static TokenUpdateDto valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TokenUpdateDto(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:maptool.TokenUpdateDto)
}

