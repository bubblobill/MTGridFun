// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drawing_dto.proto

package net.rptools.maptool.server.proto.drawing;

/**
 * Protobuf type {@code maptool.PenDto}
 */
public final class PenDto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maptool.PenDto)
    PenDtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PenDto.newBuilder() to construct.
  private PenDto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PenDto() {
    foregroundMode_ = 0;
    backgroundMode_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PenDto();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PenDto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            foregroundMode_ = rawValue;
            break;
          }
          case 18: {
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder subBuilder = null;
            if (foregroundColor_ != null) {
              subBuilder = foregroundColor_.toBuilder();
            }
            foregroundColor_ = input.readMessage(net.rptools.maptool.server.proto.drawing.DrawablePaintDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(foregroundColor_);
              foregroundColor_ = subBuilder.buildPartial();
            }

            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            backgroundMode_ = rawValue;
            break;
          }
          case 34: {
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder subBuilder = null;
            if (backgroundColor_ != null) {
              subBuilder = backgroundColor_.toBuilder();
            }
            backgroundColor_ = input.readMessage(net.rptools.maptool.server.proto.drawing.DrawablePaintDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(backgroundColor_);
              backgroundColor_ = subBuilder.buildPartial();
            }

            break;
          }
          case 45: {

            thickness_ = input.readFloat();
            break;
          }
          case 48: {

            eraser_ = input.readBool();
            break;
          }
          case 56: {

            squareCap_ = input.readBool();
            break;
          }
          case 69: {

            opacity_ = input.readFloat();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_PenDto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_PenDto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            net.rptools.maptool.server.proto.drawing.PenDto.class, net.rptools.maptool.server.proto.drawing.PenDto.Builder.class);
  }

  /**
   * Protobuf enum {@code maptool.PenDto.mode}
   */
  public enum mode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MODE_SOLID = 0;</code>
     */
    MODE_SOLID(0),
    /**
     * <code>MODE_TRANSPARENT = 1;</code>
     */
    MODE_TRANSPARENT(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>MODE_SOLID = 0;</code>
     */
    public static final int MODE_SOLID_VALUE = 0;
    /**
     * <code>MODE_TRANSPARENT = 1;</code>
     */
    public static final int MODE_TRANSPARENT_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static mode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static mode forNumber(int value) {
      switch (value) {
        case 0: return MODE_SOLID;
        case 1: return MODE_TRANSPARENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<mode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        mode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<mode>() {
            public mode findValueByNumber(int number) {
              return mode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.drawing.PenDto.getDescriptor().getEnumTypes().get(0);
    }

    private static final mode[] VALUES = values();

    public static mode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private mode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maptool.PenDto.mode)
  }

  public static final int FOREGROUND_MODE_FIELD_NUMBER = 1;
  private int foregroundMode_;
  /**
   * <code>.maptool.PenDto.mode foreground_mode = 1;</code>
   * @return The enum numeric value on the wire for foregroundMode.
   */
  @java.lang.Override public int getForegroundModeValue() {
    return foregroundMode_;
  }
  /**
   * <code>.maptool.PenDto.mode foreground_mode = 1;</code>
   * @return The foregroundMode.
   */
  @java.lang.Override public net.rptools.maptool.server.proto.drawing.PenDto.mode getForegroundMode() {
    @SuppressWarnings("deprecation")
    net.rptools.maptool.server.proto.drawing.PenDto.mode result = net.rptools.maptool.server.proto.drawing.PenDto.mode.valueOf(foregroundMode_);
    return result == null ? net.rptools.maptool.server.proto.drawing.PenDto.mode.UNRECOGNIZED : result;
  }

  public static final int FOREGROUND_COLOR_FIELD_NUMBER = 2;
  private net.rptools.maptool.server.proto.drawing.DrawablePaintDto foregroundColor_;
  /**
   * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
   * @return Whether the foregroundColor field is set.
   */
  @java.lang.Override
  public boolean hasForegroundColor() {
    return foregroundColor_ != null;
  }
  /**
   * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
   * @return The foregroundColor.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawablePaintDto getForegroundColor() {
    return foregroundColor_ == null ? net.rptools.maptool.server.proto.drawing.DrawablePaintDto.getDefaultInstance() : foregroundColor_;
  }
  /**
   * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder getForegroundColorOrBuilder() {
    return getForegroundColor();
  }

  public static final int BACKGROUND_MODE_FIELD_NUMBER = 3;
  private int backgroundMode_;
  /**
   * <code>.maptool.PenDto.mode background_mode = 3;</code>
   * @return The enum numeric value on the wire for backgroundMode.
   */
  @java.lang.Override public int getBackgroundModeValue() {
    return backgroundMode_;
  }
  /**
   * <code>.maptool.PenDto.mode background_mode = 3;</code>
   * @return The backgroundMode.
   */
  @java.lang.Override public net.rptools.maptool.server.proto.drawing.PenDto.mode getBackgroundMode() {
    @SuppressWarnings("deprecation")
    net.rptools.maptool.server.proto.drawing.PenDto.mode result = net.rptools.maptool.server.proto.drawing.PenDto.mode.valueOf(backgroundMode_);
    return result == null ? net.rptools.maptool.server.proto.drawing.PenDto.mode.UNRECOGNIZED : result;
  }

  public static final int BACKGROUND_COLOR_FIELD_NUMBER = 4;
  private net.rptools.maptool.server.proto.drawing.DrawablePaintDto backgroundColor_;
  /**
   * <code>.maptool.DrawablePaintDto background_color = 4;</code>
   * @return Whether the backgroundColor field is set.
   */
  @java.lang.Override
  public boolean hasBackgroundColor() {
    return backgroundColor_ != null;
  }
  /**
   * <code>.maptool.DrawablePaintDto background_color = 4;</code>
   * @return The backgroundColor.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawablePaintDto getBackgroundColor() {
    return backgroundColor_ == null ? net.rptools.maptool.server.proto.drawing.DrawablePaintDto.getDefaultInstance() : backgroundColor_;
  }
  /**
   * <code>.maptool.DrawablePaintDto background_color = 4;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder getBackgroundColorOrBuilder() {
    return getBackgroundColor();
  }

  public static final int THICKNESS_FIELD_NUMBER = 5;
  private float thickness_;
  /**
   * <code>float thickness = 5;</code>
   * @return The thickness.
   */
  @java.lang.Override
  public float getThickness() {
    return thickness_;
  }

  public static final int ERASER_FIELD_NUMBER = 6;
  private boolean eraser_;
  /**
   * <code>bool eraser = 6;</code>
   * @return The eraser.
   */
  @java.lang.Override
  public boolean getEraser() {
    return eraser_;
  }

  public static final int SQUARE_CAP_FIELD_NUMBER = 7;
  private boolean squareCap_;
  /**
   * <code>bool square_cap = 7;</code>
   * @return The squareCap.
   */
  @java.lang.Override
  public boolean getSquareCap() {
    return squareCap_;
  }

  public static final int OPACITY_FIELD_NUMBER = 8;
  private float opacity_;
  /**
   * <code>float opacity = 8;</code>
   * @return The opacity.
   */
  @java.lang.Override
  public float getOpacity() {
    return opacity_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (foregroundMode_ != net.rptools.maptool.server.proto.drawing.PenDto.mode.MODE_SOLID.getNumber()) {
      output.writeEnum(1, foregroundMode_);
    }
    if (foregroundColor_ != null) {
      output.writeMessage(2, getForegroundColor());
    }
    if (backgroundMode_ != net.rptools.maptool.server.proto.drawing.PenDto.mode.MODE_SOLID.getNumber()) {
      output.writeEnum(3, backgroundMode_);
    }
    if (backgroundColor_ != null) {
      output.writeMessage(4, getBackgroundColor());
    }
    if (java.lang.Float.floatToRawIntBits(thickness_) != 0) {
      output.writeFloat(5, thickness_);
    }
    if (eraser_ != false) {
      output.writeBool(6, eraser_);
    }
    if (squareCap_ != false) {
      output.writeBool(7, squareCap_);
    }
    if (java.lang.Float.floatToRawIntBits(opacity_) != 0) {
      output.writeFloat(8, opacity_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (foregroundMode_ != net.rptools.maptool.server.proto.drawing.PenDto.mode.MODE_SOLID.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, foregroundMode_);
    }
    if (foregroundColor_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getForegroundColor());
    }
    if (backgroundMode_ != net.rptools.maptool.server.proto.drawing.PenDto.mode.MODE_SOLID.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, backgroundMode_);
    }
    if (backgroundColor_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getBackgroundColor());
    }
    if (java.lang.Float.floatToRawIntBits(thickness_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(5, thickness_);
    }
    if (eraser_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, eraser_);
    }
    if (squareCap_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, squareCap_);
    }
    if (java.lang.Float.floatToRawIntBits(opacity_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(8, opacity_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof net.rptools.maptool.server.proto.drawing.PenDto)) {
      return super.equals(obj);
    }
    net.rptools.maptool.server.proto.drawing.PenDto other = (net.rptools.maptool.server.proto.drawing.PenDto) obj;

    if (foregroundMode_ != other.foregroundMode_) return false;
    if (hasForegroundColor() != other.hasForegroundColor()) return false;
    if (hasForegroundColor()) {
      if (!getForegroundColor()
          .equals(other.getForegroundColor())) return false;
    }
    if (backgroundMode_ != other.backgroundMode_) return false;
    if (hasBackgroundColor() != other.hasBackgroundColor()) return false;
    if (hasBackgroundColor()) {
      if (!getBackgroundColor()
          .equals(other.getBackgroundColor())) return false;
    }
    if (java.lang.Float.floatToIntBits(getThickness())
        != java.lang.Float.floatToIntBits(
            other.getThickness())) return false;
    if (getEraser()
        != other.getEraser()) return false;
    if (getSquareCap()
        != other.getSquareCap()) return false;
    if (java.lang.Float.floatToIntBits(getOpacity())
        != java.lang.Float.floatToIntBits(
            other.getOpacity())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + FOREGROUND_MODE_FIELD_NUMBER;
    hash = (53 * hash) + foregroundMode_;
    if (hasForegroundColor()) {
      hash = (37 * hash) + FOREGROUND_COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getForegroundColor().hashCode();
    }
    hash = (37 * hash) + BACKGROUND_MODE_FIELD_NUMBER;
    hash = (53 * hash) + backgroundMode_;
    if (hasBackgroundColor()) {
      hash = (37 * hash) + BACKGROUND_COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getBackgroundColor().hashCode();
    }
    hash = (37 * hash) + THICKNESS_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getThickness());
    hash = (37 * hash) + ERASER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getEraser());
    hash = (37 * hash) + SQUARE_CAP_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getSquareCap());
    hash = (37 * hash) + OPACITY_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getOpacity());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static net.rptools.maptool.server.proto.drawing.PenDto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.PenDto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(net.rptools.maptool.server.proto.drawing.PenDto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code maptool.PenDto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maptool.PenDto)
      net.rptools.maptool.server.proto.drawing.PenDtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_PenDto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_PenDto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              net.rptools.maptool.server.proto.drawing.PenDto.class, net.rptools.maptool.server.proto.drawing.PenDto.Builder.class);
    }

    // Construct using net.rptools.maptool.server.proto.drawing.PenDto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      foregroundMode_ = 0;

      if (foregroundColorBuilder_ == null) {
        foregroundColor_ = null;
      } else {
        foregroundColor_ = null;
        foregroundColorBuilder_ = null;
      }
      backgroundMode_ = 0;

      if (backgroundColorBuilder_ == null) {
        backgroundColor_ = null;
      } else {
        backgroundColor_ = null;
        backgroundColorBuilder_ = null;
      }
      thickness_ = 0F;

      eraser_ = false;

      squareCap_ = false;

      opacity_ = 0F;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_PenDto_descriptor;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.PenDto getDefaultInstanceForType() {
      return net.rptools.maptool.server.proto.drawing.PenDto.getDefaultInstance();
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.PenDto build() {
      net.rptools.maptool.server.proto.drawing.PenDto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.PenDto buildPartial() {
      net.rptools.maptool.server.proto.drawing.PenDto result = new net.rptools.maptool.server.proto.drawing.PenDto(this);
      result.foregroundMode_ = foregroundMode_;
      if (foregroundColorBuilder_ == null) {
        result.foregroundColor_ = foregroundColor_;
      } else {
        result.foregroundColor_ = foregroundColorBuilder_.build();
      }
      result.backgroundMode_ = backgroundMode_;
      if (backgroundColorBuilder_ == null) {
        result.backgroundColor_ = backgroundColor_;
      } else {
        result.backgroundColor_ = backgroundColorBuilder_.build();
      }
      result.thickness_ = thickness_;
      result.eraser_ = eraser_;
      result.squareCap_ = squareCap_;
      result.opacity_ = opacity_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof net.rptools.maptool.server.proto.drawing.PenDto) {
        return mergeFrom((net.rptools.maptool.server.proto.drawing.PenDto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(net.rptools.maptool.server.proto.drawing.PenDto other) {
      if (other == net.rptools.maptool.server.proto.drawing.PenDto.getDefaultInstance()) return this;
      if (other.foregroundMode_ != 0) {
        setForegroundModeValue(other.getForegroundModeValue());
      }
      if (other.hasForegroundColor()) {
        mergeForegroundColor(other.getForegroundColor());
      }
      if (other.backgroundMode_ != 0) {
        setBackgroundModeValue(other.getBackgroundModeValue());
      }
      if (other.hasBackgroundColor()) {
        mergeBackgroundColor(other.getBackgroundColor());
      }
      if (other.getThickness() != 0F) {
        setThickness(other.getThickness());
      }
      if (other.getEraser() != false) {
        setEraser(other.getEraser());
      }
      if (other.getSquareCap() != false) {
        setSquareCap(other.getSquareCap());
      }
      if (other.getOpacity() != 0F) {
        setOpacity(other.getOpacity());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      net.rptools.maptool.server.proto.drawing.PenDto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (net.rptools.maptool.server.proto.drawing.PenDto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int foregroundMode_ = 0;
    /**
     * <code>.maptool.PenDto.mode foreground_mode = 1;</code>
     * @return The enum numeric value on the wire for foregroundMode.
     */
    @java.lang.Override public int getForegroundModeValue() {
      return foregroundMode_;
    }
    /**
     * <code>.maptool.PenDto.mode foreground_mode = 1;</code>
     * @param value The enum numeric value on the wire for foregroundMode to set.
     * @return This builder for chaining.
     */
    public Builder setForegroundModeValue(int value) {
      
      foregroundMode_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.PenDto.mode foreground_mode = 1;</code>
     * @return The foregroundMode.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.PenDto.mode getForegroundMode() {
      @SuppressWarnings("deprecation")
      net.rptools.maptool.server.proto.drawing.PenDto.mode result = net.rptools.maptool.server.proto.drawing.PenDto.mode.valueOf(foregroundMode_);
      return result == null ? net.rptools.maptool.server.proto.drawing.PenDto.mode.UNRECOGNIZED : result;
    }
    /**
     * <code>.maptool.PenDto.mode foreground_mode = 1;</code>
     * @param value The foregroundMode to set.
     * @return This builder for chaining.
     */
    public Builder setForegroundMode(net.rptools.maptool.server.proto.drawing.PenDto.mode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      foregroundMode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.PenDto.mode foreground_mode = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearForegroundMode() {
      
      foregroundMode_ = 0;
      onChanged();
      return this;
    }

    private net.rptools.maptool.server.proto.drawing.DrawablePaintDto foregroundColor_;
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.DrawablePaintDto, net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder> foregroundColorBuilder_;
    /**
     * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
     * @return Whether the foregroundColor field is set.
     */
    public boolean hasForegroundColor() {
      return foregroundColorBuilder_ != null || foregroundColor_ != null;
    }
    /**
     * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
     * @return The foregroundColor.
     */
    public net.rptools.maptool.server.proto.drawing.DrawablePaintDto getForegroundColor() {
      if (foregroundColorBuilder_ == null) {
        return foregroundColor_ == null ? net.rptools.maptool.server.proto.drawing.DrawablePaintDto.getDefaultInstance() : foregroundColor_;
      } else {
        return foregroundColorBuilder_.getMessage();
      }
    }
    /**
     * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
     */
    public Builder setForegroundColor(net.rptools.maptool.server.proto.drawing.DrawablePaintDto value) {
      if (foregroundColorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        foregroundColor_ = value;
        onChanged();
      } else {
        foregroundColorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
     */
    public Builder setForegroundColor(
        net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder builderForValue) {
      if (foregroundColorBuilder_ == null) {
        foregroundColor_ = builderForValue.build();
        onChanged();
      } else {
        foregroundColorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
     */
    public Builder mergeForegroundColor(net.rptools.maptool.server.proto.drawing.DrawablePaintDto value) {
      if (foregroundColorBuilder_ == null) {
        if (foregroundColor_ != null) {
          foregroundColor_ =
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto.newBuilder(foregroundColor_).mergeFrom(value).buildPartial();
        } else {
          foregroundColor_ = value;
        }
        onChanged();
      } else {
        foregroundColorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
     */
    public Builder clearForegroundColor() {
      if (foregroundColorBuilder_ == null) {
        foregroundColor_ = null;
        onChanged();
      } else {
        foregroundColor_ = null;
        foregroundColorBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
     */
    public net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder getForegroundColorBuilder() {
      
      onChanged();
      return getForegroundColorFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
     */
    public net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder getForegroundColorOrBuilder() {
      if (foregroundColorBuilder_ != null) {
        return foregroundColorBuilder_.getMessageOrBuilder();
      } else {
        return foregroundColor_ == null ?
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto.getDefaultInstance() : foregroundColor_;
      }
    }
    /**
     * <code>.maptool.DrawablePaintDto foreground_color = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.DrawablePaintDto, net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder> 
        getForegroundColorFieldBuilder() {
      if (foregroundColorBuilder_ == null) {
        foregroundColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto, net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder>(
                getForegroundColor(),
                getParentForChildren(),
                isClean());
        foregroundColor_ = null;
      }
      return foregroundColorBuilder_;
    }

    private int backgroundMode_ = 0;
    /**
     * <code>.maptool.PenDto.mode background_mode = 3;</code>
     * @return The enum numeric value on the wire for backgroundMode.
     */
    @java.lang.Override public int getBackgroundModeValue() {
      return backgroundMode_;
    }
    /**
     * <code>.maptool.PenDto.mode background_mode = 3;</code>
     * @param value The enum numeric value on the wire for backgroundMode to set.
     * @return This builder for chaining.
     */
    public Builder setBackgroundModeValue(int value) {
      
      backgroundMode_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.PenDto.mode background_mode = 3;</code>
     * @return The backgroundMode.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.PenDto.mode getBackgroundMode() {
      @SuppressWarnings("deprecation")
      net.rptools.maptool.server.proto.drawing.PenDto.mode result = net.rptools.maptool.server.proto.drawing.PenDto.mode.valueOf(backgroundMode_);
      return result == null ? net.rptools.maptool.server.proto.drawing.PenDto.mode.UNRECOGNIZED : result;
    }
    /**
     * <code>.maptool.PenDto.mode background_mode = 3;</code>
     * @param value The backgroundMode to set.
     * @return This builder for chaining.
     */
    public Builder setBackgroundMode(net.rptools.maptool.server.proto.drawing.PenDto.mode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      backgroundMode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.PenDto.mode background_mode = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearBackgroundMode() {
      
      backgroundMode_ = 0;
      onChanged();
      return this;
    }

    private net.rptools.maptool.server.proto.drawing.DrawablePaintDto backgroundColor_;
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.DrawablePaintDto, net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder> backgroundColorBuilder_;
    /**
     * <code>.maptool.DrawablePaintDto background_color = 4;</code>
     * @return Whether the backgroundColor field is set.
     */
    public boolean hasBackgroundColor() {
      return backgroundColorBuilder_ != null || backgroundColor_ != null;
    }
    /**
     * <code>.maptool.DrawablePaintDto background_color = 4;</code>
     * @return The backgroundColor.
     */
    public net.rptools.maptool.server.proto.drawing.DrawablePaintDto getBackgroundColor() {
      if (backgroundColorBuilder_ == null) {
        return backgroundColor_ == null ? net.rptools.maptool.server.proto.drawing.DrawablePaintDto.getDefaultInstance() : backgroundColor_;
      } else {
        return backgroundColorBuilder_.getMessage();
      }
    }
    /**
     * <code>.maptool.DrawablePaintDto background_color = 4;</code>
     */
    public Builder setBackgroundColor(net.rptools.maptool.server.proto.drawing.DrawablePaintDto value) {
      if (backgroundColorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        backgroundColor_ = value;
        onChanged();
      } else {
        backgroundColorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto background_color = 4;</code>
     */
    public Builder setBackgroundColor(
        net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder builderForValue) {
      if (backgroundColorBuilder_ == null) {
        backgroundColor_ = builderForValue.build();
        onChanged();
      } else {
        backgroundColorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto background_color = 4;</code>
     */
    public Builder mergeBackgroundColor(net.rptools.maptool.server.proto.drawing.DrawablePaintDto value) {
      if (backgroundColorBuilder_ == null) {
        if (backgroundColor_ != null) {
          backgroundColor_ =
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto.newBuilder(backgroundColor_).mergeFrom(value).buildPartial();
        } else {
          backgroundColor_ = value;
        }
        onChanged();
      } else {
        backgroundColorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto background_color = 4;</code>
     */
    public Builder clearBackgroundColor() {
      if (backgroundColorBuilder_ == null) {
        backgroundColor_ = null;
        onChanged();
      } else {
        backgroundColor_ = null;
        backgroundColorBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto background_color = 4;</code>
     */
    public net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder getBackgroundColorBuilder() {
      
      onChanged();
      return getBackgroundColorFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.DrawablePaintDto background_color = 4;</code>
     */
    public net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder getBackgroundColorOrBuilder() {
      if (backgroundColorBuilder_ != null) {
        return backgroundColorBuilder_.getMessageOrBuilder();
      } else {
        return backgroundColor_ == null ?
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto.getDefaultInstance() : backgroundColor_;
      }
    }
    /**
     * <code>.maptool.DrawablePaintDto background_color = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.DrawablePaintDto, net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder> 
        getBackgroundColorFieldBuilder() {
      if (backgroundColorBuilder_ == null) {
        backgroundColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto, net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder>(
                getBackgroundColor(),
                getParentForChildren(),
                isClean());
        backgroundColor_ = null;
      }
      return backgroundColorBuilder_;
    }

    private float thickness_ ;
    /**
     * <code>float thickness = 5;</code>
     * @return The thickness.
     */
    @java.lang.Override
    public float getThickness() {
      return thickness_;
    }
    /**
     * <code>float thickness = 5;</code>
     * @param value The thickness to set.
     * @return This builder for chaining.
     */
    public Builder setThickness(float value) {
      
      thickness_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float thickness = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearThickness() {
      
      thickness_ = 0F;
      onChanged();
      return this;
    }

    private boolean eraser_ ;
    /**
     * <code>bool eraser = 6;</code>
     * @return The eraser.
     */
    @java.lang.Override
    public boolean getEraser() {
      return eraser_;
    }
    /**
     * <code>bool eraser = 6;</code>
     * @param value The eraser to set.
     * @return This builder for chaining.
     */
    public Builder setEraser(boolean value) {
      
      eraser_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool eraser = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearEraser() {
      
      eraser_ = false;
      onChanged();
      return this;
    }

    private boolean squareCap_ ;
    /**
     * <code>bool square_cap = 7;</code>
     * @return The squareCap.
     */
    @java.lang.Override
    public boolean getSquareCap() {
      return squareCap_;
    }
    /**
     * <code>bool square_cap = 7;</code>
     * @param value The squareCap to set.
     * @return This builder for chaining.
     */
    public Builder setSquareCap(boolean value) {
      
      squareCap_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool square_cap = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearSquareCap() {
      
      squareCap_ = false;
      onChanged();
      return this;
    }

    private float opacity_ ;
    /**
     * <code>float opacity = 8;</code>
     * @return The opacity.
     */
    @java.lang.Override
    public float getOpacity() {
      return opacity_;
    }
    /**
     * <code>float opacity = 8;</code>
     * @param value The opacity to set.
     * @return This builder for chaining.
     */
    public Builder setOpacity(float value) {
      
      opacity_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float opacity = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearOpacity() {
      
      opacity_ = 0F;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maptool.PenDto)
  }

  // @@protoc_insertion_point(class_scope:maptool.PenDto)
  private static final net.rptools.maptool.server.proto.drawing.PenDto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new net.rptools.maptool.server.proto.drawing.PenDto();
  }

  public static net.rptools.maptool.server.proto.drawing.PenDto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PenDto>
      PARSER = new com.google.protobuf.AbstractParser<PenDto>() {
    @java.lang.Override
    public PenDto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PenDto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PenDto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PenDto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.PenDto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

