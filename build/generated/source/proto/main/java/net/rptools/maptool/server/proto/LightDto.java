// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_transfer_objects.proto

package net.rptools.maptool.server.proto;

/**
 * Protobuf type {@code maptool.LightDto}
 */
public final class LightDto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maptool.LightDto)
    LightDtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LightDto.newBuilder() to construct.
  private LightDto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LightDto() {
    shape_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LightDto();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LightDto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder subBuilder = null;
            if (paint_ != null) {
              subBuilder = paint_.toBuilder();
            }
            paint_ = input.readMessage(net.rptools.maptool.server.proto.drawing.DrawablePaintDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(paint_);
              paint_ = subBuilder.buildPartial();
            }

            break;
          }
          case 17: {

            facingOffset_ = input.readDouble();
            break;
          }
          case 25: {

            radius_ = input.readDouble();
            break;
          }
          case 33: {

            arcAngle_ = input.readDouble();
            break;
          }
          case 40: {
            int rawValue = input.readEnum();

            shape_ = rawValue;
            break;
          }
          case 48: {

            isGm_ = input.readBool();
            break;
          }
          case 56: {

            ownerOnly_ = input.readBool();
            break;
          }
          case 64: {

            lumens_ = input.readInt32();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_LightDto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_LightDto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            net.rptools.maptool.server.proto.LightDto.class, net.rptools.maptool.server.proto.LightDto.Builder.class);
  }

  public static final int PAINT_FIELD_NUMBER = 1;
  private net.rptools.maptool.server.proto.drawing.DrawablePaintDto paint_;
  /**
   * <code>.maptool.DrawablePaintDto paint = 1;</code>
   * @return Whether the paint field is set.
   */
  @java.lang.Override
  public boolean hasPaint() {
    return paint_ != null;
  }
  /**
   * <code>.maptool.DrawablePaintDto paint = 1;</code>
   * @return The paint.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawablePaintDto getPaint() {
    return paint_ == null ? net.rptools.maptool.server.proto.drawing.DrawablePaintDto.getDefaultInstance() : paint_;
  }
  /**
   * <code>.maptool.DrawablePaintDto paint = 1;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder getPaintOrBuilder() {
    return getPaint();
  }

  public static final int FACING_OFFSET_FIELD_NUMBER = 2;
  private double facingOffset_;
  /**
   * <code>double facing_offset = 2;</code>
   * @return The facingOffset.
   */
  @java.lang.Override
  public double getFacingOffset() {
    return facingOffset_;
  }

  public static final int RADIUS_FIELD_NUMBER = 3;
  private double radius_;
  /**
   * <code>double radius = 3;</code>
   * @return The radius.
   */
  @java.lang.Override
  public double getRadius() {
    return radius_;
  }

  public static final int ARC_ANGLE_FIELD_NUMBER = 4;
  private double arcAngle_;
  /**
   * <code>double arc_angle = 4;</code>
   * @return The arcAngle.
   */
  @java.lang.Override
  public double getArcAngle() {
    return arcAngle_;
  }

  public static final int SHAPE_FIELD_NUMBER = 5;
  private int shape_;
  /**
   * <code>.maptool.ShapeTypeDto shape = 5;</code>
   * @return The enum numeric value on the wire for shape.
   */
  @java.lang.Override public int getShapeValue() {
    return shape_;
  }
  /**
   * <code>.maptool.ShapeTypeDto shape = 5;</code>
   * @return The shape.
   */
  @java.lang.Override public net.rptools.maptool.server.proto.ShapeTypeDto getShape() {
    @SuppressWarnings("deprecation")
    net.rptools.maptool.server.proto.ShapeTypeDto result = net.rptools.maptool.server.proto.ShapeTypeDto.valueOf(shape_);
    return result == null ? net.rptools.maptool.server.proto.ShapeTypeDto.UNRECOGNIZED : result;
  }

  public static final int IS_GM_FIELD_NUMBER = 6;
  private boolean isGm_;
  /**
   * <code>bool is_gm = 6;</code>
   * @return The isGm.
   */
  @java.lang.Override
  public boolean getIsGm() {
    return isGm_;
  }

  public static final int OWNER_ONLY_FIELD_NUMBER = 7;
  private boolean ownerOnly_;
  /**
   * <code>bool owner_only = 7;</code>
   * @return The ownerOnly.
   */
  @java.lang.Override
  public boolean getOwnerOnly() {
    return ownerOnly_;
  }

  public static final int LUMENS_FIELD_NUMBER = 8;
  private int lumens_;
  /**
   * <code>int32 lumens = 8;</code>
   * @return The lumens.
   */
  @java.lang.Override
  public int getLumens() {
    return lumens_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (paint_ != null) {
      output.writeMessage(1, getPaint());
    }
    if (java.lang.Double.doubleToRawLongBits(facingOffset_) != 0) {
      output.writeDouble(2, facingOffset_);
    }
    if (java.lang.Double.doubleToRawLongBits(radius_) != 0) {
      output.writeDouble(3, radius_);
    }
    if (java.lang.Double.doubleToRawLongBits(arcAngle_) != 0) {
      output.writeDouble(4, arcAngle_);
    }
    if (shape_ != net.rptools.maptool.server.proto.ShapeTypeDto.SQUARE.getNumber()) {
      output.writeEnum(5, shape_);
    }
    if (isGm_ != false) {
      output.writeBool(6, isGm_);
    }
    if (ownerOnly_ != false) {
      output.writeBool(7, ownerOnly_);
    }
    if (lumens_ != 0) {
      output.writeInt32(8, lumens_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (paint_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPaint());
    }
    if (java.lang.Double.doubleToRawLongBits(facingOffset_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(2, facingOffset_);
    }
    if (java.lang.Double.doubleToRawLongBits(radius_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(3, radius_);
    }
    if (java.lang.Double.doubleToRawLongBits(arcAngle_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(4, arcAngle_);
    }
    if (shape_ != net.rptools.maptool.server.proto.ShapeTypeDto.SQUARE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(5, shape_);
    }
    if (isGm_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, isGm_);
    }
    if (ownerOnly_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, ownerOnly_);
    }
    if (lumens_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, lumens_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof net.rptools.maptool.server.proto.LightDto)) {
      return super.equals(obj);
    }
    net.rptools.maptool.server.proto.LightDto other = (net.rptools.maptool.server.proto.LightDto) obj;

    if (hasPaint() != other.hasPaint()) return false;
    if (hasPaint()) {
      if (!getPaint()
          .equals(other.getPaint())) return false;
    }
    if (java.lang.Double.doubleToLongBits(getFacingOffset())
        != java.lang.Double.doubleToLongBits(
            other.getFacingOffset())) return false;
    if (java.lang.Double.doubleToLongBits(getRadius())
        != java.lang.Double.doubleToLongBits(
            other.getRadius())) return false;
    if (java.lang.Double.doubleToLongBits(getArcAngle())
        != java.lang.Double.doubleToLongBits(
            other.getArcAngle())) return false;
    if (shape_ != other.shape_) return false;
    if (getIsGm()
        != other.getIsGm()) return false;
    if (getOwnerOnly()
        != other.getOwnerOnly()) return false;
    if (getLumens()
        != other.getLumens()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPaint()) {
      hash = (37 * hash) + PAINT_FIELD_NUMBER;
      hash = (53 * hash) + getPaint().hashCode();
    }
    hash = (37 * hash) + FACING_OFFSET_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getFacingOffset()));
    hash = (37 * hash) + RADIUS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getRadius()));
    hash = (37 * hash) + ARC_ANGLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getArcAngle()));
    hash = (37 * hash) + SHAPE_FIELD_NUMBER;
    hash = (53 * hash) + shape_;
    hash = (37 * hash) + IS_GM_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIsGm());
    hash = (37 * hash) + OWNER_ONLY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getOwnerOnly());
    hash = (37 * hash) + LUMENS_FIELD_NUMBER;
    hash = (53 * hash) + getLumens();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static net.rptools.maptool.server.proto.LightDto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.LightDto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.LightDto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.LightDto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.LightDto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.LightDto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.LightDto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.LightDto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.LightDto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.LightDto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.LightDto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.LightDto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(net.rptools.maptool.server.proto.LightDto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code maptool.LightDto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maptool.LightDto)
      net.rptools.maptool.server.proto.LightDtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_LightDto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_LightDto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              net.rptools.maptool.server.proto.LightDto.class, net.rptools.maptool.server.proto.LightDto.Builder.class);
    }

    // Construct using net.rptools.maptool.server.proto.LightDto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (paintBuilder_ == null) {
        paint_ = null;
      } else {
        paint_ = null;
        paintBuilder_ = null;
      }
      facingOffset_ = 0D;

      radius_ = 0D;

      arcAngle_ = 0D;

      shape_ = 0;

      isGm_ = false;

      ownerOnly_ = false;

      lumens_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return net.rptools.maptool.server.proto.DataTranferObjectProtos.internal_static_maptool_LightDto_descriptor;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.LightDto getDefaultInstanceForType() {
      return net.rptools.maptool.server.proto.LightDto.getDefaultInstance();
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.LightDto build() {
      net.rptools.maptool.server.proto.LightDto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.LightDto buildPartial() {
      net.rptools.maptool.server.proto.LightDto result = new net.rptools.maptool.server.proto.LightDto(this);
      if (paintBuilder_ == null) {
        result.paint_ = paint_;
      } else {
        result.paint_ = paintBuilder_.build();
      }
      result.facingOffset_ = facingOffset_;
      result.radius_ = radius_;
      result.arcAngle_ = arcAngle_;
      result.shape_ = shape_;
      result.isGm_ = isGm_;
      result.ownerOnly_ = ownerOnly_;
      result.lumens_ = lumens_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof net.rptools.maptool.server.proto.LightDto) {
        return mergeFrom((net.rptools.maptool.server.proto.LightDto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(net.rptools.maptool.server.proto.LightDto other) {
      if (other == net.rptools.maptool.server.proto.LightDto.getDefaultInstance()) return this;
      if (other.hasPaint()) {
        mergePaint(other.getPaint());
      }
      if (other.getFacingOffset() != 0D) {
        setFacingOffset(other.getFacingOffset());
      }
      if (other.getRadius() != 0D) {
        setRadius(other.getRadius());
      }
      if (other.getArcAngle() != 0D) {
        setArcAngle(other.getArcAngle());
      }
      if (other.shape_ != 0) {
        setShapeValue(other.getShapeValue());
      }
      if (other.getIsGm() != false) {
        setIsGm(other.getIsGm());
      }
      if (other.getOwnerOnly() != false) {
        setOwnerOnly(other.getOwnerOnly());
      }
      if (other.getLumens() != 0) {
        setLumens(other.getLumens());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      net.rptools.maptool.server.proto.LightDto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (net.rptools.maptool.server.proto.LightDto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private net.rptools.maptool.server.proto.drawing.DrawablePaintDto paint_;
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.DrawablePaintDto, net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder> paintBuilder_;
    /**
     * <code>.maptool.DrawablePaintDto paint = 1;</code>
     * @return Whether the paint field is set.
     */
    public boolean hasPaint() {
      return paintBuilder_ != null || paint_ != null;
    }
    /**
     * <code>.maptool.DrawablePaintDto paint = 1;</code>
     * @return The paint.
     */
    public net.rptools.maptool.server.proto.drawing.DrawablePaintDto getPaint() {
      if (paintBuilder_ == null) {
        return paint_ == null ? net.rptools.maptool.server.proto.drawing.DrawablePaintDto.getDefaultInstance() : paint_;
      } else {
        return paintBuilder_.getMessage();
      }
    }
    /**
     * <code>.maptool.DrawablePaintDto paint = 1;</code>
     */
    public Builder setPaint(net.rptools.maptool.server.proto.drawing.DrawablePaintDto value) {
      if (paintBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        paint_ = value;
        onChanged();
      } else {
        paintBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto paint = 1;</code>
     */
    public Builder setPaint(
        net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder builderForValue) {
      if (paintBuilder_ == null) {
        paint_ = builderForValue.build();
        onChanged();
      } else {
        paintBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto paint = 1;</code>
     */
    public Builder mergePaint(net.rptools.maptool.server.proto.drawing.DrawablePaintDto value) {
      if (paintBuilder_ == null) {
        if (paint_ != null) {
          paint_ =
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto.newBuilder(paint_).mergeFrom(value).buildPartial();
        } else {
          paint_ = value;
        }
        onChanged();
      } else {
        paintBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto paint = 1;</code>
     */
    public Builder clearPaint() {
      if (paintBuilder_ == null) {
        paint_ = null;
        onChanged();
      } else {
        paint_ = null;
        paintBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.maptool.DrawablePaintDto paint = 1;</code>
     */
    public net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder getPaintBuilder() {
      
      onChanged();
      return getPaintFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.DrawablePaintDto paint = 1;</code>
     */
    public net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder getPaintOrBuilder() {
      if (paintBuilder_ != null) {
        return paintBuilder_.getMessageOrBuilder();
      } else {
        return paint_ == null ?
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto.getDefaultInstance() : paint_;
      }
    }
    /**
     * <code>.maptool.DrawablePaintDto paint = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.DrawablePaintDto, net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder> 
        getPaintFieldBuilder() {
      if (paintBuilder_ == null) {
        paintBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.DrawablePaintDto, net.rptools.maptool.server.proto.drawing.DrawablePaintDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablePaintDtoOrBuilder>(
                getPaint(),
                getParentForChildren(),
                isClean());
        paint_ = null;
      }
      return paintBuilder_;
    }

    private double facingOffset_ ;
    /**
     * <code>double facing_offset = 2;</code>
     * @return The facingOffset.
     */
    @java.lang.Override
    public double getFacingOffset() {
      return facingOffset_;
    }
    /**
     * <code>double facing_offset = 2;</code>
     * @param value The facingOffset to set.
     * @return This builder for chaining.
     */
    public Builder setFacingOffset(double value) {
      
      facingOffset_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double facing_offset = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearFacingOffset() {
      
      facingOffset_ = 0D;
      onChanged();
      return this;
    }

    private double radius_ ;
    /**
     * <code>double radius = 3;</code>
     * @return The radius.
     */
    @java.lang.Override
    public double getRadius() {
      return radius_;
    }
    /**
     * <code>double radius = 3;</code>
     * @param value The radius to set.
     * @return This builder for chaining.
     */
    public Builder setRadius(double value) {
      
      radius_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double radius = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearRadius() {
      
      radius_ = 0D;
      onChanged();
      return this;
    }

    private double arcAngle_ ;
    /**
     * <code>double arc_angle = 4;</code>
     * @return The arcAngle.
     */
    @java.lang.Override
    public double getArcAngle() {
      return arcAngle_;
    }
    /**
     * <code>double arc_angle = 4;</code>
     * @param value The arcAngle to set.
     * @return This builder for chaining.
     */
    public Builder setArcAngle(double value) {
      
      arcAngle_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double arc_angle = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearArcAngle() {
      
      arcAngle_ = 0D;
      onChanged();
      return this;
    }

    private int shape_ = 0;
    /**
     * <code>.maptool.ShapeTypeDto shape = 5;</code>
     * @return The enum numeric value on the wire for shape.
     */
    @java.lang.Override public int getShapeValue() {
      return shape_;
    }
    /**
     * <code>.maptool.ShapeTypeDto shape = 5;</code>
     * @param value The enum numeric value on the wire for shape to set.
     * @return This builder for chaining.
     */
    public Builder setShapeValue(int value) {
      
      shape_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.ShapeTypeDto shape = 5;</code>
     * @return The shape.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.ShapeTypeDto getShape() {
      @SuppressWarnings("deprecation")
      net.rptools.maptool.server.proto.ShapeTypeDto result = net.rptools.maptool.server.proto.ShapeTypeDto.valueOf(shape_);
      return result == null ? net.rptools.maptool.server.proto.ShapeTypeDto.UNRECOGNIZED : result;
    }
    /**
     * <code>.maptool.ShapeTypeDto shape = 5;</code>
     * @param value The shape to set.
     * @return This builder for chaining.
     */
    public Builder setShape(net.rptools.maptool.server.proto.ShapeTypeDto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      shape_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.maptool.ShapeTypeDto shape = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearShape() {
      
      shape_ = 0;
      onChanged();
      return this;
    }

    private boolean isGm_ ;
    /**
     * <code>bool is_gm = 6;</code>
     * @return The isGm.
     */
    @java.lang.Override
    public boolean getIsGm() {
      return isGm_;
    }
    /**
     * <code>bool is_gm = 6;</code>
     * @param value The isGm to set.
     * @return This builder for chaining.
     */
    public Builder setIsGm(boolean value) {
      
      isGm_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool is_gm = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsGm() {
      
      isGm_ = false;
      onChanged();
      return this;
    }

    private boolean ownerOnly_ ;
    /**
     * <code>bool owner_only = 7;</code>
     * @return The ownerOnly.
     */
    @java.lang.Override
    public boolean getOwnerOnly() {
      return ownerOnly_;
    }
    /**
     * <code>bool owner_only = 7;</code>
     * @param value The ownerOnly to set.
     * @return This builder for chaining.
     */
    public Builder setOwnerOnly(boolean value) {
      
      ownerOnly_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool owner_only = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearOwnerOnly() {
      
      ownerOnly_ = false;
      onChanged();
      return this;
    }

    private int lumens_ ;
    /**
     * <code>int32 lumens = 8;</code>
     * @return The lumens.
     */
    @java.lang.Override
    public int getLumens() {
      return lumens_;
    }
    /**
     * <code>int32 lumens = 8;</code>
     * @param value The lumens to set.
     * @return This builder for chaining.
     */
    public Builder setLumens(int value) {
      
      lumens_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 lumens = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearLumens() {
      
      lumens_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maptool.LightDto)
  }

  // @@protoc_insertion_point(class_scope:maptool.LightDto)
  private static final net.rptools.maptool.server.proto.LightDto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new net.rptools.maptool.server.proto.LightDto();
  }

  public static net.rptools.maptool.server.proto.LightDto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LightDto>
      PARSER = new com.google.protobuf.AbstractParser<LightDto>() {
    @java.lang.Override
    public LightDto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LightDto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LightDto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LightDto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public net.rptools.maptool.server.proto.LightDto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

