// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drawing_dto.proto

package net.rptools.maptool.server.proto.drawing;

/**
 * Protobuf type {@code maptool.DrawableDto}
 */
public final class DrawableDto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maptool.DrawableDto)
    DrawableDtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DrawableDto.newBuilder() to construct.
  private DrawableDto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DrawableDto() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DrawableDto();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private DrawableDto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 1) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.ShapeDrawableDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.ShapeDrawableDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 1;
            break;
          }
          case 18: {
            net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 2) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.RectangleDrawableDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.RectangleDrawableDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 2;
            break;
          }
          case 26: {
            net.rptools.maptool.server.proto.drawing.OvalDrawableDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 3) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.OvalDrawableDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.OvalDrawableDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.OvalDrawableDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 3;
            break;
          }
          case 34: {
            net.rptools.maptool.server.proto.drawing.CrossDrawableDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 4) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.CrossDrawableDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.CrossDrawableDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.CrossDrawableDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 4;
            break;
          }
          case 42: {
            net.rptools.maptool.server.proto.drawing.DrawnLabelDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 5) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.DrawnLabelDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.DrawnLabelDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.DrawnLabelDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 5;
            break;
          }
          case 50: {
            net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 6) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 6;
            break;
          }
          case 58: {
            net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 7) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.DrawablesGroupDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.DrawablesGroupDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 7;
            break;
          }
          case 66: {
            net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 8) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 8;
            break;
          }
          case 74: {
            net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 9) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.LineCellTemplateDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.LineCellTemplateDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 9;
            break;
          }
          case 82: {
            net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 10) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.RadiusTemplateDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.RadiusTemplateDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 10;
            break;
          }
          case 90: {
            net.rptools.maptool.server.proto.drawing.BurstTemplateDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 11) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.BurstTemplateDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.BurstTemplateDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.BurstTemplateDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 11;
            break;
          }
          case 98: {
            net.rptools.maptool.server.proto.drawing.ConeTemplateDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 12) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.ConeTemplateDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.ConeTemplateDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.ConeTemplateDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 12;
            break;
          }
          case 106: {
            net.rptools.maptool.server.proto.drawing.BlastTemplateDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 13) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.BlastTemplateDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.BlastTemplateDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.BlastTemplateDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 13;
            break;
          }
          case 114: {
            net.rptools.maptool.server.proto.drawing.LineTemplateDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 14) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.LineTemplateDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.LineTemplateDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.LineTemplateDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 14;
            break;
          }
          case 122: {
            net.rptools.maptool.server.proto.drawing.WallTemplateDto.Builder subBuilder = null;
            if (drawableTypeCase_ == 15) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.WallTemplateDto) drawableType_).toBuilder();
            }
            drawableType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.WallTemplateDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.WallTemplateDto) drawableType_);
              drawableType_ = subBuilder.buildPartial();
            }
            drawableTypeCase_ = 15;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_DrawableDto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_DrawableDto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            net.rptools.maptool.server.proto.drawing.DrawableDto.class, net.rptools.maptool.server.proto.drawing.DrawableDto.Builder.class);
  }

  private int drawableTypeCase_ = 0;
  private java.lang.Object drawableType_;
  public enum DrawableTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    SHAPE_DRAWABLE(1),
    RECTANGLE_DRAWABLE(2),
    OVAL_DRAWABLE(3),
    CROSS_DRAWABLE(4),
    DRAWN_LABEL(5),
    LINE_SEGMENT(6),
    DRAWABLES_GROUP(7),
    RADIUS_CELL_TEMPLATE(8),
    LINE_CELL_TEMPLATE(9),
    RADIUS_TEMPLATE(10),
    BURST_TEMPLATE(11),
    CONE_TEMPLATE(12),
    BLAST_TEMPLATE(13),
    LINE_TEMPLATE(14),
    WALL_TEMPLATE(15),
    DRAWABLETYPE_NOT_SET(0);
    private final int value;
    private DrawableTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DrawableTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static DrawableTypeCase forNumber(int value) {
      switch (value) {
        case 1: return SHAPE_DRAWABLE;
        case 2: return RECTANGLE_DRAWABLE;
        case 3: return OVAL_DRAWABLE;
        case 4: return CROSS_DRAWABLE;
        case 5: return DRAWN_LABEL;
        case 6: return LINE_SEGMENT;
        case 7: return DRAWABLES_GROUP;
        case 8: return RADIUS_CELL_TEMPLATE;
        case 9: return LINE_CELL_TEMPLATE;
        case 10: return RADIUS_TEMPLATE;
        case 11: return BURST_TEMPLATE;
        case 12: return CONE_TEMPLATE;
        case 13: return BLAST_TEMPLATE;
        case 14: return LINE_TEMPLATE;
        case 15: return WALL_TEMPLATE;
        case 0: return DRAWABLETYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public DrawableTypeCase
  getDrawableTypeCase() {
    return DrawableTypeCase.forNumber(
        drawableTypeCase_);
  }

  public static final int SHAPE_DRAWABLE_FIELD_NUMBER = 1;
  /**
   * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
   * @return Whether the shapeDrawable field is set.
   */
  @java.lang.Override
  public boolean hasShapeDrawable() {
    return drawableTypeCase_ == 1;
  }
  /**
   * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
   * @return The shapeDrawable.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.ShapeDrawableDto getShapeDrawable() {
    if (drawableTypeCase_ == 1) {
       return (net.rptools.maptool.server.proto.drawing.ShapeDrawableDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.ShapeDrawableDtoOrBuilder getShapeDrawableOrBuilder() {
    if (drawableTypeCase_ == 1) {
       return (net.rptools.maptool.server.proto.drawing.ShapeDrawableDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.getDefaultInstance();
  }

  public static final int RECTANGLE_DRAWABLE_FIELD_NUMBER = 2;
  /**
   * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
   * @return Whether the rectangleDrawable field is set.
   */
  @java.lang.Override
  public boolean hasRectangleDrawable() {
    return drawableTypeCase_ == 2;
  }
  /**
   * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
   * @return The rectangleDrawable.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.RectangleDrawableDto getRectangleDrawable() {
    if (drawableTypeCase_ == 2) {
       return (net.rptools.maptool.server.proto.drawing.RectangleDrawableDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.RectangleDrawableDtoOrBuilder getRectangleDrawableOrBuilder() {
    if (drawableTypeCase_ == 2) {
       return (net.rptools.maptool.server.proto.drawing.RectangleDrawableDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.getDefaultInstance();
  }

  public static final int OVAL_DRAWABLE_FIELD_NUMBER = 3;
  /**
   * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
   * @return Whether the ovalDrawable field is set.
   */
  @java.lang.Override
  public boolean hasOvalDrawable() {
    return drawableTypeCase_ == 3;
  }
  /**
   * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
   * @return The ovalDrawable.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.OvalDrawableDto getOvalDrawable() {
    if (drawableTypeCase_ == 3) {
       return (net.rptools.maptool.server.proto.drawing.OvalDrawableDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.OvalDrawableDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.OvalDrawableDtoOrBuilder getOvalDrawableOrBuilder() {
    if (drawableTypeCase_ == 3) {
       return (net.rptools.maptool.server.proto.drawing.OvalDrawableDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.OvalDrawableDto.getDefaultInstance();
  }

  public static final int CROSS_DRAWABLE_FIELD_NUMBER = 4;
  /**
   * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
   * @return Whether the crossDrawable field is set.
   */
  @java.lang.Override
  public boolean hasCrossDrawable() {
    return drawableTypeCase_ == 4;
  }
  /**
   * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
   * @return The crossDrawable.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.CrossDrawableDto getCrossDrawable() {
    if (drawableTypeCase_ == 4) {
       return (net.rptools.maptool.server.proto.drawing.CrossDrawableDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.CrossDrawableDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.CrossDrawableDtoOrBuilder getCrossDrawableOrBuilder() {
    if (drawableTypeCase_ == 4) {
       return (net.rptools.maptool.server.proto.drawing.CrossDrawableDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.CrossDrawableDto.getDefaultInstance();
  }

  public static final int DRAWN_LABEL_FIELD_NUMBER = 5;
  /**
   * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
   * @return Whether the drawnLabel field is set.
   */
  @java.lang.Override
  public boolean hasDrawnLabel() {
    return drawableTypeCase_ == 5;
  }
  /**
   * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
   * @return The drawnLabel.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawnLabelDto getDrawnLabel() {
    if (drawableTypeCase_ == 5) {
       return (net.rptools.maptool.server.proto.drawing.DrawnLabelDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.DrawnLabelDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawnLabelDtoOrBuilder getDrawnLabelOrBuilder() {
    if (drawableTypeCase_ == 5) {
       return (net.rptools.maptool.server.proto.drawing.DrawnLabelDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.DrawnLabelDto.getDefaultInstance();
  }

  public static final int LINE_SEGMENT_FIELD_NUMBER = 6;
  /**
   * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
   * @return Whether the lineSegment field is set.
   */
  @java.lang.Override
  public boolean hasLineSegment() {
    return drawableTypeCase_ == 6;
  }
  /**
   * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
   * @return The lineSegment.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto getLineSegment() {
    if (drawableTypeCase_ == 6) {
       return (net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDtoOrBuilder getLineSegmentOrBuilder() {
    if (drawableTypeCase_ == 6) {
       return (net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.getDefaultInstance();
  }

  public static final int DRAWABLES_GROUP_FIELD_NUMBER = 7;
  /**
   * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
   * @return Whether the drawablesGroup field is set.
   */
  @java.lang.Override
  public boolean hasDrawablesGroup() {
    return drawableTypeCase_ == 7;
  }
  /**
   * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
   * @return The drawablesGroup.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawablesGroupDto getDrawablesGroup() {
    if (drawableTypeCase_ == 7) {
       return (net.rptools.maptool.server.proto.drawing.DrawablesGroupDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawablesGroupDtoOrBuilder getDrawablesGroupOrBuilder() {
    if (drawableTypeCase_ == 7) {
       return (net.rptools.maptool.server.proto.drawing.DrawablesGroupDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.getDefaultInstance();
  }

  public static final int RADIUS_CELL_TEMPLATE_FIELD_NUMBER = 8;
  /**
   * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
   * @return Whether the radiusCellTemplate field is set.
   */
  @java.lang.Override
  public boolean hasRadiusCellTemplate() {
    return drawableTypeCase_ == 8;
  }
  /**
   * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
   * @return The radiusCellTemplate.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto getRadiusCellTemplate() {
    if (drawableTypeCase_ == 8) {
       return (net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDtoOrBuilder getRadiusCellTemplateOrBuilder() {
    if (drawableTypeCase_ == 8) {
       return (net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.getDefaultInstance();
  }

  public static final int LINE_CELL_TEMPLATE_FIELD_NUMBER = 9;
  /**
   * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
   * @return Whether the lineCellTemplate field is set.
   */
  @java.lang.Override
  public boolean hasLineCellTemplate() {
    return drawableTypeCase_ == 9;
  }
  /**
   * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
   * @return The lineCellTemplate.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.LineCellTemplateDto getLineCellTemplate() {
    if (drawableTypeCase_ == 9) {
       return (net.rptools.maptool.server.proto.drawing.LineCellTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.LineCellTemplateDtoOrBuilder getLineCellTemplateOrBuilder() {
    if (drawableTypeCase_ == 9) {
       return (net.rptools.maptool.server.proto.drawing.LineCellTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.getDefaultInstance();
  }

  public static final int RADIUS_TEMPLATE_FIELD_NUMBER = 10;
  /**
   * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
   * @return Whether the radiusTemplate field is set.
   */
  @java.lang.Override
  public boolean hasRadiusTemplate() {
    return drawableTypeCase_ == 10;
  }
  /**
   * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
   * @return The radiusTemplate.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.RadiusTemplateDto getRadiusTemplate() {
    if (drawableTypeCase_ == 10) {
       return (net.rptools.maptool.server.proto.drawing.RadiusTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.RadiusTemplateDtoOrBuilder getRadiusTemplateOrBuilder() {
    if (drawableTypeCase_ == 10) {
       return (net.rptools.maptool.server.proto.drawing.RadiusTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.getDefaultInstance();
  }

  public static final int BURST_TEMPLATE_FIELD_NUMBER = 11;
  /**
   * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
   * @return Whether the burstTemplate field is set.
   */
  @java.lang.Override
  public boolean hasBurstTemplate() {
    return drawableTypeCase_ == 11;
  }
  /**
   * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
   * @return The burstTemplate.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.BurstTemplateDto getBurstTemplate() {
    if (drawableTypeCase_ == 11) {
       return (net.rptools.maptool.server.proto.drawing.BurstTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.BurstTemplateDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.BurstTemplateDtoOrBuilder getBurstTemplateOrBuilder() {
    if (drawableTypeCase_ == 11) {
       return (net.rptools.maptool.server.proto.drawing.BurstTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.BurstTemplateDto.getDefaultInstance();
  }

  public static final int CONE_TEMPLATE_FIELD_NUMBER = 12;
  /**
   * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
   * @return Whether the coneTemplate field is set.
   */
  @java.lang.Override
  public boolean hasConeTemplate() {
    return drawableTypeCase_ == 12;
  }
  /**
   * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
   * @return The coneTemplate.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.ConeTemplateDto getConeTemplate() {
    if (drawableTypeCase_ == 12) {
       return (net.rptools.maptool.server.proto.drawing.ConeTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.ConeTemplateDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.ConeTemplateDtoOrBuilder getConeTemplateOrBuilder() {
    if (drawableTypeCase_ == 12) {
       return (net.rptools.maptool.server.proto.drawing.ConeTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.ConeTemplateDto.getDefaultInstance();
  }

  public static final int BLAST_TEMPLATE_FIELD_NUMBER = 13;
  /**
   * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
   * @return Whether the blastTemplate field is set.
   */
  @java.lang.Override
  public boolean hasBlastTemplate() {
    return drawableTypeCase_ == 13;
  }
  /**
   * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
   * @return The blastTemplate.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.BlastTemplateDto getBlastTemplate() {
    if (drawableTypeCase_ == 13) {
       return (net.rptools.maptool.server.proto.drawing.BlastTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.BlastTemplateDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.BlastTemplateDtoOrBuilder getBlastTemplateOrBuilder() {
    if (drawableTypeCase_ == 13) {
       return (net.rptools.maptool.server.proto.drawing.BlastTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.BlastTemplateDto.getDefaultInstance();
  }

  public static final int LINE_TEMPLATE_FIELD_NUMBER = 14;
  /**
   * <code>.maptool.LineTemplateDto line_template = 14;</code>
   * @return Whether the lineTemplate field is set.
   */
  @java.lang.Override
  public boolean hasLineTemplate() {
    return drawableTypeCase_ == 14;
  }
  /**
   * <code>.maptool.LineTemplateDto line_template = 14;</code>
   * @return The lineTemplate.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.LineTemplateDto getLineTemplate() {
    if (drawableTypeCase_ == 14) {
       return (net.rptools.maptool.server.proto.drawing.LineTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.LineTemplateDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.LineTemplateDto line_template = 14;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.LineTemplateDtoOrBuilder getLineTemplateOrBuilder() {
    if (drawableTypeCase_ == 14) {
       return (net.rptools.maptool.server.proto.drawing.LineTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.LineTemplateDto.getDefaultInstance();
  }

  public static final int WALL_TEMPLATE_FIELD_NUMBER = 15;
  /**
   * <code>.maptool.WallTemplateDto wall_template = 15;</code>
   * @return Whether the wallTemplate field is set.
   */
  @java.lang.Override
  public boolean hasWallTemplate() {
    return drawableTypeCase_ == 15;
  }
  /**
   * <code>.maptool.WallTemplateDto wall_template = 15;</code>
   * @return The wallTemplate.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.WallTemplateDto getWallTemplate() {
    if (drawableTypeCase_ == 15) {
       return (net.rptools.maptool.server.proto.drawing.WallTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.WallTemplateDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.WallTemplateDto wall_template = 15;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.WallTemplateDtoOrBuilder getWallTemplateOrBuilder() {
    if (drawableTypeCase_ == 15) {
       return (net.rptools.maptool.server.proto.drawing.WallTemplateDto) drawableType_;
    }
    return net.rptools.maptool.server.proto.drawing.WallTemplateDto.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (drawableTypeCase_ == 1) {
      output.writeMessage(1, (net.rptools.maptool.server.proto.drawing.ShapeDrawableDto) drawableType_);
    }
    if (drawableTypeCase_ == 2) {
      output.writeMessage(2, (net.rptools.maptool.server.proto.drawing.RectangleDrawableDto) drawableType_);
    }
    if (drawableTypeCase_ == 3) {
      output.writeMessage(3, (net.rptools.maptool.server.proto.drawing.OvalDrawableDto) drawableType_);
    }
    if (drawableTypeCase_ == 4) {
      output.writeMessage(4, (net.rptools.maptool.server.proto.drawing.CrossDrawableDto) drawableType_);
    }
    if (drawableTypeCase_ == 5) {
      output.writeMessage(5, (net.rptools.maptool.server.proto.drawing.DrawnLabelDto) drawableType_);
    }
    if (drawableTypeCase_ == 6) {
      output.writeMessage(6, (net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto) drawableType_);
    }
    if (drawableTypeCase_ == 7) {
      output.writeMessage(7, (net.rptools.maptool.server.proto.drawing.DrawablesGroupDto) drawableType_);
    }
    if (drawableTypeCase_ == 8) {
      output.writeMessage(8, (net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 9) {
      output.writeMessage(9, (net.rptools.maptool.server.proto.drawing.LineCellTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 10) {
      output.writeMessage(10, (net.rptools.maptool.server.proto.drawing.RadiusTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 11) {
      output.writeMessage(11, (net.rptools.maptool.server.proto.drawing.BurstTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 12) {
      output.writeMessage(12, (net.rptools.maptool.server.proto.drawing.ConeTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 13) {
      output.writeMessage(13, (net.rptools.maptool.server.proto.drawing.BlastTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 14) {
      output.writeMessage(14, (net.rptools.maptool.server.proto.drawing.LineTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 15) {
      output.writeMessage(15, (net.rptools.maptool.server.proto.drawing.WallTemplateDto) drawableType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (drawableTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (net.rptools.maptool.server.proto.drawing.ShapeDrawableDto) drawableType_);
    }
    if (drawableTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (net.rptools.maptool.server.proto.drawing.RectangleDrawableDto) drawableType_);
    }
    if (drawableTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (net.rptools.maptool.server.proto.drawing.OvalDrawableDto) drawableType_);
    }
    if (drawableTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (net.rptools.maptool.server.proto.drawing.CrossDrawableDto) drawableType_);
    }
    if (drawableTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (net.rptools.maptool.server.proto.drawing.DrawnLabelDto) drawableType_);
    }
    if (drawableTypeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto) drawableType_);
    }
    if (drawableTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (net.rptools.maptool.server.proto.drawing.DrawablesGroupDto) drawableType_);
    }
    if (drawableTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (net.rptools.maptool.server.proto.drawing.LineCellTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (net.rptools.maptool.server.proto.drawing.RadiusTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (net.rptools.maptool.server.proto.drawing.BurstTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (net.rptools.maptool.server.proto.drawing.ConeTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (net.rptools.maptool.server.proto.drawing.BlastTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (net.rptools.maptool.server.proto.drawing.LineTemplateDto) drawableType_);
    }
    if (drawableTypeCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (net.rptools.maptool.server.proto.drawing.WallTemplateDto) drawableType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof net.rptools.maptool.server.proto.drawing.DrawableDto)) {
      return super.equals(obj);
    }
    net.rptools.maptool.server.proto.drawing.DrawableDto other = (net.rptools.maptool.server.proto.drawing.DrawableDto) obj;

    if (!getDrawableTypeCase().equals(other.getDrawableTypeCase())) return false;
    switch (drawableTypeCase_) {
      case 1:
        if (!getShapeDrawable()
            .equals(other.getShapeDrawable())) return false;
        break;
      case 2:
        if (!getRectangleDrawable()
            .equals(other.getRectangleDrawable())) return false;
        break;
      case 3:
        if (!getOvalDrawable()
            .equals(other.getOvalDrawable())) return false;
        break;
      case 4:
        if (!getCrossDrawable()
            .equals(other.getCrossDrawable())) return false;
        break;
      case 5:
        if (!getDrawnLabel()
            .equals(other.getDrawnLabel())) return false;
        break;
      case 6:
        if (!getLineSegment()
            .equals(other.getLineSegment())) return false;
        break;
      case 7:
        if (!getDrawablesGroup()
            .equals(other.getDrawablesGroup())) return false;
        break;
      case 8:
        if (!getRadiusCellTemplate()
            .equals(other.getRadiusCellTemplate())) return false;
        break;
      case 9:
        if (!getLineCellTemplate()
            .equals(other.getLineCellTemplate())) return false;
        break;
      case 10:
        if (!getRadiusTemplate()
            .equals(other.getRadiusTemplate())) return false;
        break;
      case 11:
        if (!getBurstTemplate()
            .equals(other.getBurstTemplate())) return false;
        break;
      case 12:
        if (!getConeTemplate()
            .equals(other.getConeTemplate())) return false;
        break;
      case 13:
        if (!getBlastTemplate()
            .equals(other.getBlastTemplate())) return false;
        break;
      case 14:
        if (!getLineTemplate()
            .equals(other.getLineTemplate())) return false;
        break;
      case 15:
        if (!getWallTemplate()
            .equals(other.getWallTemplate())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (drawableTypeCase_) {
      case 1:
        hash = (37 * hash) + SHAPE_DRAWABLE_FIELD_NUMBER;
        hash = (53 * hash) + getShapeDrawable().hashCode();
        break;
      case 2:
        hash = (37 * hash) + RECTANGLE_DRAWABLE_FIELD_NUMBER;
        hash = (53 * hash) + getRectangleDrawable().hashCode();
        break;
      case 3:
        hash = (37 * hash) + OVAL_DRAWABLE_FIELD_NUMBER;
        hash = (53 * hash) + getOvalDrawable().hashCode();
        break;
      case 4:
        hash = (37 * hash) + CROSS_DRAWABLE_FIELD_NUMBER;
        hash = (53 * hash) + getCrossDrawable().hashCode();
        break;
      case 5:
        hash = (37 * hash) + DRAWN_LABEL_FIELD_NUMBER;
        hash = (53 * hash) + getDrawnLabel().hashCode();
        break;
      case 6:
        hash = (37 * hash) + LINE_SEGMENT_FIELD_NUMBER;
        hash = (53 * hash) + getLineSegment().hashCode();
        break;
      case 7:
        hash = (37 * hash) + DRAWABLES_GROUP_FIELD_NUMBER;
        hash = (53 * hash) + getDrawablesGroup().hashCode();
        break;
      case 8:
        hash = (37 * hash) + RADIUS_CELL_TEMPLATE_FIELD_NUMBER;
        hash = (53 * hash) + getRadiusCellTemplate().hashCode();
        break;
      case 9:
        hash = (37 * hash) + LINE_CELL_TEMPLATE_FIELD_NUMBER;
        hash = (53 * hash) + getLineCellTemplate().hashCode();
        break;
      case 10:
        hash = (37 * hash) + RADIUS_TEMPLATE_FIELD_NUMBER;
        hash = (53 * hash) + getRadiusTemplate().hashCode();
        break;
      case 11:
        hash = (37 * hash) + BURST_TEMPLATE_FIELD_NUMBER;
        hash = (53 * hash) + getBurstTemplate().hashCode();
        break;
      case 12:
        hash = (37 * hash) + CONE_TEMPLATE_FIELD_NUMBER;
        hash = (53 * hash) + getConeTemplate().hashCode();
        break;
      case 13:
        hash = (37 * hash) + BLAST_TEMPLATE_FIELD_NUMBER;
        hash = (53 * hash) + getBlastTemplate().hashCode();
        break;
      case 14:
        hash = (37 * hash) + LINE_TEMPLATE_FIELD_NUMBER;
        hash = (53 * hash) + getLineTemplate().hashCode();
        break;
      case 15:
        hash = (37 * hash) + WALL_TEMPLATE_FIELD_NUMBER;
        hash = (53 * hash) + getWallTemplate().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.DrawableDto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(net.rptools.maptool.server.proto.drawing.DrawableDto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code maptool.DrawableDto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maptool.DrawableDto)
      net.rptools.maptool.server.proto.drawing.DrawableDtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_DrawableDto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_DrawableDto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              net.rptools.maptool.server.proto.drawing.DrawableDto.class, net.rptools.maptool.server.proto.drawing.DrawableDto.Builder.class);
    }

    // Construct using net.rptools.maptool.server.proto.drawing.DrawableDto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      drawableTypeCase_ = 0;
      drawableType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_DrawableDto_descriptor;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.DrawableDto getDefaultInstanceForType() {
      return net.rptools.maptool.server.proto.drawing.DrawableDto.getDefaultInstance();
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.DrawableDto build() {
      net.rptools.maptool.server.proto.drawing.DrawableDto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.DrawableDto buildPartial() {
      net.rptools.maptool.server.proto.drawing.DrawableDto result = new net.rptools.maptool.server.proto.drawing.DrawableDto(this);
      if (drawableTypeCase_ == 1) {
        if (shapeDrawableBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = shapeDrawableBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 2) {
        if (rectangleDrawableBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = rectangleDrawableBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 3) {
        if (ovalDrawableBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = ovalDrawableBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 4) {
        if (crossDrawableBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = crossDrawableBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 5) {
        if (drawnLabelBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = drawnLabelBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 6) {
        if (lineSegmentBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = lineSegmentBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 7) {
        if (drawablesGroupBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = drawablesGroupBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 8) {
        if (radiusCellTemplateBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = radiusCellTemplateBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 9) {
        if (lineCellTemplateBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = lineCellTemplateBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 10) {
        if (radiusTemplateBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = radiusTemplateBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 11) {
        if (burstTemplateBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = burstTemplateBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 12) {
        if (coneTemplateBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = coneTemplateBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 13) {
        if (blastTemplateBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = blastTemplateBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 14) {
        if (lineTemplateBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = lineTemplateBuilder_.build();
        }
      }
      if (drawableTypeCase_ == 15) {
        if (wallTemplateBuilder_ == null) {
          result.drawableType_ = drawableType_;
        } else {
          result.drawableType_ = wallTemplateBuilder_.build();
        }
      }
      result.drawableTypeCase_ = drawableTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof net.rptools.maptool.server.proto.drawing.DrawableDto) {
        return mergeFrom((net.rptools.maptool.server.proto.drawing.DrawableDto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(net.rptools.maptool.server.proto.drawing.DrawableDto other) {
      if (other == net.rptools.maptool.server.proto.drawing.DrawableDto.getDefaultInstance()) return this;
      switch (other.getDrawableTypeCase()) {
        case SHAPE_DRAWABLE: {
          mergeShapeDrawable(other.getShapeDrawable());
          break;
        }
        case RECTANGLE_DRAWABLE: {
          mergeRectangleDrawable(other.getRectangleDrawable());
          break;
        }
        case OVAL_DRAWABLE: {
          mergeOvalDrawable(other.getOvalDrawable());
          break;
        }
        case CROSS_DRAWABLE: {
          mergeCrossDrawable(other.getCrossDrawable());
          break;
        }
        case DRAWN_LABEL: {
          mergeDrawnLabel(other.getDrawnLabel());
          break;
        }
        case LINE_SEGMENT: {
          mergeLineSegment(other.getLineSegment());
          break;
        }
        case DRAWABLES_GROUP: {
          mergeDrawablesGroup(other.getDrawablesGroup());
          break;
        }
        case RADIUS_CELL_TEMPLATE: {
          mergeRadiusCellTemplate(other.getRadiusCellTemplate());
          break;
        }
        case LINE_CELL_TEMPLATE: {
          mergeLineCellTemplate(other.getLineCellTemplate());
          break;
        }
        case RADIUS_TEMPLATE: {
          mergeRadiusTemplate(other.getRadiusTemplate());
          break;
        }
        case BURST_TEMPLATE: {
          mergeBurstTemplate(other.getBurstTemplate());
          break;
        }
        case CONE_TEMPLATE: {
          mergeConeTemplate(other.getConeTemplate());
          break;
        }
        case BLAST_TEMPLATE: {
          mergeBlastTemplate(other.getBlastTemplate());
          break;
        }
        case LINE_TEMPLATE: {
          mergeLineTemplate(other.getLineTemplate());
          break;
        }
        case WALL_TEMPLATE: {
          mergeWallTemplate(other.getWallTemplate());
          break;
        }
        case DRAWABLETYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      net.rptools.maptool.server.proto.drawing.DrawableDto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (net.rptools.maptool.server.proto.drawing.DrawableDto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int drawableTypeCase_ = 0;
    private java.lang.Object drawableType_;
    public DrawableTypeCase
        getDrawableTypeCase() {
      return DrawableTypeCase.forNumber(
          drawableTypeCase_);
    }

    public Builder clearDrawableType() {
      drawableTypeCase_ = 0;
      drawableType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.ShapeDrawableDto, net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.ShapeDrawableDtoOrBuilder> shapeDrawableBuilder_;
    /**
     * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
     * @return Whether the shapeDrawable field is set.
     */
    @java.lang.Override
    public boolean hasShapeDrawable() {
      return drawableTypeCase_ == 1;
    }
    /**
     * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
     * @return The shapeDrawable.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.ShapeDrawableDto getShapeDrawable() {
      if (shapeDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 1) {
          return (net.rptools.maptool.server.proto.drawing.ShapeDrawableDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 1) {
          return shapeDrawableBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
     */
    public Builder setShapeDrawable(net.rptools.maptool.server.proto.drawing.ShapeDrawableDto value) {
      if (shapeDrawableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        shapeDrawableBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
     */
    public Builder setShapeDrawable(
        net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.Builder builderForValue) {
      if (shapeDrawableBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        shapeDrawableBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
     */
    public Builder mergeShapeDrawable(net.rptools.maptool.server.proto.drawing.ShapeDrawableDto value) {
      if (shapeDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 1 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.newBuilder((net.rptools.maptool.server.proto.drawing.ShapeDrawableDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 1) {
          shapeDrawableBuilder_.mergeFrom(value);
        } else {
          shapeDrawableBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
     */
    public Builder clearShapeDrawable() {
      if (shapeDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 1) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 1) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        shapeDrawableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
     */
    public net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.Builder getShapeDrawableBuilder() {
      return getShapeDrawableFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.ShapeDrawableDtoOrBuilder getShapeDrawableOrBuilder() {
      if ((drawableTypeCase_ == 1) && (shapeDrawableBuilder_ != null)) {
        return shapeDrawableBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 1) {
          return (net.rptools.maptool.server.proto.drawing.ShapeDrawableDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.ShapeDrawableDto shape_drawable = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.ShapeDrawableDto, net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.ShapeDrawableDtoOrBuilder> 
        getShapeDrawableFieldBuilder() {
      if (shapeDrawableBuilder_ == null) {
        if (!(drawableTypeCase_ == 1)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.getDefaultInstance();
        }
        shapeDrawableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.ShapeDrawableDto, net.rptools.maptool.server.proto.drawing.ShapeDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.ShapeDrawableDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.ShapeDrawableDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 1;
      onChanged();;
      return shapeDrawableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.RectangleDrawableDto, net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.RectangleDrawableDtoOrBuilder> rectangleDrawableBuilder_;
    /**
     * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
     * @return Whether the rectangleDrawable field is set.
     */
    @java.lang.Override
    public boolean hasRectangleDrawable() {
      return drawableTypeCase_ == 2;
    }
    /**
     * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
     * @return The rectangleDrawable.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.RectangleDrawableDto getRectangleDrawable() {
      if (rectangleDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 2) {
          return (net.rptools.maptool.server.proto.drawing.RectangleDrawableDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 2) {
          return rectangleDrawableBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
     */
    public Builder setRectangleDrawable(net.rptools.maptool.server.proto.drawing.RectangleDrawableDto value) {
      if (rectangleDrawableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        rectangleDrawableBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
     */
    public Builder setRectangleDrawable(
        net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.Builder builderForValue) {
      if (rectangleDrawableBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        rectangleDrawableBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
     */
    public Builder mergeRectangleDrawable(net.rptools.maptool.server.proto.drawing.RectangleDrawableDto value) {
      if (rectangleDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 2 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.newBuilder((net.rptools.maptool.server.proto.drawing.RectangleDrawableDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 2) {
          rectangleDrawableBuilder_.mergeFrom(value);
        } else {
          rectangleDrawableBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
     */
    public Builder clearRectangleDrawable() {
      if (rectangleDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 2) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 2) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        rectangleDrawableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
     */
    public net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.Builder getRectangleDrawableBuilder() {
      return getRectangleDrawableFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.RectangleDrawableDtoOrBuilder getRectangleDrawableOrBuilder() {
      if ((drawableTypeCase_ == 2) && (rectangleDrawableBuilder_ != null)) {
        return rectangleDrawableBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 2) {
          return (net.rptools.maptool.server.proto.drawing.RectangleDrawableDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.RectangleDrawableDto rectangle_drawable = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.RectangleDrawableDto, net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.RectangleDrawableDtoOrBuilder> 
        getRectangleDrawableFieldBuilder() {
      if (rectangleDrawableBuilder_ == null) {
        if (!(drawableTypeCase_ == 2)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.getDefaultInstance();
        }
        rectangleDrawableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.RectangleDrawableDto, net.rptools.maptool.server.proto.drawing.RectangleDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.RectangleDrawableDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.RectangleDrawableDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 2;
      onChanged();;
      return rectangleDrawableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.OvalDrawableDto, net.rptools.maptool.server.proto.drawing.OvalDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.OvalDrawableDtoOrBuilder> ovalDrawableBuilder_;
    /**
     * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
     * @return Whether the ovalDrawable field is set.
     */
    @java.lang.Override
    public boolean hasOvalDrawable() {
      return drawableTypeCase_ == 3;
    }
    /**
     * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
     * @return The ovalDrawable.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.OvalDrawableDto getOvalDrawable() {
      if (ovalDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 3) {
          return (net.rptools.maptool.server.proto.drawing.OvalDrawableDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.OvalDrawableDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 3) {
          return ovalDrawableBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.OvalDrawableDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
     */
    public Builder setOvalDrawable(net.rptools.maptool.server.proto.drawing.OvalDrawableDto value) {
      if (ovalDrawableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        ovalDrawableBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
     */
    public Builder setOvalDrawable(
        net.rptools.maptool.server.proto.drawing.OvalDrawableDto.Builder builderForValue) {
      if (ovalDrawableBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        ovalDrawableBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
     */
    public Builder mergeOvalDrawable(net.rptools.maptool.server.proto.drawing.OvalDrawableDto value) {
      if (ovalDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 3 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.OvalDrawableDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.OvalDrawableDto.newBuilder((net.rptools.maptool.server.proto.drawing.OvalDrawableDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 3) {
          ovalDrawableBuilder_.mergeFrom(value);
        } else {
          ovalDrawableBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
     */
    public Builder clearOvalDrawable() {
      if (ovalDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 3) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 3) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        ovalDrawableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
     */
    public net.rptools.maptool.server.proto.drawing.OvalDrawableDto.Builder getOvalDrawableBuilder() {
      return getOvalDrawableFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.OvalDrawableDtoOrBuilder getOvalDrawableOrBuilder() {
      if ((drawableTypeCase_ == 3) && (ovalDrawableBuilder_ != null)) {
        return ovalDrawableBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 3) {
          return (net.rptools.maptool.server.proto.drawing.OvalDrawableDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.OvalDrawableDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.OvalDrawableDto oval_drawable = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.OvalDrawableDto, net.rptools.maptool.server.proto.drawing.OvalDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.OvalDrawableDtoOrBuilder> 
        getOvalDrawableFieldBuilder() {
      if (ovalDrawableBuilder_ == null) {
        if (!(drawableTypeCase_ == 3)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.OvalDrawableDto.getDefaultInstance();
        }
        ovalDrawableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.OvalDrawableDto, net.rptools.maptool.server.proto.drawing.OvalDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.OvalDrawableDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.OvalDrawableDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 3;
      onChanged();;
      return ovalDrawableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.CrossDrawableDto, net.rptools.maptool.server.proto.drawing.CrossDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.CrossDrawableDtoOrBuilder> crossDrawableBuilder_;
    /**
     * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
     * @return Whether the crossDrawable field is set.
     */
    @java.lang.Override
    public boolean hasCrossDrawable() {
      return drawableTypeCase_ == 4;
    }
    /**
     * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
     * @return The crossDrawable.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.CrossDrawableDto getCrossDrawable() {
      if (crossDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 4) {
          return (net.rptools.maptool.server.proto.drawing.CrossDrawableDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.CrossDrawableDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 4) {
          return crossDrawableBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.CrossDrawableDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
     */
    public Builder setCrossDrawable(net.rptools.maptool.server.proto.drawing.CrossDrawableDto value) {
      if (crossDrawableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        crossDrawableBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
     */
    public Builder setCrossDrawable(
        net.rptools.maptool.server.proto.drawing.CrossDrawableDto.Builder builderForValue) {
      if (crossDrawableBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        crossDrawableBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
     */
    public Builder mergeCrossDrawable(net.rptools.maptool.server.proto.drawing.CrossDrawableDto value) {
      if (crossDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 4 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.CrossDrawableDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.CrossDrawableDto.newBuilder((net.rptools.maptool.server.proto.drawing.CrossDrawableDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 4) {
          crossDrawableBuilder_.mergeFrom(value);
        } else {
          crossDrawableBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
     */
    public Builder clearCrossDrawable() {
      if (crossDrawableBuilder_ == null) {
        if (drawableTypeCase_ == 4) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 4) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        crossDrawableBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
     */
    public net.rptools.maptool.server.proto.drawing.CrossDrawableDto.Builder getCrossDrawableBuilder() {
      return getCrossDrawableFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.CrossDrawableDtoOrBuilder getCrossDrawableOrBuilder() {
      if ((drawableTypeCase_ == 4) && (crossDrawableBuilder_ != null)) {
        return crossDrawableBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 4) {
          return (net.rptools.maptool.server.proto.drawing.CrossDrawableDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.CrossDrawableDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.CrossDrawableDto cross_drawable = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.CrossDrawableDto, net.rptools.maptool.server.proto.drawing.CrossDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.CrossDrawableDtoOrBuilder> 
        getCrossDrawableFieldBuilder() {
      if (crossDrawableBuilder_ == null) {
        if (!(drawableTypeCase_ == 4)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.CrossDrawableDto.getDefaultInstance();
        }
        crossDrawableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.CrossDrawableDto, net.rptools.maptool.server.proto.drawing.CrossDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.CrossDrawableDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.CrossDrawableDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 4;
      onChanged();;
      return crossDrawableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.DrawnLabelDto, net.rptools.maptool.server.proto.drawing.DrawnLabelDto.Builder, net.rptools.maptool.server.proto.drawing.DrawnLabelDtoOrBuilder> drawnLabelBuilder_;
    /**
     * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
     * @return Whether the drawnLabel field is set.
     */
    @java.lang.Override
    public boolean hasDrawnLabel() {
      return drawableTypeCase_ == 5;
    }
    /**
     * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
     * @return The drawnLabel.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.DrawnLabelDto getDrawnLabel() {
      if (drawnLabelBuilder_ == null) {
        if (drawableTypeCase_ == 5) {
          return (net.rptools.maptool.server.proto.drawing.DrawnLabelDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.DrawnLabelDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 5) {
          return drawnLabelBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.DrawnLabelDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
     */
    public Builder setDrawnLabel(net.rptools.maptool.server.proto.drawing.DrawnLabelDto value) {
      if (drawnLabelBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        drawnLabelBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
     */
    public Builder setDrawnLabel(
        net.rptools.maptool.server.proto.drawing.DrawnLabelDto.Builder builderForValue) {
      if (drawnLabelBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        drawnLabelBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
     */
    public Builder mergeDrawnLabel(net.rptools.maptool.server.proto.drawing.DrawnLabelDto value) {
      if (drawnLabelBuilder_ == null) {
        if (drawableTypeCase_ == 5 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.DrawnLabelDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.DrawnLabelDto.newBuilder((net.rptools.maptool.server.proto.drawing.DrawnLabelDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 5) {
          drawnLabelBuilder_.mergeFrom(value);
        } else {
          drawnLabelBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
     */
    public Builder clearDrawnLabel() {
      if (drawnLabelBuilder_ == null) {
        if (drawableTypeCase_ == 5) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 5) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        drawnLabelBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
     */
    public net.rptools.maptool.server.proto.drawing.DrawnLabelDto.Builder getDrawnLabelBuilder() {
      return getDrawnLabelFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.DrawnLabelDtoOrBuilder getDrawnLabelOrBuilder() {
      if ((drawableTypeCase_ == 5) && (drawnLabelBuilder_ != null)) {
        return drawnLabelBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 5) {
          return (net.rptools.maptool.server.proto.drawing.DrawnLabelDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.DrawnLabelDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.DrawnLabelDto drawn_label = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.DrawnLabelDto, net.rptools.maptool.server.proto.drawing.DrawnLabelDto.Builder, net.rptools.maptool.server.proto.drawing.DrawnLabelDtoOrBuilder> 
        getDrawnLabelFieldBuilder() {
      if (drawnLabelBuilder_ == null) {
        if (!(drawableTypeCase_ == 5)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.DrawnLabelDto.getDefaultInstance();
        }
        drawnLabelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.DrawnLabelDto, net.rptools.maptool.server.proto.drawing.DrawnLabelDto.Builder, net.rptools.maptool.server.proto.drawing.DrawnLabelDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.DrawnLabelDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 5;
      onChanged();;
      return drawnLabelBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto, net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDtoOrBuilder> lineSegmentBuilder_;
    /**
     * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
     * @return Whether the lineSegment field is set.
     */
    @java.lang.Override
    public boolean hasLineSegment() {
      return drawableTypeCase_ == 6;
    }
    /**
     * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
     * @return The lineSegment.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto getLineSegment() {
      if (lineSegmentBuilder_ == null) {
        if (drawableTypeCase_ == 6) {
          return (net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 6) {
          return lineSegmentBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
     */
    public Builder setLineSegment(net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto value) {
      if (lineSegmentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        lineSegmentBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
     */
    public Builder setLineSegment(
        net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.Builder builderForValue) {
      if (lineSegmentBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        lineSegmentBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
     */
    public Builder mergeLineSegment(net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto value) {
      if (lineSegmentBuilder_ == null) {
        if (drawableTypeCase_ == 6 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.newBuilder((net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 6) {
          lineSegmentBuilder_.mergeFrom(value);
        } else {
          lineSegmentBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 6;
      return this;
    }
    /**
     * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
     */
    public Builder clearLineSegment() {
      if (lineSegmentBuilder_ == null) {
        if (drawableTypeCase_ == 6) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 6) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        lineSegmentBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
     */
    public net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.Builder getLineSegmentBuilder() {
      return getLineSegmentFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDtoOrBuilder getLineSegmentOrBuilder() {
      if ((drawableTypeCase_ == 6) && (lineSegmentBuilder_ != null)) {
        return lineSegmentBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 6) {
          return (net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.LineSegmentDrawableDto line_segment = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto, net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDtoOrBuilder> 
        getLineSegmentFieldBuilder() {
      if (lineSegmentBuilder_ == null) {
        if (!(drawableTypeCase_ == 6)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.getDefaultInstance();
        }
        lineSegmentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto, net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto.Builder, net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.LineSegmentDrawableDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 6;
      onChanged();;
      return lineSegmentBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.DrawablesGroupDto, net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablesGroupDtoOrBuilder> drawablesGroupBuilder_;
    /**
     * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
     * @return Whether the drawablesGroup field is set.
     */
    @java.lang.Override
    public boolean hasDrawablesGroup() {
      return drawableTypeCase_ == 7;
    }
    /**
     * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
     * @return The drawablesGroup.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.DrawablesGroupDto getDrawablesGroup() {
      if (drawablesGroupBuilder_ == null) {
        if (drawableTypeCase_ == 7) {
          return (net.rptools.maptool.server.proto.drawing.DrawablesGroupDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 7) {
          return drawablesGroupBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
     */
    public Builder setDrawablesGroup(net.rptools.maptool.server.proto.drawing.DrawablesGroupDto value) {
      if (drawablesGroupBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        drawablesGroupBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
     */
    public Builder setDrawablesGroup(
        net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.Builder builderForValue) {
      if (drawablesGroupBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        drawablesGroupBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
     */
    public Builder mergeDrawablesGroup(net.rptools.maptool.server.proto.drawing.DrawablesGroupDto value) {
      if (drawablesGroupBuilder_ == null) {
        if (drawableTypeCase_ == 7 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.newBuilder((net.rptools.maptool.server.proto.drawing.DrawablesGroupDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 7) {
          drawablesGroupBuilder_.mergeFrom(value);
        } else {
          drawablesGroupBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 7;
      return this;
    }
    /**
     * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
     */
    public Builder clearDrawablesGroup() {
      if (drawablesGroupBuilder_ == null) {
        if (drawableTypeCase_ == 7) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 7) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        drawablesGroupBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
     */
    public net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.Builder getDrawablesGroupBuilder() {
      return getDrawablesGroupFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.DrawablesGroupDtoOrBuilder getDrawablesGroupOrBuilder() {
      if ((drawableTypeCase_ == 7) && (drawablesGroupBuilder_ != null)) {
        return drawablesGroupBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 7) {
          return (net.rptools.maptool.server.proto.drawing.DrawablesGroupDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.DrawablesGroupDto drawables_group = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.DrawablesGroupDto, net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablesGroupDtoOrBuilder> 
        getDrawablesGroupFieldBuilder() {
      if (drawablesGroupBuilder_ == null) {
        if (!(drawableTypeCase_ == 7)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.getDefaultInstance();
        }
        drawablesGroupBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.DrawablesGroupDto, net.rptools.maptool.server.proto.drawing.DrawablesGroupDto.Builder, net.rptools.maptool.server.proto.drawing.DrawablesGroupDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.DrawablesGroupDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 7;
      onChanged();;
      return drawablesGroupBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto, net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDtoOrBuilder> radiusCellTemplateBuilder_;
    /**
     * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
     * @return Whether the radiusCellTemplate field is set.
     */
    @java.lang.Override
    public boolean hasRadiusCellTemplate() {
      return drawableTypeCase_ == 8;
    }
    /**
     * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
     * @return The radiusCellTemplate.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto getRadiusCellTemplate() {
      if (radiusCellTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 8) {
          return (net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 8) {
          return radiusCellTemplateBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
     */
    public Builder setRadiusCellTemplate(net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto value) {
      if (radiusCellTemplateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        radiusCellTemplateBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
     */
    public Builder setRadiusCellTemplate(
        net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.Builder builderForValue) {
      if (radiusCellTemplateBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        radiusCellTemplateBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
     */
    public Builder mergeRadiusCellTemplate(net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto value) {
      if (radiusCellTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 8 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.newBuilder((net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 8) {
          radiusCellTemplateBuilder_.mergeFrom(value);
        } else {
          radiusCellTemplateBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 8;
      return this;
    }
    /**
     * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
     */
    public Builder clearRadiusCellTemplate() {
      if (radiusCellTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 8) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 8) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        radiusCellTemplateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
     */
    public net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.Builder getRadiusCellTemplateBuilder() {
      return getRadiusCellTemplateFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDtoOrBuilder getRadiusCellTemplateOrBuilder() {
      if ((drawableTypeCase_ == 8) && (radiusCellTemplateBuilder_ != null)) {
        return radiusCellTemplateBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 8) {
          return (net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.RadiusCellTemplateDto radius_cell_template = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto, net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDtoOrBuilder> 
        getRadiusCellTemplateFieldBuilder() {
      if (radiusCellTemplateBuilder_ == null) {
        if (!(drawableTypeCase_ == 8)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.getDefaultInstance();
        }
        radiusCellTemplateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto, net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.RadiusCellTemplateDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 8;
      onChanged();;
      return radiusCellTemplateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.LineCellTemplateDto, net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.LineCellTemplateDtoOrBuilder> lineCellTemplateBuilder_;
    /**
     * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
     * @return Whether the lineCellTemplate field is set.
     */
    @java.lang.Override
    public boolean hasLineCellTemplate() {
      return drawableTypeCase_ == 9;
    }
    /**
     * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
     * @return The lineCellTemplate.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.LineCellTemplateDto getLineCellTemplate() {
      if (lineCellTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 9) {
          return (net.rptools.maptool.server.proto.drawing.LineCellTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 9) {
          return lineCellTemplateBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
     */
    public Builder setLineCellTemplate(net.rptools.maptool.server.proto.drawing.LineCellTemplateDto value) {
      if (lineCellTemplateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        lineCellTemplateBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
     */
    public Builder setLineCellTemplate(
        net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.Builder builderForValue) {
      if (lineCellTemplateBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        lineCellTemplateBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
     */
    public Builder mergeLineCellTemplate(net.rptools.maptool.server.proto.drawing.LineCellTemplateDto value) {
      if (lineCellTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 9 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.newBuilder((net.rptools.maptool.server.proto.drawing.LineCellTemplateDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 9) {
          lineCellTemplateBuilder_.mergeFrom(value);
        } else {
          lineCellTemplateBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 9;
      return this;
    }
    /**
     * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
     */
    public Builder clearLineCellTemplate() {
      if (lineCellTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 9) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 9) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        lineCellTemplateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
     */
    public net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.Builder getLineCellTemplateBuilder() {
      return getLineCellTemplateFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.LineCellTemplateDtoOrBuilder getLineCellTemplateOrBuilder() {
      if ((drawableTypeCase_ == 9) && (lineCellTemplateBuilder_ != null)) {
        return lineCellTemplateBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 9) {
          return (net.rptools.maptool.server.proto.drawing.LineCellTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.LineCellTemplateDto line_cell_template = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.LineCellTemplateDto, net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.LineCellTemplateDtoOrBuilder> 
        getLineCellTemplateFieldBuilder() {
      if (lineCellTemplateBuilder_ == null) {
        if (!(drawableTypeCase_ == 9)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.getDefaultInstance();
        }
        lineCellTemplateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.LineCellTemplateDto, net.rptools.maptool.server.proto.drawing.LineCellTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.LineCellTemplateDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.LineCellTemplateDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 9;
      onChanged();;
      return lineCellTemplateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.RadiusTemplateDto, net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.RadiusTemplateDtoOrBuilder> radiusTemplateBuilder_;
    /**
     * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
     * @return Whether the radiusTemplate field is set.
     */
    @java.lang.Override
    public boolean hasRadiusTemplate() {
      return drawableTypeCase_ == 10;
    }
    /**
     * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
     * @return The radiusTemplate.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.RadiusTemplateDto getRadiusTemplate() {
      if (radiusTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 10) {
          return (net.rptools.maptool.server.proto.drawing.RadiusTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 10) {
          return radiusTemplateBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
     */
    public Builder setRadiusTemplate(net.rptools.maptool.server.proto.drawing.RadiusTemplateDto value) {
      if (radiusTemplateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        radiusTemplateBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
     */
    public Builder setRadiusTemplate(
        net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.Builder builderForValue) {
      if (radiusTemplateBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        radiusTemplateBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
     */
    public Builder mergeRadiusTemplate(net.rptools.maptool.server.proto.drawing.RadiusTemplateDto value) {
      if (radiusTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 10 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.newBuilder((net.rptools.maptool.server.proto.drawing.RadiusTemplateDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 10) {
          radiusTemplateBuilder_.mergeFrom(value);
        } else {
          radiusTemplateBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 10;
      return this;
    }
    /**
     * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
     */
    public Builder clearRadiusTemplate() {
      if (radiusTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 10) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 10) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        radiusTemplateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
     */
    public net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.Builder getRadiusTemplateBuilder() {
      return getRadiusTemplateFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.RadiusTemplateDtoOrBuilder getRadiusTemplateOrBuilder() {
      if ((drawableTypeCase_ == 10) && (radiusTemplateBuilder_ != null)) {
        return radiusTemplateBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 10) {
          return (net.rptools.maptool.server.proto.drawing.RadiusTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.RadiusTemplateDto radius_template = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.RadiusTemplateDto, net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.RadiusTemplateDtoOrBuilder> 
        getRadiusTemplateFieldBuilder() {
      if (radiusTemplateBuilder_ == null) {
        if (!(drawableTypeCase_ == 10)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.getDefaultInstance();
        }
        radiusTemplateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.RadiusTemplateDto, net.rptools.maptool.server.proto.drawing.RadiusTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.RadiusTemplateDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.RadiusTemplateDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 10;
      onChanged();;
      return radiusTemplateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.BurstTemplateDto, net.rptools.maptool.server.proto.drawing.BurstTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.BurstTemplateDtoOrBuilder> burstTemplateBuilder_;
    /**
     * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
     * @return Whether the burstTemplate field is set.
     */
    @java.lang.Override
    public boolean hasBurstTemplate() {
      return drawableTypeCase_ == 11;
    }
    /**
     * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
     * @return The burstTemplate.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.BurstTemplateDto getBurstTemplate() {
      if (burstTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 11) {
          return (net.rptools.maptool.server.proto.drawing.BurstTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.BurstTemplateDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 11) {
          return burstTemplateBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.BurstTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
     */
    public Builder setBurstTemplate(net.rptools.maptool.server.proto.drawing.BurstTemplateDto value) {
      if (burstTemplateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        burstTemplateBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
     */
    public Builder setBurstTemplate(
        net.rptools.maptool.server.proto.drawing.BurstTemplateDto.Builder builderForValue) {
      if (burstTemplateBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        burstTemplateBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
     */
    public Builder mergeBurstTemplate(net.rptools.maptool.server.proto.drawing.BurstTemplateDto value) {
      if (burstTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 11 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.BurstTemplateDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.BurstTemplateDto.newBuilder((net.rptools.maptool.server.proto.drawing.BurstTemplateDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 11) {
          burstTemplateBuilder_.mergeFrom(value);
        } else {
          burstTemplateBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 11;
      return this;
    }
    /**
     * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
     */
    public Builder clearBurstTemplate() {
      if (burstTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 11) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 11) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        burstTemplateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
     */
    public net.rptools.maptool.server.proto.drawing.BurstTemplateDto.Builder getBurstTemplateBuilder() {
      return getBurstTemplateFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.BurstTemplateDtoOrBuilder getBurstTemplateOrBuilder() {
      if ((drawableTypeCase_ == 11) && (burstTemplateBuilder_ != null)) {
        return burstTemplateBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 11) {
          return (net.rptools.maptool.server.proto.drawing.BurstTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.BurstTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.BurstTemplateDto burst_template = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.BurstTemplateDto, net.rptools.maptool.server.proto.drawing.BurstTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.BurstTemplateDtoOrBuilder> 
        getBurstTemplateFieldBuilder() {
      if (burstTemplateBuilder_ == null) {
        if (!(drawableTypeCase_ == 11)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.BurstTemplateDto.getDefaultInstance();
        }
        burstTemplateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.BurstTemplateDto, net.rptools.maptool.server.proto.drawing.BurstTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.BurstTemplateDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.BurstTemplateDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 11;
      onChanged();;
      return burstTemplateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.ConeTemplateDto, net.rptools.maptool.server.proto.drawing.ConeTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.ConeTemplateDtoOrBuilder> coneTemplateBuilder_;
    /**
     * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
     * @return Whether the coneTemplate field is set.
     */
    @java.lang.Override
    public boolean hasConeTemplate() {
      return drawableTypeCase_ == 12;
    }
    /**
     * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
     * @return The coneTemplate.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.ConeTemplateDto getConeTemplate() {
      if (coneTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 12) {
          return (net.rptools.maptool.server.proto.drawing.ConeTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.ConeTemplateDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 12) {
          return coneTemplateBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.ConeTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
     */
    public Builder setConeTemplate(net.rptools.maptool.server.proto.drawing.ConeTemplateDto value) {
      if (coneTemplateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        coneTemplateBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
     */
    public Builder setConeTemplate(
        net.rptools.maptool.server.proto.drawing.ConeTemplateDto.Builder builderForValue) {
      if (coneTemplateBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        coneTemplateBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
     */
    public Builder mergeConeTemplate(net.rptools.maptool.server.proto.drawing.ConeTemplateDto value) {
      if (coneTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 12 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.ConeTemplateDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.ConeTemplateDto.newBuilder((net.rptools.maptool.server.proto.drawing.ConeTemplateDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 12) {
          coneTemplateBuilder_.mergeFrom(value);
        } else {
          coneTemplateBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 12;
      return this;
    }
    /**
     * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
     */
    public Builder clearConeTemplate() {
      if (coneTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 12) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 12) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        coneTemplateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
     */
    public net.rptools.maptool.server.proto.drawing.ConeTemplateDto.Builder getConeTemplateBuilder() {
      return getConeTemplateFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.ConeTemplateDtoOrBuilder getConeTemplateOrBuilder() {
      if ((drawableTypeCase_ == 12) && (coneTemplateBuilder_ != null)) {
        return coneTemplateBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 12) {
          return (net.rptools.maptool.server.proto.drawing.ConeTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.ConeTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.ConeTemplateDto cone_template = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.ConeTemplateDto, net.rptools.maptool.server.proto.drawing.ConeTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.ConeTemplateDtoOrBuilder> 
        getConeTemplateFieldBuilder() {
      if (coneTemplateBuilder_ == null) {
        if (!(drawableTypeCase_ == 12)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.ConeTemplateDto.getDefaultInstance();
        }
        coneTemplateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.ConeTemplateDto, net.rptools.maptool.server.proto.drawing.ConeTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.ConeTemplateDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.ConeTemplateDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 12;
      onChanged();;
      return coneTemplateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.BlastTemplateDto, net.rptools.maptool.server.proto.drawing.BlastTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.BlastTemplateDtoOrBuilder> blastTemplateBuilder_;
    /**
     * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
     * @return Whether the blastTemplate field is set.
     */
    @java.lang.Override
    public boolean hasBlastTemplate() {
      return drawableTypeCase_ == 13;
    }
    /**
     * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
     * @return The blastTemplate.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.BlastTemplateDto getBlastTemplate() {
      if (blastTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 13) {
          return (net.rptools.maptool.server.proto.drawing.BlastTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.BlastTemplateDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 13) {
          return blastTemplateBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.BlastTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
     */
    public Builder setBlastTemplate(net.rptools.maptool.server.proto.drawing.BlastTemplateDto value) {
      if (blastTemplateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        blastTemplateBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
     */
    public Builder setBlastTemplate(
        net.rptools.maptool.server.proto.drawing.BlastTemplateDto.Builder builderForValue) {
      if (blastTemplateBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        blastTemplateBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
     */
    public Builder mergeBlastTemplate(net.rptools.maptool.server.proto.drawing.BlastTemplateDto value) {
      if (blastTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 13 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.BlastTemplateDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.BlastTemplateDto.newBuilder((net.rptools.maptool.server.proto.drawing.BlastTemplateDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 13) {
          blastTemplateBuilder_.mergeFrom(value);
        } else {
          blastTemplateBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 13;
      return this;
    }
    /**
     * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
     */
    public Builder clearBlastTemplate() {
      if (blastTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 13) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 13) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        blastTemplateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
     */
    public net.rptools.maptool.server.proto.drawing.BlastTemplateDto.Builder getBlastTemplateBuilder() {
      return getBlastTemplateFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.BlastTemplateDtoOrBuilder getBlastTemplateOrBuilder() {
      if ((drawableTypeCase_ == 13) && (blastTemplateBuilder_ != null)) {
        return blastTemplateBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 13) {
          return (net.rptools.maptool.server.proto.drawing.BlastTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.BlastTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.BlastTemplateDto blast_template = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.BlastTemplateDto, net.rptools.maptool.server.proto.drawing.BlastTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.BlastTemplateDtoOrBuilder> 
        getBlastTemplateFieldBuilder() {
      if (blastTemplateBuilder_ == null) {
        if (!(drawableTypeCase_ == 13)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.BlastTemplateDto.getDefaultInstance();
        }
        blastTemplateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.BlastTemplateDto, net.rptools.maptool.server.proto.drawing.BlastTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.BlastTemplateDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.BlastTemplateDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 13;
      onChanged();;
      return blastTemplateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.LineTemplateDto, net.rptools.maptool.server.proto.drawing.LineTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.LineTemplateDtoOrBuilder> lineTemplateBuilder_;
    /**
     * <code>.maptool.LineTemplateDto line_template = 14;</code>
     * @return Whether the lineTemplate field is set.
     */
    @java.lang.Override
    public boolean hasLineTemplate() {
      return drawableTypeCase_ == 14;
    }
    /**
     * <code>.maptool.LineTemplateDto line_template = 14;</code>
     * @return The lineTemplate.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.LineTemplateDto getLineTemplate() {
      if (lineTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 14) {
          return (net.rptools.maptool.server.proto.drawing.LineTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.LineTemplateDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 14) {
          return lineTemplateBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.LineTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.LineTemplateDto line_template = 14;</code>
     */
    public Builder setLineTemplate(net.rptools.maptool.server.proto.drawing.LineTemplateDto value) {
      if (lineTemplateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        lineTemplateBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.maptool.LineTemplateDto line_template = 14;</code>
     */
    public Builder setLineTemplate(
        net.rptools.maptool.server.proto.drawing.LineTemplateDto.Builder builderForValue) {
      if (lineTemplateBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        lineTemplateBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.maptool.LineTemplateDto line_template = 14;</code>
     */
    public Builder mergeLineTemplate(net.rptools.maptool.server.proto.drawing.LineTemplateDto value) {
      if (lineTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 14 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.LineTemplateDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.LineTemplateDto.newBuilder((net.rptools.maptool.server.proto.drawing.LineTemplateDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 14) {
          lineTemplateBuilder_.mergeFrom(value);
        } else {
          lineTemplateBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 14;
      return this;
    }
    /**
     * <code>.maptool.LineTemplateDto line_template = 14;</code>
     */
    public Builder clearLineTemplate() {
      if (lineTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 14) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 14) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        lineTemplateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.LineTemplateDto line_template = 14;</code>
     */
    public net.rptools.maptool.server.proto.drawing.LineTemplateDto.Builder getLineTemplateBuilder() {
      return getLineTemplateFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.LineTemplateDto line_template = 14;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.LineTemplateDtoOrBuilder getLineTemplateOrBuilder() {
      if ((drawableTypeCase_ == 14) && (lineTemplateBuilder_ != null)) {
        return lineTemplateBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 14) {
          return (net.rptools.maptool.server.proto.drawing.LineTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.LineTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.LineTemplateDto line_template = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.LineTemplateDto, net.rptools.maptool.server.proto.drawing.LineTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.LineTemplateDtoOrBuilder> 
        getLineTemplateFieldBuilder() {
      if (lineTemplateBuilder_ == null) {
        if (!(drawableTypeCase_ == 14)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.LineTemplateDto.getDefaultInstance();
        }
        lineTemplateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.LineTemplateDto, net.rptools.maptool.server.proto.drawing.LineTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.LineTemplateDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.LineTemplateDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 14;
      onChanged();;
      return lineTemplateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.WallTemplateDto, net.rptools.maptool.server.proto.drawing.WallTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.WallTemplateDtoOrBuilder> wallTemplateBuilder_;
    /**
     * <code>.maptool.WallTemplateDto wall_template = 15;</code>
     * @return Whether the wallTemplate field is set.
     */
    @java.lang.Override
    public boolean hasWallTemplate() {
      return drawableTypeCase_ == 15;
    }
    /**
     * <code>.maptool.WallTemplateDto wall_template = 15;</code>
     * @return The wallTemplate.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.WallTemplateDto getWallTemplate() {
      if (wallTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 15) {
          return (net.rptools.maptool.server.proto.drawing.WallTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.WallTemplateDto.getDefaultInstance();
      } else {
        if (drawableTypeCase_ == 15) {
          return wallTemplateBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.WallTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.WallTemplateDto wall_template = 15;</code>
     */
    public Builder setWallTemplate(net.rptools.maptool.server.proto.drawing.WallTemplateDto value) {
      if (wallTemplateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        drawableType_ = value;
        onChanged();
      } else {
        wallTemplateBuilder_.setMessage(value);
      }
      drawableTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.maptool.WallTemplateDto wall_template = 15;</code>
     */
    public Builder setWallTemplate(
        net.rptools.maptool.server.proto.drawing.WallTemplateDto.Builder builderForValue) {
      if (wallTemplateBuilder_ == null) {
        drawableType_ = builderForValue.build();
        onChanged();
      } else {
        wallTemplateBuilder_.setMessage(builderForValue.build());
      }
      drawableTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.maptool.WallTemplateDto wall_template = 15;</code>
     */
    public Builder mergeWallTemplate(net.rptools.maptool.server.proto.drawing.WallTemplateDto value) {
      if (wallTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 15 &&
            drawableType_ != net.rptools.maptool.server.proto.drawing.WallTemplateDto.getDefaultInstance()) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.WallTemplateDto.newBuilder((net.rptools.maptool.server.proto.drawing.WallTemplateDto) drawableType_)
              .mergeFrom(value).buildPartial();
        } else {
          drawableType_ = value;
        }
        onChanged();
      } else {
        if (drawableTypeCase_ == 15) {
          wallTemplateBuilder_.mergeFrom(value);
        } else {
          wallTemplateBuilder_.setMessage(value);
        }
      }
      drawableTypeCase_ = 15;
      return this;
    }
    /**
     * <code>.maptool.WallTemplateDto wall_template = 15;</code>
     */
    public Builder clearWallTemplate() {
      if (wallTemplateBuilder_ == null) {
        if (drawableTypeCase_ == 15) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
          onChanged();
        }
      } else {
        if (drawableTypeCase_ == 15) {
          drawableTypeCase_ = 0;
          drawableType_ = null;
        }
        wallTemplateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.WallTemplateDto wall_template = 15;</code>
     */
    public net.rptools.maptool.server.proto.drawing.WallTemplateDto.Builder getWallTemplateBuilder() {
      return getWallTemplateFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.WallTemplateDto wall_template = 15;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.WallTemplateDtoOrBuilder getWallTemplateOrBuilder() {
      if ((drawableTypeCase_ == 15) && (wallTemplateBuilder_ != null)) {
        return wallTemplateBuilder_.getMessageOrBuilder();
      } else {
        if (drawableTypeCase_ == 15) {
          return (net.rptools.maptool.server.proto.drawing.WallTemplateDto) drawableType_;
        }
        return net.rptools.maptool.server.proto.drawing.WallTemplateDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.WallTemplateDto wall_template = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.WallTemplateDto, net.rptools.maptool.server.proto.drawing.WallTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.WallTemplateDtoOrBuilder> 
        getWallTemplateFieldBuilder() {
      if (wallTemplateBuilder_ == null) {
        if (!(drawableTypeCase_ == 15)) {
          drawableType_ = net.rptools.maptool.server.proto.drawing.WallTemplateDto.getDefaultInstance();
        }
        wallTemplateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.WallTemplateDto, net.rptools.maptool.server.proto.drawing.WallTemplateDto.Builder, net.rptools.maptool.server.proto.drawing.WallTemplateDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.WallTemplateDto) drawableType_,
                getParentForChildren(),
                isClean());
        drawableType_ = null;
      }
      drawableTypeCase_ = 15;
      onChanged();;
      return wallTemplateBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maptool.DrawableDto)
  }

  // @@protoc_insertion_point(class_scope:maptool.DrawableDto)
  private static final net.rptools.maptool.server.proto.drawing.DrawableDto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new net.rptools.maptool.server.proto.drawing.DrawableDto();
  }

  public static net.rptools.maptool.server.proto.drawing.DrawableDto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DrawableDto>
      PARSER = new com.google.protobuf.AbstractParser<DrawableDto>() {
    @java.lang.Override
    public DrawableDto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new DrawableDto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DrawableDto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DrawableDto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.DrawableDto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

