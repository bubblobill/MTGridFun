// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_transfer_objects.proto

package net.rptools.maptool.server.proto;

/**
 * Protobuf enum {@code maptool.QuadrantDto}
 */
public enum QuadrantDto
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>NORTH_EAST = 0;</code>
   */
  NORTH_EAST(0),
  /**
   * <code>NORTH_WEST = 1;</code>
   */
  NORTH_WEST(1),
  /**
   * <code>SOUTH_EAST = 2;</code>
   */
  SOUTH_EAST(2),
  /**
   * <code>SOUTH_WEST = 3;</code>
   */
  SOUTH_WEST(3),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>NORTH_EAST = 0;</code>
   */
  public static final int NORTH_EAST_VALUE = 0;
  /**
   * <code>NORTH_WEST = 1;</code>
   */
  public static final int NORTH_WEST_VALUE = 1;
  /**
   * <code>SOUTH_EAST = 2;</code>
   */
  public static final int SOUTH_EAST_VALUE = 2;
  /**
   * <code>SOUTH_WEST = 3;</code>
   */
  public static final int SOUTH_WEST_VALUE = 3;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static QuadrantDto valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static QuadrantDto forNumber(int value) {
    switch (value) {
      case 0: return NORTH_EAST;
      case 1: return NORTH_WEST;
      case 2: return SOUTH_EAST;
      case 3: return SOUTH_WEST;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<QuadrantDto>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      QuadrantDto> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<QuadrantDto>() {
          public QuadrantDto findValueByNumber(int number) {
            return QuadrantDto.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.DataTranferObjectProtos.getDescriptor().getEnumTypes().get(1);
  }

  private static final QuadrantDto[] VALUES = values();

  public static QuadrantDto valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private QuadrantDto(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:maptool.QuadrantDto)
}

