// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drawing_dto.proto

package net.rptools.maptool.server.proto.drawing;

/**
 * Protobuf type {@code maptool.ShapeDto}
 */
public final class ShapeDto extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maptool.ShapeDto)
    ShapeDtoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ShapeDto.newBuilder() to construct.
  private ShapeDto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ShapeDto() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ShapeDto();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ShapeDto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            net.rptools.maptool.server.proto.drawing.RectangleDto.Builder subBuilder = null;
            if (shapeTypeCase_ == 1) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.RectangleDto) shapeType_).toBuilder();
            }
            shapeType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.RectangleDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.RectangleDto) shapeType_);
              shapeType_ = subBuilder.buildPartial();
            }
            shapeTypeCase_ = 1;
            break;
          }
          case 18: {
            net.rptools.maptool.server.proto.drawing.AreaDto.Builder subBuilder = null;
            if (shapeTypeCase_ == 2) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.AreaDto) shapeType_).toBuilder();
            }
            shapeType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.AreaDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.AreaDto) shapeType_);
              shapeType_ = subBuilder.buildPartial();
            }
            shapeTypeCase_ = 2;
            break;
          }
          case 26: {
            net.rptools.maptool.server.proto.drawing.PolygonDto.Builder subBuilder = null;
            if (shapeTypeCase_ == 3) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.PolygonDto) shapeType_).toBuilder();
            }
            shapeType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.PolygonDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.PolygonDto) shapeType_);
              shapeType_ = subBuilder.buildPartial();
            }
            shapeTypeCase_ = 3;
            break;
          }
          case 34: {
            net.rptools.maptool.server.proto.drawing.EllipseDto.Builder subBuilder = null;
            if (shapeTypeCase_ == 4) {
              subBuilder = ((net.rptools.maptool.server.proto.drawing.EllipseDto) shapeType_).toBuilder();
            }
            shapeType_ =
                input.readMessage(net.rptools.maptool.server.proto.drawing.EllipseDto.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((net.rptools.maptool.server.proto.drawing.EllipseDto) shapeType_);
              shapeType_ = subBuilder.buildPartial();
            }
            shapeTypeCase_ = 4;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_ShapeDto_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_ShapeDto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            net.rptools.maptool.server.proto.drawing.ShapeDto.class, net.rptools.maptool.server.proto.drawing.ShapeDto.Builder.class);
  }

  private int shapeTypeCase_ = 0;
  private java.lang.Object shapeType_;
  public enum ShapeTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    RECTANGLE(1),
    AREA(2),
    POLYGON(3),
    ELLIPSE(4),
    SHAPETYPE_NOT_SET(0);
    private final int value;
    private ShapeTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ShapeTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static ShapeTypeCase forNumber(int value) {
      switch (value) {
        case 1: return RECTANGLE;
        case 2: return AREA;
        case 3: return POLYGON;
        case 4: return ELLIPSE;
        case 0: return SHAPETYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ShapeTypeCase
  getShapeTypeCase() {
    return ShapeTypeCase.forNumber(
        shapeTypeCase_);
  }

  public static final int RECTANGLE_FIELD_NUMBER = 1;
  /**
   * <code>.maptool.RectangleDto rectangle = 1;</code>
   * @return Whether the rectangle field is set.
   */
  @java.lang.Override
  public boolean hasRectangle() {
    return shapeTypeCase_ == 1;
  }
  /**
   * <code>.maptool.RectangleDto rectangle = 1;</code>
   * @return The rectangle.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.RectangleDto getRectangle() {
    if (shapeTypeCase_ == 1) {
       return (net.rptools.maptool.server.proto.drawing.RectangleDto) shapeType_;
    }
    return net.rptools.maptool.server.proto.drawing.RectangleDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.RectangleDto rectangle = 1;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.RectangleDtoOrBuilder getRectangleOrBuilder() {
    if (shapeTypeCase_ == 1) {
       return (net.rptools.maptool.server.proto.drawing.RectangleDto) shapeType_;
    }
    return net.rptools.maptool.server.proto.drawing.RectangleDto.getDefaultInstance();
  }

  public static final int AREA_FIELD_NUMBER = 2;
  /**
   * <code>.maptool.AreaDto area = 2;</code>
   * @return Whether the area field is set.
   */
  @java.lang.Override
  public boolean hasArea() {
    return shapeTypeCase_ == 2;
  }
  /**
   * <code>.maptool.AreaDto area = 2;</code>
   * @return The area.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.AreaDto getArea() {
    if (shapeTypeCase_ == 2) {
       return (net.rptools.maptool.server.proto.drawing.AreaDto) shapeType_;
    }
    return net.rptools.maptool.server.proto.drawing.AreaDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.AreaDto area = 2;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.AreaDtoOrBuilder getAreaOrBuilder() {
    if (shapeTypeCase_ == 2) {
       return (net.rptools.maptool.server.proto.drawing.AreaDto) shapeType_;
    }
    return net.rptools.maptool.server.proto.drawing.AreaDto.getDefaultInstance();
  }

  public static final int POLYGON_FIELD_NUMBER = 3;
  /**
   * <code>.maptool.PolygonDto polygon = 3;</code>
   * @return Whether the polygon field is set.
   */
  @java.lang.Override
  public boolean hasPolygon() {
    return shapeTypeCase_ == 3;
  }
  /**
   * <code>.maptool.PolygonDto polygon = 3;</code>
   * @return The polygon.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.PolygonDto getPolygon() {
    if (shapeTypeCase_ == 3) {
       return (net.rptools.maptool.server.proto.drawing.PolygonDto) shapeType_;
    }
    return net.rptools.maptool.server.proto.drawing.PolygonDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.PolygonDto polygon = 3;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.PolygonDtoOrBuilder getPolygonOrBuilder() {
    if (shapeTypeCase_ == 3) {
       return (net.rptools.maptool.server.proto.drawing.PolygonDto) shapeType_;
    }
    return net.rptools.maptool.server.proto.drawing.PolygonDto.getDefaultInstance();
  }

  public static final int ELLIPSE_FIELD_NUMBER = 4;
  /**
   * <code>.maptool.EllipseDto ellipse = 4;</code>
   * @return Whether the ellipse field is set.
   */
  @java.lang.Override
  public boolean hasEllipse() {
    return shapeTypeCase_ == 4;
  }
  /**
   * <code>.maptool.EllipseDto ellipse = 4;</code>
   * @return The ellipse.
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.EllipseDto getEllipse() {
    if (shapeTypeCase_ == 4) {
       return (net.rptools.maptool.server.proto.drawing.EllipseDto) shapeType_;
    }
    return net.rptools.maptool.server.proto.drawing.EllipseDto.getDefaultInstance();
  }
  /**
   * <code>.maptool.EllipseDto ellipse = 4;</code>
   */
  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.EllipseDtoOrBuilder getEllipseOrBuilder() {
    if (shapeTypeCase_ == 4) {
       return (net.rptools.maptool.server.proto.drawing.EllipseDto) shapeType_;
    }
    return net.rptools.maptool.server.proto.drawing.EllipseDto.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (shapeTypeCase_ == 1) {
      output.writeMessage(1, (net.rptools.maptool.server.proto.drawing.RectangleDto) shapeType_);
    }
    if (shapeTypeCase_ == 2) {
      output.writeMessage(2, (net.rptools.maptool.server.proto.drawing.AreaDto) shapeType_);
    }
    if (shapeTypeCase_ == 3) {
      output.writeMessage(3, (net.rptools.maptool.server.proto.drawing.PolygonDto) shapeType_);
    }
    if (shapeTypeCase_ == 4) {
      output.writeMessage(4, (net.rptools.maptool.server.proto.drawing.EllipseDto) shapeType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (shapeTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (net.rptools.maptool.server.proto.drawing.RectangleDto) shapeType_);
    }
    if (shapeTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (net.rptools.maptool.server.proto.drawing.AreaDto) shapeType_);
    }
    if (shapeTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (net.rptools.maptool.server.proto.drawing.PolygonDto) shapeType_);
    }
    if (shapeTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (net.rptools.maptool.server.proto.drawing.EllipseDto) shapeType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof net.rptools.maptool.server.proto.drawing.ShapeDto)) {
      return super.equals(obj);
    }
    net.rptools.maptool.server.proto.drawing.ShapeDto other = (net.rptools.maptool.server.proto.drawing.ShapeDto) obj;

    if (!getShapeTypeCase().equals(other.getShapeTypeCase())) return false;
    switch (shapeTypeCase_) {
      case 1:
        if (!getRectangle()
            .equals(other.getRectangle())) return false;
        break;
      case 2:
        if (!getArea()
            .equals(other.getArea())) return false;
        break;
      case 3:
        if (!getPolygon()
            .equals(other.getPolygon())) return false;
        break;
      case 4:
        if (!getEllipse()
            .equals(other.getEllipse())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (shapeTypeCase_) {
      case 1:
        hash = (37 * hash) + RECTANGLE_FIELD_NUMBER;
        hash = (53 * hash) + getRectangle().hashCode();
        break;
      case 2:
        hash = (37 * hash) + AREA_FIELD_NUMBER;
        hash = (53 * hash) + getArea().hashCode();
        break;
      case 3:
        hash = (37 * hash) + POLYGON_FIELD_NUMBER;
        hash = (53 * hash) + getPolygon().hashCode();
        break;
      case 4:
        hash = (37 * hash) + ELLIPSE_FIELD_NUMBER;
        hash = (53 * hash) + getEllipse().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static net.rptools.maptool.server.proto.drawing.ShapeDto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(net.rptools.maptool.server.proto.drawing.ShapeDto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code maptool.ShapeDto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maptool.ShapeDto)
      net.rptools.maptool.server.proto.drawing.ShapeDtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_ShapeDto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_ShapeDto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              net.rptools.maptool.server.proto.drawing.ShapeDto.class, net.rptools.maptool.server.proto.drawing.ShapeDto.Builder.class);
    }

    // Construct using net.rptools.maptool.server.proto.drawing.ShapeDto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      shapeTypeCase_ = 0;
      shapeType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return net.rptools.maptool.server.proto.drawing.DrawingDtoProtos.internal_static_maptool_ShapeDto_descriptor;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.ShapeDto getDefaultInstanceForType() {
      return net.rptools.maptool.server.proto.drawing.ShapeDto.getDefaultInstance();
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.ShapeDto build() {
      net.rptools.maptool.server.proto.drawing.ShapeDto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.ShapeDto buildPartial() {
      net.rptools.maptool.server.proto.drawing.ShapeDto result = new net.rptools.maptool.server.proto.drawing.ShapeDto(this);
      if (shapeTypeCase_ == 1) {
        if (rectangleBuilder_ == null) {
          result.shapeType_ = shapeType_;
        } else {
          result.shapeType_ = rectangleBuilder_.build();
        }
      }
      if (shapeTypeCase_ == 2) {
        if (areaBuilder_ == null) {
          result.shapeType_ = shapeType_;
        } else {
          result.shapeType_ = areaBuilder_.build();
        }
      }
      if (shapeTypeCase_ == 3) {
        if (polygonBuilder_ == null) {
          result.shapeType_ = shapeType_;
        } else {
          result.shapeType_ = polygonBuilder_.build();
        }
      }
      if (shapeTypeCase_ == 4) {
        if (ellipseBuilder_ == null) {
          result.shapeType_ = shapeType_;
        } else {
          result.shapeType_ = ellipseBuilder_.build();
        }
      }
      result.shapeTypeCase_ = shapeTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof net.rptools.maptool.server.proto.drawing.ShapeDto) {
        return mergeFrom((net.rptools.maptool.server.proto.drawing.ShapeDto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(net.rptools.maptool.server.proto.drawing.ShapeDto other) {
      if (other == net.rptools.maptool.server.proto.drawing.ShapeDto.getDefaultInstance()) return this;
      switch (other.getShapeTypeCase()) {
        case RECTANGLE: {
          mergeRectangle(other.getRectangle());
          break;
        }
        case AREA: {
          mergeArea(other.getArea());
          break;
        }
        case POLYGON: {
          mergePolygon(other.getPolygon());
          break;
        }
        case ELLIPSE: {
          mergeEllipse(other.getEllipse());
          break;
        }
        case SHAPETYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      net.rptools.maptool.server.proto.drawing.ShapeDto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (net.rptools.maptool.server.proto.drawing.ShapeDto) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int shapeTypeCase_ = 0;
    private java.lang.Object shapeType_;
    public ShapeTypeCase
        getShapeTypeCase() {
      return ShapeTypeCase.forNumber(
          shapeTypeCase_);
    }

    public Builder clearShapeType() {
      shapeTypeCase_ = 0;
      shapeType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.RectangleDto, net.rptools.maptool.server.proto.drawing.RectangleDto.Builder, net.rptools.maptool.server.proto.drawing.RectangleDtoOrBuilder> rectangleBuilder_;
    /**
     * <code>.maptool.RectangleDto rectangle = 1;</code>
     * @return Whether the rectangle field is set.
     */
    @java.lang.Override
    public boolean hasRectangle() {
      return shapeTypeCase_ == 1;
    }
    /**
     * <code>.maptool.RectangleDto rectangle = 1;</code>
     * @return The rectangle.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.RectangleDto getRectangle() {
      if (rectangleBuilder_ == null) {
        if (shapeTypeCase_ == 1) {
          return (net.rptools.maptool.server.proto.drawing.RectangleDto) shapeType_;
        }
        return net.rptools.maptool.server.proto.drawing.RectangleDto.getDefaultInstance();
      } else {
        if (shapeTypeCase_ == 1) {
          return rectangleBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.RectangleDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.RectangleDto rectangle = 1;</code>
     */
    public Builder setRectangle(net.rptools.maptool.server.proto.drawing.RectangleDto value) {
      if (rectangleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        shapeType_ = value;
        onChanged();
      } else {
        rectangleBuilder_.setMessage(value);
      }
      shapeTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.maptool.RectangleDto rectangle = 1;</code>
     */
    public Builder setRectangle(
        net.rptools.maptool.server.proto.drawing.RectangleDto.Builder builderForValue) {
      if (rectangleBuilder_ == null) {
        shapeType_ = builderForValue.build();
        onChanged();
      } else {
        rectangleBuilder_.setMessage(builderForValue.build());
      }
      shapeTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.maptool.RectangleDto rectangle = 1;</code>
     */
    public Builder mergeRectangle(net.rptools.maptool.server.proto.drawing.RectangleDto value) {
      if (rectangleBuilder_ == null) {
        if (shapeTypeCase_ == 1 &&
            shapeType_ != net.rptools.maptool.server.proto.drawing.RectangleDto.getDefaultInstance()) {
          shapeType_ = net.rptools.maptool.server.proto.drawing.RectangleDto.newBuilder((net.rptools.maptool.server.proto.drawing.RectangleDto) shapeType_)
              .mergeFrom(value).buildPartial();
        } else {
          shapeType_ = value;
        }
        onChanged();
      } else {
        if (shapeTypeCase_ == 1) {
          rectangleBuilder_.mergeFrom(value);
        } else {
          rectangleBuilder_.setMessage(value);
        }
      }
      shapeTypeCase_ = 1;
      return this;
    }
    /**
     * <code>.maptool.RectangleDto rectangle = 1;</code>
     */
    public Builder clearRectangle() {
      if (rectangleBuilder_ == null) {
        if (shapeTypeCase_ == 1) {
          shapeTypeCase_ = 0;
          shapeType_ = null;
          onChanged();
        }
      } else {
        if (shapeTypeCase_ == 1) {
          shapeTypeCase_ = 0;
          shapeType_ = null;
        }
        rectangleBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.RectangleDto rectangle = 1;</code>
     */
    public net.rptools.maptool.server.proto.drawing.RectangleDto.Builder getRectangleBuilder() {
      return getRectangleFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.RectangleDto rectangle = 1;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.RectangleDtoOrBuilder getRectangleOrBuilder() {
      if ((shapeTypeCase_ == 1) && (rectangleBuilder_ != null)) {
        return rectangleBuilder_.getMessageOrBuilder();
      } else {
        if (shapeTypeCase_ == 1) {
          return (net.rptools.maptool.server.proto.drawing.RectangleDto) shapeType_;
        }
        return net.rptools.maptool.server.proto.drawing.RectangleDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.RectangleDto rectangle = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.RectangleDto, net.rptools.maptool.server.proto.drawing.RectangleDto.Builder, net.rptools.maptool.server.proto.drawing.RectangleDtoOrBuilder> 
        getRectangleFieldBuilder() {
      if (rectangleBuilder_ == null) {
        if (!(shapeTypeCase_ == 1)) {
          shapeType_ = net.rptools.maptool.server.proto.drawing.RectangleDto.getDefaultInstance();
        }
        rectangleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.RectangleDto, net.rptools.maptool.server.proto.drawing.RectangleDto.Builder, net.rptools.maptool.server.proto.drawing.RectangleDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.RectangleDto) shapeType_,
                getParentForChildren(),
                isClean());
        shapeType_ = null;
      }
      shapeTypeCase_ = 1;
      onChanged();;
      return rectangleBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.AreaDto, net.rptools.maptool.server.proto.drawing.AreaDto.Builder, net.rptools.maptool.server.proto.drawing.AreaDtoOrBuilder> areaBuilder_;
    /**
     * <code>.maptool.AreaDto area = 2;</code>
     * @return Whether the area field is set.
     */
    @java.lang.Override
    public boolean hasArea() {
      return shapeTypeCase_ == 2;
    }
    /**
     * <code>.maptool.AreaDto area = 2;</code>
     * @return The area.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.AreaDto getArea() {
      if (areaBuilder_ == null) {
        if (shapeTypeCase_ == 2) {
          return (net.rptools.maptool.server.proto.drawing.AreaDto) shapeType_;
        }
        return net.rptools.maptool.server.proto.drawing.AreaDto.getDefaultInstance();
      } else {
        if (shapeTypeCase_ == 2) {
          return areaBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.AreaDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.AreaDto area = 2;</code>
     */
    public Builder setArea(net.rptools.maptool.server.proto.drawing.AreaDto value) {
      if (areaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        shapeType_ = value;
        onChanged();
      } else {
        areaBuilder_.setMessage(value);
      }
      shapeTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.maptool.AreaDto area = 2;</code>
     */
    public Builder setArea(
        net.rptools.maptool.server.proto.drawing.AreaDto.Builder builderForValue) {
      if (areaBuilder_ == null) {
        shapeType_ = builderForValue.build();
        onChanged();
      } else {
        areaBuilder_.setMessage(builderForValue.build());
      }
      shapeTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.maptool.AreaDto area = 2;</code>
     */
    public Builder mergeArea(net.rptools.maptool.server.proto.drawing.AreaDto value) {
      if (areaBuilder_ == null) {
        if (shapeTypeCase_ == 2 &&
            shapeType_ != net.rptools.maptool.server.proto.drawing.AreaDto.getDefaultInstance()) {
          shapeType_ = net.rptools.maptool.server.proto.drawing.AreaDto.newBuilder((net.rptools.maptool.server.proto.drawing.AreaDto) shapeType_)
              .mergeFrom(value).buildPartial();
        } else {
          shapeType_ = value;
        }
        onChanged();
      } else {
        if (shapeTypeCase_ == 2) {
          areaBuilder_.mergeFrom(value);
        } else {
          areaBuilder_.setMessage(value);
        }
      }
      shapeTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.maptool.AreaDto area = 2;</code>
     */
    public Builder clearArea() {
      if (areaBuilder_ == null) {
        if (shapeTypeCase_ == 2) {
          shapeTypeCase_ = 0;
          shapeType_ = null;
          onChanged();
        }
      } else {
        if (shapeTypeCase_ == 2) {
          shapeTypeCase_ = 0;
          shapeType_ = null;
        }
        areaBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.AreaDto area = 2;</code>
     */
    public net.rptools.maptool.server.proto.drawing.AreaDto.Builder getAreaBuilder() {
      return getAreaFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.AreaDto area = 2;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.AreaDtoOrBuilder getAreaOrBuilder() {
      if ((shapeTypeCase_ == 2) && (areaBuilder_ != null)) {
        return areaBuilder_.getMessageOrBuilder();
      } else {
        if (shapeTypeCase_ == 2) {
          return (net.rptools.maptool.server.proto.drawing.AreaDto) shapeType_;
        }
        return net.rptools.maptool.server.proto.drawing.AreaDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.AreaDto area = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.AreaDto, net.rptools.maptool.server.proto.drawing.AreaDto.Builder, net.rptools.maptool.server.proto.drawing.AreaDtoOrBuilder> 
        getAreaFieldBuilder() {
      if (areaBuilder_ == null) {
        if (!(shapeTypeCase_ == 2)) {
          shapeType_ = net.rptools.maptool.server.proto.drawing.AreaDto.getDefaultInstance();
        }
        areaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.AreaDto, net.rptools.maptool.server.proto.drawing.AreaDto.Builder, net.rptools.maptool.server.proto.drawing.AreaDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.AreaDto) shapeType_,
                getParentForChildren(),
                isClean());
        shapeType_ = null;
      }
      shapeTypeCase_ = 2;
      onChanged();;
      return areaBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.PolygonDto, net.rptools.maptool.server.proto.drawing.PolygonDto.Builder, net.rptools.maptool.server.proto.drawing.PolygonDtoOrBuilder> polygonBuilder_;
    /**
     * <code>.maptool.PolygonDto polygon = 3;</code>
     * @return Whether the polygon field is set.
     */
    @java.lang.Override
    public boolean hasPolygon() {
      return shapeTypeCase_ == 3;
    }
    /**
     * <code>.maptool.PolygonDto polygon = 3;</code>
     * @return The polygon.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.PolygonDto getPolygon() {
      if (polygonBuilder_ == null) {
        if (shapeTypeCase_ == 3) {
          return (net.rptools.maptool.server.proto.drawing.PolygonDto) shapeType_;
        }
        return net.rptools.maptool.server.proto.drawing.PolygonDto.getDefaultInstance();
      } else {
        if (shapeTypeCase_ == 3) {
          return polygonBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.PolygonDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.PolygonDto polygon = 3;</code>
     */
    public Builder setPolygon(net.rptools.maptool.server.proto.drawing.PolygonDto value) {
      if (polygonBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        shapeType_ = value;
        onChanged();
      } else {
        polygonBuilder_.setMessage(value);
      }
      shapeTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.maptool.PolygonDto polygon = 3;</code>
     */
    public Builder setPolygon(
        net.rptools.maptool.server.proto.drawing.PolygonDto.Builder builderForValue) {
      if (polygonBuilder_ == null) {
        shapeType_ = builderForValue.build();
        onChanged();
      } else {
        polygonBuilder_.setMessage(builderForValue.build());
      }
      shapeTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.maptool.PolygonDto polygon = 3;</code>
     */
    public Builder mergePolygon(net.rptools.maptool.server.proto.drawing.PolygonDto value) {
      if (polygonBuilder_ == null) {
        if (shapeTypeCase_ == 3 &&
            shapeType_ != net.rptools.maptool.server.proto.drawing.PolygonDto.getDefaultInstance()) {
          shapeType_ = net.rptools.maptool.server.proto.drawing.PolygonDto.newBuilder((net.rptools.maptool.server.proto.drawing.PolygonDto) shapeType_)
              .mergeFrom(value).buildPartial();
        } else {
          shapeType_ = value;
        }
        onChanged();
      } else {
        if (shapeTypeCase_ == 3) {
          polygonBuilder_.mergeFrom(value);
        } else {
          polygonBuilder_.setMessage(value);
        }
      }
      shapeTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.maptool.PolygonDto polygon = 3;</code>
     */
    public Builder clearPolygon() {
      if (polygonBuilder_ == null) {
        if (shapeTypeCase_ == 3) {
          shapeTypeCase_ = 0;
          shapeType_ = null;
          onChanged();
        }
      } else {
        if (shapeTypeCase_ == 3) {
          shapeTypeCase_ = 0;
          shapeType_ = null;
        }
        polygonBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.PolygonDto polygon = 3;</code>
     */
    public net.rptools.maptool.server.proto.drawing.PolygonDto.Builder getPolygonBuilder() {
      return getPolygonFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.PolygonDto polygon = 3;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.PolygonDtoOrBuilder getPolygonOrBuilder() {
      if ((shapeTypeCase_ == 3) && (polygonBuilder_ != null)) {
        return polygonBuilder_.getMessageOrBuilder();
      } else {
        if (shapeTypeCase_ == 3) {
          return (net.rptools.maptool.server.proto.drawing.PolygonDto) shapeType_;
        }
        return net.rptools.maptool.server.proto.drawing.PolygonDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.PolygonDto polygon = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.PolygonDto, net.rptools.maptool.server.proto.drawing.PolygonDto.Builder, net.rptools.maptool.server.proto.drawing.PolygonDtoOrBuilder> 
        getPolygonFieldBuilder() {
      if (polygonBuilder_ == null) {
        if (!(shapeTypeCase_ == 3)) {
          shapeType_ = net.rptools.maptool.server.proto.drawing.PolygonDto.getDefaultInstance();
        }
        polygonBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.PolygonDto, net.rptools.maptool.server.proto.drawing.PolygonDto.Builder, net.rptools.maptool.server.proto.drawing.PolygonDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.PolygonDto) shapeType_,
                getParentForChildren(),
                isClean());
        shapeType_ = null;
      }
      shapeTypeCase_ = 3;
      onChanged();;
      return polygonBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.EllipseDto, net.rptools.maptool.server.proto.drawing.EllipseDto.Builder, net.rptools.maptool.server.proto.drawing.EllipseDtoOrBuilder> ellipseBuilder_;
    /**
     * <code>.maptool.EllipseDto ellipse = 4;</code>
     * @return Whether the ellipse field is set.
     */
    @java.lang.Override
    public boolean hasEllipse() {
      return shapeTypeCase_ == 4;
    }
    /**
     * <code>.maptool.EllipseDto ellipse = 4;</code>
     * @return The ellipse.
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.EllipseDto getEllipse() {
      if (ellipseBuilder_ == null) {
        if (shapeTypeCase_ == 4) {
          return (net.rptools.maptool.server.proto.drawing.EllipseDto) shapeType_;
        }
        return net.rptools.maptool.server.proto.drawing.EllipseDto.getDefaultInstance();
      } else {
        if (shapeTypeCase_ == 4) {
          return ellipseBuilder_.getMessage();
        }
        return net.rptools.maptool.server.proto.drawing.EllipseDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.EllipseDto ellipse = 4;</code>
     */
    public Builder setEllipse(net.rptools.maptool.server.proto.drawing.EllipseDto value) {
      if (ellipseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        shapeType_ = value;
        onChanged();
      } else {
        ellipseBuilder_.setMessage(value);
      }
      shapeTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.maptool.EllipseDto ellipse = 4;</code>
     */
    public Builder setEllipse(
        net.rptools.maptool.server.proto.drawing.EllipseDto.Builder builderForValue) {
      if (ellipseBuilder_ == null) {
        shapeType_ = builderForValue.build();
        onChanged();
      } else {
        ellipseBuilder_.setMessage(builderForValue.build());
      }
      shapeTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.maptool.EllipseDto ellipse = 4;</code>
     */
    public Builder mergeEllipse(net.rptools.maptool.server.proto.drawing.EllipseDto value) {
      if (ellipseBuilder_ == null) {
        if (shapeTypeCase_ == 4 &&
            shapeType_ != net.rptools.maptool.server.proto.drawing.EllipseDto.getDefaultInstance()) {
          shapeType_ = net.rptools.maptool.server.proto.drawing.EllipseDto.newBuilder((net.rptools.maptool.server.proto.drawing.EllipseDto) shapeType_)
              .mergeFrom(value).buildPartial();
        } else {
          shapeType_ = value;
        }
        onChanged();
      } else {
        if (shapeTypeCase_ == 4) {
          ellipseBuilder_.mergeFrom(value);
        } else {
          ellipseBuilder_.setMessage(value);
        }
      }
      shapeTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.maptool.EllipseDto ellipse = 4;</code>
     */
    public Builder clearEllipse() {
      if (ellipseBuilder_ == null) {
        if (shapeTypeCase_ == 4) {
          shapeTypeCase_ = 0;
          shapeType_ = null;
          onChanged();
        }
      } else {
        if (shapeTypeCase_ == 4) {
          shapeTypeCase_ = 0;
          shapeType_ = null;
        }
        ellipseBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.maptool.EllipseDto ellipse = 4;</code>
     */
    public net.rptools.maptool.server.proto.drawing.EllipseDto.Builder getEllipseBuilder() {
      return getEllipseFieldBuilder().getBuilder();
    }
    /**
     * <code>.maptool.EllipseDto ellipse = 4;</code>
     */
    @java.lang.Override
    public net.rptools.maptool.server.proto.drawing.EllipseDtoOrBuilder getEllipseOrBuilder() {
      if ((shapeTypeCase_ == 4) && (ellipseBuilder_ != null)) {
        return ellipseBuilder_.getMessageOrBuilder();
      } else {
        if (shapeTypeCase_ == 4) {
          return (net.rptools.maptool.server.proto.drawing.EllipseDto) shapeType_;
        }
        return net.rptools.maptool.server.proto.drawing.EllipseDto.getDefaultInstance();
      }
    }
    /**
     * <code>.maptool.EllipseDto ellipse = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        net.rptools.maptool.server.proto.drawing.EllipseDto, net.rptools.maptool.server.proto.drawing.EllipseDto.Builder, net.rptools.maptool.server.proto.drawing.EllipseDtoOrBuilder> 
        getEllipseFieldBuilder() {
      if (ellipseBuilder_ == null) {
        if (!(shapeTypeCase_ == 4)) {
          shapeType_ = net.rptools.maptool.server.proto.drawing.EllipseDto.getDefaultInstance();
        }
        ellipseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            net.rptools.maptool.server.proto.drawing.EllipseDto, net.rptools.maptool.server.proto.drawing.EllipseDto.Builder, net.rptools.maptool.server.proto.drawing.EllipseDtoOrBuilder>(
                (net.rptools.maptool.server.proto.drawing.EllipseDto) shapeType_,
                getParentForChildren(),
                isClean());
        shapeType_ = null;
      }
      shapeTypeCase_ = 4;
      onChanged();;
      return ellipseBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maptool.ShapeDto)
  }

  // @@protoc_insertion_point(class_scope:maptool.ShapeDto)
  private static final net.rptools.maptool.server.proto.drawing.ShapeDto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new net.rptools.maptool.server.proto.drawing.ShapeDto();
  }

  public static net.rptools.maptool.server.proto.drawing.ShapeDto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ShapeDto>
      PARSER = new com.google.protobuf.AbstractParser<ShapeDto>() {
    @java.lang.Override
    public ShapeDto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ShapeDto(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ShapeDto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ShapeDto> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public net.rptools.maptool.server.proto.drawing.ShapeDto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

